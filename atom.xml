<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Chenfan's blog]]></title>
  <subtitle><![CDATA[It's the way I choose.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jcf94.github.io/"/>
  <updated>2015-06-28T02:11:43.691Z</updated>
  <id>http://jcf94.github.io/</id>
  
  <author>
    <name><![CDATA[Jcf94]]></name>
    <email><![CDATA[jcf94@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[微波技术与天线 复习笔记]]></title>
    <link href="http://jcf94.github.io/2015/06/27/2015-06-27-weibojishuyutianxian/"/>
    <id>http://jcf94.github.io/2015/06/27/2015-06-27-weibojishuyutianxian/</id>
    <published>2015-06-27T04:25:35.000Z</published>
    <updated>2015-06-28T02:11:43.691Z</updated>
    <content type="html"><![CDATA[<h1 id="绪论">绪论</h1><hr>
<ul>
<li><p><strong>微波</strong>是电磁波谱中介于超短波与红外线之间的波段，频率范围从<strong>300MHz（波长1m）</strong>至<strong>3000GHz（波长0.1mm）</strong></p>
</li>
<li><p>微波、天线与电波：三者的共同基础都是<strong>电磁场理论</strong>，是电磁场在<strong>不同边界值条件下</strong>的应用</p>
</li>
</ul>
<p>微波：研究如何<strong>导引</strong>电磁波在微波传输系统中的有效传输</p>
<p>天线：1.有效地辐射或者接受电磁波；2.把无线电波能量转换为导行波能量</p>
<p>电波：分析和研究电波在空间的传播方式和特点</p>
<a id="more"></a>
<h1 id="第一章_均匀传输线理论">第一章 均匀传输线理论</h1><hr>
<ul>
<li><p>微波传输线是用传输<strong>微波信息和能量</strong>的各种形式传输系统的总称，它的作用是<strong>引导</strong>电磁波沿一定方向传输，因此又称为<strong>导波系统</strong>，其所引导的电磁波被称为<strong>导行波</strong></p>
</li>
<li><p>一般将截面尺寸、形状、媒质分布、材料及边界条件均不变的导波系统称为<strong>规则导波系统</strong></p>
</li>
<li><p>微波无源器件、均匀传输线、有源元器件以及天线一起构成微波系统</p>
</li>
</ul>
<hr>
<ul>
<li><p>将传输线上导行波的<strong>电压与电流之比</strong>定义为传输线的<strong>特性阻抗</strong>，用 $Z_0$ 来表示，其倒数称为特性导纳，用 $Y_0$ 来表示</p>
</li>
<li><p>常用平行双导线传输线的特性阻抗有<strong>250$\Omega$、400$\Omega$和600$\Omega$</strong>三种</p>
</li>
<li><p>传输线上<strong>任意一点的电压与电流之比</strong>称为传输线在该点的<strong>阻抗</strong></p>
</li>
<li><p>均匀无耗传输线上任意一点的<strong>输入阻抗</strong>与<strong>观察点的位置</strong>、传输线的<strong>特性阻抗</strong>、<strong>终端负载阻抗</strong>及<strong>工作频率</strong>有关</p>
</li>
<li><p>无耗传输线上任意相距<strong>${1 \over 2}$波长阻抗相同，${1 \over 4}$波长阻抗变换</strong></p>
</li>
<li><p>定义传输线上任意一点的<strong>反射波电压（或电流）与入射波电压（或电流）</strong>之比为<strong>电压（或电流）的反射系数$\Gamma$</strong></p>
</li>
<li><p>终端反射系数：</p>
</li>
</ul>
<p>$$\Gamma_1=\frac {Z_1-Z_0}{Z_1+Z_0}=|\Gamma_1|e^{j\phi_1}$$</p>
<ul>
<li>反射系数：</li>
</ul>
<p>$$\Gamma(z)=|\Gamma_1|e^{-j2\beta z}=|\Gamma_1|e^{j(\phi_1-2\beta z)}$$</p>
<p>$$\Gamma(0)=\Gamma_1$$</p>
<ul>
<li>输入阻抗与反射系数的关系：</li>
</ul>
<p>$$Z_{in}(z)=Z_0\frac{1+\Gamma(z)}{1-\Gamma(z)}$$</p>
<p>$$\Gamma(z)=\frac{Z_{in}(z)-Z_0}{Z_{in}(z)+Z_0}$$</p>
<ul>
<li>相移常数</li>
</ul>
<p>$$\beta=\frac{2\pi f}{c}$$</p>
<p>默认取$2\pi$即可</p>
<ul>
<li><p>反射系数也具有<strong>${1 \over 2}$波长重复性</strong></p>
</li>
<li><p>当传输线<strong>特性阻抗一定</strong>时，输入阻抗与反射系数有<strong>一一对应</strong>的关系</p>
</li>
<li><p>当$Z_1=Z_2$时，反射系数为0，即终端无反射，称为<strong>负载匹配</strong></p>
</li>
<li><p>定义传输线上<strong>波腹点电压振幅与波节点电压振幅之比</strong>为<strong>电压驻波比</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>无耗传输线的状态</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>行波状态</td>
<td>$Z_1=Z_0$</td>
<td>反射系数为0</td>
<td>终端无反射</td>
<td>负载匹配</td>
</tr>
<tr>
<td>纯驻波状态</td>
<td>$\frac {Z_1-Z_0}{Z_1+Z_0}=1$</td>
<td>反射系数为1</td>
<td>终端全反射</td>
<td></td>
</tr>
<tr>
<td>行驻波状态</td>
<td>终端接任意负数阻抗负载</td>
<td></td>
<td></td>
<td>既有行波又有纯驻波</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li><p><strong>负载阻抗匹配</strong>：<strong>负载阻抗</strong>等于传输线的特性阻抗，传输线上只有从信源到负载的入射波，而无反射波。<strong>匹配负载完全吸收了由信源入射来的微波功率。</strong></p>
</li>
<li><p><strong>源阻抗匹配</strong>：<strong>电源内阻</strong>等于传输线的特性阻抗。<strong>入射功率不随负载变化。</strong></p>
</li>
<li><p><strong>共轭阻抗匹配</strong>：不匹配电源，当<strong>负载阻抗折合到电源参考面上的输入阻抗</strong>为电源内阻的共轭值时，<strong>负载能得到最大的功率值</strong></p>
</li>
</ul>
<h1 id="第二章_规则金属波导">第二章 规则金属波导</h1><hr>
<ul>
<li><p>当工作波长<strong>小于</strong>截止波长时，此模可以在波导中传输，称为传导模</p>
</li>
<li><p>当工作波长<strong>大于</strong>截止波长时，此模不能在波导中传输，称为截止模</p>
</li>
<li><p>激励波导的三种方法：<strong>电激励、磁激励和电流激励</strong></p>
</li>
</ul>
<h2 id="矩形波导">矩形波导</h2><ul>
<li><p>宽边尺寸a，窄边尺寸b</p>
</li>
<li><p>截止波数：</p>
</li>
</ul>
<p>$$k_{cmn}=\sqrt{(\frac{m\pi}{a})^2+(\frac{n\pi}{b})^2}$$</p>
<ul>
<li>截止波长：</li>
</ul>
<p>$$\lambda_{cTE_{mn}}=\lambda_{cTM_{mn}}=\frac{2\pi}{k_{cmn}}=\frac{2}{\sqrt{(\frac{m}{a})^2+(\frac{n}{b})^2}}$$</p>
<ul>
<li>例如：</li>
</ul>
<p>$$\lambda_{cTE_{10}}=2a$$<br>$$\lambda_{cTE_{01}}=2b$$<br>$$\lambda_{cTM_{11}}=\frac{2ab}{\sqrt{a^2+b^2}}$$</p>
<h3 id="TE波">TE波</h3><ul>
<li>$TE_{01}$为<strong>最低次模（主模）</strong>，其余称为高次模</li>
</ul>
<h3 id="TM波">TM波</h3><ul>
<li>$TM_{11}$为<strong>最低次模</strong>，其余均为高次模</li>
</ul>
<h2 id="圆形波导">圆形波导</h2><ul>
<li><p>外导体内径a</p>
</li>
<li><p>截止波数：</p>
</li>
</ul>
<p>$$k_{cTE_{mn}}=\frac{\mu_{mn}}{a}$$<br>$$k_{cTM_{mn}}=\frac{\nu_{mn}}{a}$$</p>
<ul>
<li>截止波长：</li>
</ul>
<p>$$\lambda_{cTE_{mn}}=\frac{2\pi}{k_{cTE_{mn}}}=\frac{2\pi a}{\mu_{mn}}$$<br>$$\lambda_{cTM_{mn}}=\frac{2\pi}{k_{cTM_{mn}}}=\frac{2\pi a}{\nu_{mn}}$$</p>
<ul>
<li>在所有的模式中，$TE_{11}$模截止波最长，其次为$TM_{01}$模，三种典型模式的截止波长为：</li>
</ul>
<p>$$\lambda_{cTE_{11}}=3.4126a$$<br>$$\lambda_{cTM_{01}}=2.6127a$$<br>$$\lambda_{cTE_{01}}=1.6398a$$</p>
<h1 id="第三章_微波集成传输线">第三章 微波集成传输线</h1><hr>
<ul>
<li>各种集成微波传输系统：</li>
</ul>
<ol>
<li><strong>准TEM波传输线</strong>，主要包括微带传输线和共面波导等</li>
<li><strong>非TEM波传输线</strong>，主要包括槽线、鳍线等</li>
<li><strong>开放式介质波导传输线</strong>，主要包括介质波导、镜像波导等</li>
<li><strong>半开放式介质波导</strong>，主要包括H形波导、G形波导等</li>
</ol>
<ul>
<li>对于耦合微带线，可以将激励分为<strong>奇模激励和偶模激励</strong></li>
</ul>
<p>设两线的激励电压分别为$U_1、U_2$，则可表示为两个<strong>等幅同相</strong>电压激励$U_e（奇模激励）$和两个<strong>等幅反相</strong>电压激励$U_o$</p>
<h1 id="第四章_微波网络基础">第四章 微波网络基础</h1><hr>
<ul>
<li>阻抗矩阵：</li>
</ul>
<p>$$U_1=Z_{11}I_1+Z_{12}I_2$$</p>
<p>$$U_2=Z_{21}I_1+Z_{22}I_2$$</p>
<p>$$[U]=[Z][I]$$</p>
<p>其中$[U]$为电压矩阵，$[I]$为电流矩阵，$[Z]$为阻抗矩阵，其中$Z_{11}$、$Z_{22}$分别是端口1和端口2的自阻抗，$Z_{12}$、$Z_{21}$分别是端口1和端口2的互阻抗。</p>
<ul>
<li>导纳矩阵</li>
</ul>
<p>$$I_1=Y_{11}U_1+Y_{12}U_2$$</p>
<p>$$I_2=Y_{21}U_1+Y_{22}U_2$$</p>
<p>$$[I]=[Y][U]$$</p>
<ul>
<li>散射矩阵</li>
</ul>
<p>对于线性网络，归一化入射波和归一化反射射波之间是线性关系，故有线性方程：</p>
<p>$$b_1=S_{11}a_1+S_{12}a_2$$</p>
<p>$$b_2=S_{21}a_1+S_{22}a_2$$</p>
<p>$$[b]=[S][a]$$</p>
<p>对于互易网络：$S_{12}=S_{21}$</p>
<p>对于对称网络：$S_{11}=S_{22}$</p>
<p>对于无耗网络：$[S]^+[S]=[E]$<br>其中$[S]^+$是$[S]$的转置共轭矩阵，$[E]$为单位矩阵</p>
<h1 id="第五章_微波元器件">第五章 微波元器件</h1><hr>
<ul>
<li><strong>定向耦合器</strong>，是一种具有<strong>定向传输特性</strong>的四端口元件。</li>
</ul>
<p>端口1：输入端</p>
<p>端口2：直通输出端</p>
<p>端口3：耦合输出端</p>
<p>端口4：隔离端</p>
<p>性能指标：耦合度、隔离度、定向度、输入驻波比和工作带宽</p>
<h1 id="第六章_天线辐射与接收的基本理论">第六章 天线辐射与接收的基本理论</h1><hr>
<p>*　天线应具有以下功能：</p>
<ol>
<li>天线应能将导波能量尽可能多转变为<strong>电磁波能量</strong></li>
<li>天线应使电磁波尽可能集中于确定的方向上，即<strong>天线具有方向性</strong></li>
<li>天线应能发射或接收规定极化的电磁波，即<strong>天线有适当的极化</strong></li>
<li>天线应有足够的<strong>工作频带</strong></li>
</ol>
<ul>
<li><p>电基本振子是一段长度$l$<strong>远小于波长</strong>、电流$I$<strong>振幅均匀分布、相位相同</strong>的直线电流元。它是线天线的基本组成部分，任意线天线均可看成是由一系列电基本振子组成的。</p>
</li>
<li><p>天线的电参数：</p>
</li>
</ul>
<ol>
<li><strong>天线方向图</strong>：指在<strong>离天线一定距离处</strong>，辐射场的<strong>相对场强（归一化模值）</strong>随方向变化的曲线图，通常采用通过天线最大辐射方向上的<strong>两个相互垂直的</strong>平面方向图来表示</li>
<li><strong>天线效率</strong>：定义为天线<strong>辐射功率与输入功率</strong>之比</li>
<li><strong>增益系数</strong>：是综合衡量天线<strong>能量转换和方向特性</strong>的参数，它是<strong>方向系数与天线效率的乘积</strong>，记为G</li>
<li><strong>极化和交叉极化电平</strong>：极化特性是指天线在<strong>最大辐射方向</strong>上电场矢量的方向<strong>随时间变化</strong>的规律。有线极化、圆极化、椭圆极化等。引入交叉极化电平来表征<strong>线极化的纯度</strong>。</li>
<li><strong>频带宽度</strong>：当工作频率变化时，天线的<strong>有关电参数不超出规定范围的频率范围</strong>称为天线的频带宽度，简称天线的带宽</li>
<li><strong>输入阻抗与驻波比</strong></li>
<li><strong>有效长度</strong>：在保持实际天线最大辐射方向上的<strong>场强值不变</strong>的条件下，假设天线上<strong>电流分布为均匀分布</strong>时天线的<strong>等效长度</strong>。有效长度越长，表明天线的辐射能力越强。</li>
</ol>
<h1 id="第七章_电波传播概论"><del>第七章 电波传播概论</del></h1><h1 id="第八章_线天线">第八章 线天线</h1><hr>
<ul>
<li><p>横向尺寸<strong>远小于</strong>纵向尺寸并<strong>小于波长</strong>的细长结构的天线称为线天线</p>
</li>
<li><p>为了加强天线的<strong>方向性</strong>，将若干<strong>辐射单元</strong>按某种方式排列所构成的系统称为<strong>天线阵列</strong></p>
</li>
<li><p>相似元：各阵元的形状与尺寸相同，且以相同的姿态排列</p>
</li>
<li><p><strong>元因子</strong>$|F(\theta,\varphi)|$表示组成天线阵的<strong>单个辐射元</strong>的方向图函数，其值<strong>仅取决于天线元本身的类型和尺寸</strong>，体现了天线元的方向性对天线阵方向性的影响</p>
</li>
<li><p><strong>阵因子</strong>表示<strong>各向同性元</strong>所组成的天线阵的方向性，其值取决于天线阵的排列方式及其天线元上激励电流的相对振幅和相位</p>
</li>
<li><p>在各天线元为相似元的条件下，天线阵的方向图函数是<strong>单元因子与阵因子之积</strong>，这个特性称为<strong>方向图乘积定理</strong></p>
</li>
<li><p>最大辐射方向在<strong>垂直于阵轴方向</strong>的天线阵称为<strong>边射式直线阵</strong></p>
</li>
<li><p>最大辐射方向在<strong>阵轴方向</strong>的天线阵称为<strong>端射式直线阵</strong></p>
</li>
<li><p><strong>均匀直线阵</strong>是等间距、各阵元电流的幅度<strong>相等（等幅分布）</strong>而相位依次灯亮递增或递减的直线阵</p>
</li>
</ul>
<h1 id="第九章_面天线">第九章 面天线</h1><hr>
<ul>
<li><p>面天线又称口径天线，它所载的电流<strong>沿天线体的金属表面</strong>分布，且面天线的口径尺寸<strong>远大于</strong>工作波长</p>
</li>
<li><p><strong>惠更斯-菲涅尔原理</strong>：在空间任意一点的场，是包围天线的<strong>封闭曲面</strong>上各点的<strong>电磁扰动产生的次级辐射</strong>在该点<strong>叠加</strong>的结果</p>
</li>
<li><p><strong>旋转抛物面天线</strong>由两部分组成：1.抛物线绕其焦轴旋转而成的抛物反射面；2.置于抛物面焦点处的馈源（照射器）</p>
</li>
</ul>
<h1 id="第十章_微波应用系统"><del>第十章 微波应用系统</del></h1><hr>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="绪论">绪论</h1><hr>
<ul>
<li><p><strong>微波</strong>是电磁波谱中介于超短波与红外线之间的波段，频率范围从<strong>300MHz（波长1m）</strong>至<strong>3000GHz（波长0.1mm）</strong></p>
</li>
<li><p>微波、天线与电波：三者的共同基础都是<strong>电磁场理论</strong>，是电磁场在<strong>不同边界值条件下</strong>的应用</p>
</li>
</ul>
<p>微波：研究如何<strong>导引</strong>电磁波在微波传输系统中的有效传输</p>
<p>天线：1.有效地辐射或者接受电磁波；2.把无线电波能量转换为导行波能量</p>
<p>电波：分析和研究电波在空间的传播方式和特点</p>]]>
    
    </summary>
    
      <category term="复习笔记" scheme="http://jcf94.github.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="我的大学" scheme="http://jcf94.github.io/categories/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小记]]></title>
    <link href="http://jcf94.github.io/2015/06/25/2015-06-25-baoyan/"/>
    <id>http://jcf94.github.io/2015/06/25/2015-06-25-baoyan/</id>
    <published>2015-06-25T15:34:09.000Z</published>
    <updated>2015-06-26T14:17:43.000Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>直面现实的时候，才会觉得害怕<br>总有一天我们是要离开象牙塔的<br></blockquote>

<p>今晚被拉去听了我们学院的考研解读会。</p>
<p>其实当初说要求每个班都有要去的人数指标的时候就已经想到了这可能会是个坑了，果然，我说我真没想到我听的第一个宣讲会会是我自己学校的。</p>
<blockquote>
<p>整个解读会的主题就是留本校留本校留本校留本校留本校…</p>
</blockquote>
<p>说真的，其实也是听了今晚院领导的各种“吹”，才赫然发现我们学校，<strong>真心不错</strong>！！也难怪分数线一年比一年高、、、</p>
<p>然而人各有志，也是真心想离开这里。。。</p>
<a id="more"></a>
<hr>
<p>开始投夏令营的时候投了3个，中科大、北大、中山卡耐基，直到今天似乎终于大部分的学校都截止报名了，然后幸而我也收到了第一个确认。</p>
<p>之前想想还是挺忐忑的，虽然以前已经有了两年前PSW保去复旦的先例了，总还是对自己的学校不太有信心。</p>
<blockquote>
<p>知名度太低，谁知道你是个211？没当成<strong>民办三本</strong>就已经很好啦（虽然我们平时自己也是这么自黑的）</p>
</blockquote>
<p>而且纵观我们学院这几年保出去的那些，西交西电居多，如此大胆往这么高的地方投的，可能真的不多吧。</p>
<hr>
<blockquote>
<p>然而我<strong>不甘心</strong>。不甘心我的星辰大海，只有这么点大吧？</p>
</blockquote>
<p>也是怪自己要求太高，直博的不想去，挑计算机，又重点想找自己想学的系统结构比较强的。。。然后最后就只剩几个了。</p>
<p>一边考着试，一边忐忑地等着结果，今天考完了这学期的倒数第二门，距离告别大三只差最后一门仙姑的《微波技术与天线》啦~</p>
<hr>
<blockquote>
<p>得到第一个接收回复算是终于稍微有点底了。</p>
</blockquote>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-25-baoyan-1.jpg" alt="huifu"></p>
<hr>
<p>我现在最想拿的还是中山卡耐基的offer。</p>
<blockquote>
<p>在中大待一年，赴美卡耐基待一年，然后拿到两个学校的学位，留美打拼几年之后再回国。</p>
</blockquote>
<p>想想也是挺好的。</p>
<hr>
<p>日子过得挺累，或许好多事情原本就不应该我去多担心吧。</p>
<p>就是自从去年家里掏空积蓄买了那套房开始，正好又碰上行业不景气，老爸的厂里生意巨差。</p>
<p>也是真的不敢给他们再多压力了，也是想自己赶紧能够出来赚到自己的钱，每次一想到爸妈，就会觉得他们很累。</p>
<blockquote>
<p>之前花了好久考虑到底要不要读研？呵呵，直接毕业出去工作算了。。。</p>
</blockquote>
<p>结果弄到最后我居然想的是出国这条要花更多钱的路？</p>
<p>或许这就是一条专属于程序员的路吧。</p>
<p>我对自己尽最大的可能估测如果能拿到10k/月的薪资已经是很好了，然而这样给人打工能到什么时候？又能怎么还清背后的一屁股债啊。。。</p>
<p>程序员在美帝整体的待遇还是很不错的，EE/CS毕业生平均大概能找到6W/年的工资吧，努力一点，节省一点，折合成RMB就能多很多。</p>
<p>而且总的来说，这个行业在那边发展的也是更好一些，等到学成打拼几年之后带着积蓄归国，想想也是个不错的选择不是吗？</p>
<hr>
<p>也许我还是把事情想得太简单了吧，之前在知乎上搜了相关的问题也都是喜忧参半。</p>
<ul>
<li>这篇文章给了我很大的鼓舞</li>
</ul>
<p><a href="http://www.zhihu.com/question/24876778/answer/29381504" target="_blank" rel="external">家境一般如何出国留学？</a></p>
<ul>
<li>这个则是留给我更多的思考，当然我并不想留在美帝。。。情况应该能好一些</li>
</ul>
<p><a href="http://www.zhihu.com/question/27829455" target="_blank" rel="external">寒门学子能否通过赴美攻读研究生，最终留在美国？</a></p>
<hr>
<p>T_T 夜深了，想不明白的只有回头再考虑了</p>
<p>明天中山卡耐基会在西交有个宣讲会，去听下再作打算吧。</p>
<blockquote>
<p>然而我还不一定能过人家的初审。。。。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>直面现实的时候，才会觉得害怕<br>总有一天我们是要离开象牙塔的<br></blockquote>

<p>今晚被拉去听了我们学院的考研解读会。</p>
<p>其实当初说要求每个班都有要去的人数指标的时候就已经想到了这可能会是个坑了，果然，我说我真没想到我听的第一个宣讲会会是我自己学校的。</p>
<blockquote>
<p>整个解读会的主题就是留本校留本校留本校留本校留本校…</p>
</blockquote>
<p>说真的，其实也是听了今晚院领导的各种“吹”，才赫然发现我们学校，<strong>真心不错</strong>！！也难怪分数线一年比一年高、、、</p>
<p>然而人各有志，也是真心想离开这里。。。</p>]]>
    
    </summary>
    
      <category term="保研" scheme="http://jcf94.github.io/tags/%E4%BF%9D%E7%A0%94/"/>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Size Balanced Tree]]></title>
    <link href="http://jcf94.github.io/2015/06/19/2015-06-19-sbt/"/>
    <id>http://jcf94.github.io/2015/06/19/2015-06-19-sbt/</id>
    <published>2015-06-19T09:27:28.000Z</published>
    <updated>2015-06-19T09:32:43.012Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>这将会是你踏入高级数据结构的第一步。<br></blockquote>

<p>终于要开始给队里面讲这种比较高级的数据结构了，也趁此机会自己好好理理。</p>
<p>首先要讲的是这个：</p>
<h1 id="二叉搜索树">二叉搜索树</h1><hr>
<p>二叉搜索树又叫二叉排序树，它的定义很简单：</p>
<ol>
<li><p>这是一棵二叉树</p>
</li>
<li><p>令x为二叉树中某个结点上表示的值，那么其左子树上所有结点的值都要不大于x，其右子树上所有结点的值都要不小于x</p>
</li>
</ol>
<a id="more"></a>
<p>存储结构一般用链表或者结构体数组模拟链表等等均可。</p>
<p><strong>中序遍历</strong>二叉排序树可得到一个关键字的有序序列，一个无序序列可以通过构造一棵二叉排序树变成一个有序序列，构造树的过程也可以看成是<strong>对无序序列进行排序</strong>的过程。</p>
<p>基本操作有几种：</p>
<ul>
<li>插入</li>
</ul>
<p>每次插入的新的结点都是二叉排序树上新的叶子结点，在进行插入操作时，不必移动其它结点，只需改动某个结点的指针，由空变为非空即可。</p>
<ul>
<li>查找</li>
</ul>
<p>根据查找值的大小与当前子树的根节点相比，更小就找左边，更大就找右边，知道找到目标或者返回无结果。</p>
<ul>
<li>子树中的最大/最小值</li>
</ul>
<p>从根开始走到最左边是最小，走到最右边是最大。</p>
<ul>
<li>前驱或后继</li>
</ul>
<p>查找比当前点小的最大值（前驱）或比当前点更大的最小值（后继）。考虑左子树的最大值和右子树的最小值，若没有左右子树则考虑父节点。</p>
<ul>
<li>删除</li>
</ul>
<p>删除的第一步是要先找到该节点，然后在子树中找个前驱或者后继来替换掉该结点即可。</p>
<p>搜索，插入，删除的复杂度等于树高，因此一般的操作都是O(logn)的。</p>
<p>思想其实很简单，具体的实现就不贴代码了，因为确实也比较简单。</p>
<h2 id="普通的二叉搜索树存在的问题">普通的二叉搜索树存在的问题</h2><hr>
<blockquote>
<p><strong>！！！树高并不稳定！！！</strong><br>或者说，<strong>不平衡</strong></p>
</blockquote>
<p>考虑一组本来就有序的数列，将其插入二叉搜索树，结果就是二叉树会退化成一条链，所有结点只有右子树，左子树是空的。</p>
<p>因而预期的O(logn)的操作会退化成O(n)，数据稍大点这种结构就悲剧了。</p>
<p>为了解决这个问题，机智的人类想出了改进方案：</p>
<h1 id="平衡树">平衡树</h1><hr>
<p>平衡树是在二叉查找树的基础上，增加维护操作，使得二叉查找树保持左右子树<strong>平衡</strong>，以最大限度地保证整体的效率。这种结构就叫做<strong>平衡树</strong>。</p>
<p>当然，维护也是需要消耗时间的，一般来说维护消耗的时间越长，树越平衡。具体的还要看实际情况。</p>
<p>一般常见的平衡树有不少种：红黑树、AVL树、SBT、Treap、Splay等等。</p>
<p>它们的基本思想都是通过结点的左右旋来保持原本二叉搜索树的性质不变，然后高效完成。区别就是保持平衡的方式不同。</p>
<p>比如红黑树是把结点分成红黑两种，然后各种旋转稳定，貌似效率相当高，然而实现比较麻烦。</p>
<p>Treap是用优先级的思想，在树上加上堆($Treap=Tree+Heap$)。</p>
<p>相比起来Splay比较特殊，Splay其实并不是一棵严格意义上的平衡树，因为它的操作并不是主要为了保证左右平衡的，它的特点主要是结构比较灵活，可以用来处理一些正常平衡树完成不了的问题，缺点就是<strong>常数大</strong>，效率可能不高。嗯，这是后话。</p>
<p>今天的重点是这个：</p>
<h1 id="SBT">SBT</h1><hr>
<p>节点大小平衡树(Size Balanced Tree)是一种自平衡二叉查找树。</p>
<p>它是由中国广东中山纪念中学的<strong><a href="http://baike.baidu.com/link?url=IMXNAlg4eSURJj4WnvexBcdQkQzxLN0M9NpkZWjiNq-Kg6uT5dxXOjmso69yfdyExqG9gGD4RthT7Nz7n5Oy5K" target="_blank" rel="external">陈启峰</a></strong>（也是个神人，本来那年拿到了北美地区的ACM冠军，结果封神之路上遇到了Watashi）发明的。陈启峰于2006年底完成论文《<a href="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-Qifeng-Chen《Size Balanced Tree》.pdf" target="_blank" rel="external">Size Balanced Tree</a>》，并在2007年的全国青少年信息学奥林匹克竞赛冬令营中发表。</p>
<p>相比红黑树、AVL树等自平衡二叉查找树，SBT更易于实现。据陈启峰在论文中称，SBT是“目前为止速度最快的高级二叉搜索树”。</p>
<h2 id="旋转">旋转</h2><p>首先是所有平衡树中都会用到的旋转操作，平衡树需要不断改变树的结构，但是改变结构的同时又必须保证的是整棵树的二叉查找树性质<strong>不能被破坏掉</strong>（要是二叉查找树性质都没了，下面就不用玩了）。</p>
<p>调整方式就是逐点进行左旋或者右旋：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-1.png" alt="rotate"></p>
<p>以上图作为例子，左右旋实现起来其实也很简单，就是交换一下x、y的父子关系，然后调整B子树的连接情况，且能够保证整体的二叉搜素性质不改变。</p>
<h2 id="SBT的特殊性质">SBT的特殊性质</h2><p>我们给二叉搜索树的结点增加一个size域，用来保存以该节点为根的子树中一共有多少个结点。</p>
<p>上面说了，SBT是通过结点大小(Size)来调整整棵树的平衡性的，它相比一般的二叉搜索树多出来的性质有两条：</p>
<p>对于SBT中的每一个结点t，有：</p>
<ol>
<li><p>$size[right[t]]&gt;=size[left[left[t]]],size[right[left[t]]]$</p>
</li>
<li><p>$size[left[t]]&gt;=size[left[right[t]]],size[right[right[t]]]$</p>
</li>
</ol>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-2.png" alt="maintain"></p>
<p>以上图为例，性质是：</p>
<ol>
<li>$size[R]&gt;=size[A]$</li>
<li>$size[R]&gt;=size[B]$</li>
<li>$size[L]&gt;=size[C]$</li>
<li>$size[L]&gt;=size[D]$</li>
</ol>
<h2 id="如何维护这种性质？Maintain(&amp;_t)">如何维护这种性质？Maintain(&amp; t)</h2><p><strong>为了便于说明，以下部分左右旋与Maintain函数的参数传递均为实参</strong></p>
<p>我们从上图开始，把整棵树的结构分成几种情况来看：</p>
<h3 id="Case_1：size[left[left[t]]]&gt;size[right[t]]">Case 1：size[left[left[t]]]&gt;size[right[t]]</h3><ul>
<li>首先对t进行右旋，此时t更新成了原图中的L</li>
</ul>
<p>得到如下的结果：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-3.png" alt="3"></p>
<ul>
<li><p>则对于图中的T，其子树不一定满足性质，需要Maintain(T)</p>
</li>
<li><p>当T调整完之后，T的子树与L可能也不一定满足性质，需要再次Maintain(L)</p>
</li>
</ul>
<p>该过程的伪代码为：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If size[<span class="attribute">left</span>[<span class="attribute">left</span>[t]]]&gt;size[<span class="attribute">right</span>[t]] then</span><br><span class="line">	<span class="function"><span class="title">Right-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(right[t])</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(t)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Case_2:_size[right[left[t]]]&gt;size[right[t]]">Case 2: size[right[left[t]]]&gt;size[right[t]]</h3><p>这种情况要稍微复杂一些：</p>
<p>我们把原图中的B再往下画一层：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-4.png" alt="4"></p>
<ul>
<li>首先对L进行左旋</li>
</ul>
<p>得到：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-5.png" alt="5"></p>
<ul>
<li>再右旋T</li>
</ul>
<p>得到：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-6.png" alt="6"></p>
<ul>
<li><p>经过上面两步操作之后，整棵树的结构可以说是完全改变了，具体形态也可能变得难以预测。但是根据左右旋的性质，我们可以保证上图的结果中A、E、F、R都是性质完好的SBT，所以只要分别Maintain(L)和Maintain(T)即可。</p>
</li>
<li><p>经过上面那一步，我们能保证L和T以及其子树都是性质完好了，但是它们之间的任然不能确保，所以需要再Maintain(B)一次</p>
</li>
</ul>
<p>该过程的伪代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If s[<span class="attribute">right</span>[<span class="attribute">left</span>[t]]&gt;s[<span class="attribute">right</span>[t]] then</span><br><span class="line">	<span class="function"><span class="title">Left-Rotate</span><span class="params">(left[t])</span></span></span><br><span class="line">	<span class="function"><span class="title">Right-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(left[t])</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(right[t])</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(t)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Case_3:_size[right[right[t]]]&gt;size[left[t]]">Case 3: size[right[right[t]]]&gt;size[left[t]]</h3><p>情况与第一种类似，刚好相反</p>
<h3 id="Case_4:_size[left[right[t]]]&gt;size[left[t]]">Case 4: size[left[right[t]]]&gt;size[left[t]]</h3><p>情况与第二种类似，刚好相反</p>
<h3 id="总结">总结</h3><p>按照上述说明，Maintain函数就是四个if语句分开即可，但是中间可能会有一些不必要的操作，故作者在<a href="(http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-Qifeng-Chen《Size Balanced Tree》.pdf">论文</a>)中也对其进行了改进。</p>
<p>可以发现1、2与3、4的判断是可以分开的，于是可以添加一个标记参数，已确定接下来的Maintain中需要检查哪一边</p>
<p>改进之后的伪代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Maintain (t,flag)</span><br><span class="line">	If flag=false then</span><br><span class="line">		If size[<span class="attribute">left</span>[<span class="attribute">left</span>[t]]]&gt;size[<span class="attribute">right</span>[t]] then</span><br><span class="line">			<span class="function"><span class="title">Right-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">		Elseif size[<span class="attribute">right</span>[<span class="attribute">left</span>[t]]&gt;size[<span class="attribute">right</span>[t]] then</span><br><span class="line">			<span class="function"><span class="title">Left-Rotate</span><span class="params">(left[t])</span></span></span><br><span class="line">			<span class="function"><span class="title">Right-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">		Else exit</span><br><span class="line">	Elseif size[<span class="attribute">right</span>[<span class="attribute">right</span>[t]]]&gt;size[<span class="attribute">left</span>[t]] then</span><br><span class="line">    	<span class="function"><span class="title">Left-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">	Elseif size[<span class="attribute">left</span>[<span class="attribute">right</span>[t]]]&gt;size[<span class="attribute">left</span>[t]] then</span><br><span class="line">		<span class="function"><span class="title">Right-Rotate</span><span class="params">(right[t])</span></span></span><br><span class="line">		<span class="function"><span class="title">Left-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">    Else exit</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">Maintain</span><span class="params">(left[t],false)</span></span></span><br><span class="line">    <span class="function"><span class="title">Maintain</span><span class="params">(right[t],true)</span></span></span><br><span class="line">    <span class="function"><span class="title">Maintain</span><span class="params">(t,false)</span></span></span><br><span class="line">    <span class="function"><span class="title">Maintain</span><span class="params">(t,true)</span></span></span><br></pre></td></tr></table></figure>
<h2 id="愉快地使用SBT">愉快地使用SBT</h2><p>SBT的核心操作是Maintain，经过上面这么多内容，我想你已经掌握了。</p>
<p>SBT支持所有普通二叉查找树的操作（显而易见），而有了Maintain，之后所有的操作都是在普通的二叉查找树的基础上加以改进即可，可以衍生出更多有用的操作。</p>
<ul>
<li>插入</li>
</ul>
<p>正常的二叉查找树插入操作，插入完之后Maintain维护性质</p>
<ul>
<li>删除</li>
</ul>
<p>直接使用正常的二叉查找树删除操作即可。</p>
<blockquote>
<p>你说SBT性质可能会被破坏？</p>
</blockquote>
<p>嗯，是的。确实可能会出现这种情况，然而平衡树的操作是为了是的树的平均深度的平衡性。对于删除来说，删除一个结点并不会增加树的深度，所以在这里不用Maintain对整体并不会有什么影响，下次其他操作的Maintain就可以修复这个问题了。</p>
<ul>
<li>查找</li>
</ul>
<p>与正常的二叉查找树相同</p>
<ul>
<li>查找第k大</li>
</ul>
<p>由于每个结点的Size域，我们可以快速找出整个数列中第k大的数。根结点是第size[左子树]+1小的数，所以从根结点出发，按照大小关系不断遍历左右子树即可。</p>
<p>复杂度也是O(logn)的。</p>
<h2 id="最终代码示例">最终代码示例</h2><p>这份模板是我自己改过好多遍的，当初学这个的时候特别痛苦。网站找的别人的模板要不就有问题，要不就写得让人觉得很难受。然后找到的几个人的模板还都不一样，参考都累。</p>
<p>最后自己在纸上推左右旋推了很久才定下来，后来做题的时候又改进过好多遍。</p>
<p>推荐大家多画图。。。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID	: Chen Fan</span><br><span class="line">LANG	: G++</span><br><span class="line">PROG	: Size Balanced Tree</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sons[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> size[MAXN],data[MAXN];</span><br><span class="line"><span class="keyword">int</span> sbt=<span class="number">0</span>,sbttail=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;t,<span class="keyword">int</span> w)</span> <span class="comment">//rotate(&amp;node,0/1)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k=sons[t][<span class="number">1</span>-w];</span><br><span class="line">	<span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">	sons[t][<span class="number">1</span>-w]=sons[k][w];</span><br><span class="line">	sons[k][w]=t;</span><br><span class="line">	size[k]=size[t];</span><br><span class="line">	size[t]=size[sons[t][<span class="number">0</span>]]+size[sons[t][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">	t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span> <span class="comment">//maintain(&amp;node,flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span> (!flag)</span><br><span class="line">		<span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">1</span>]]) rotate(t,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">1</span>]]) </span><br><span class="line">		&#123;</span><br><span class="line">			rotate(sons[t][<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">			rotate(t,<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">0</span>]]) rotate(t,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">0</span>]])</span><br><span class="line">		&#123;</span><br><span class="line">			rotate(sons[t][<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">			rotate(t,<span class="number">0</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">	</span><br><span class="line">	maintain(sons[t][<span class="number">0</span>],<span class="keyword">false</span>);</span><br><span class="line">	maintain(sons[t][<span class="number">1</span>],<span class="keyword">true</span>);</span><br><span class="line">	maintain(t,<span class="keyword">false</span>);</span><br><span class="line">	maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v,<span class="keyword">int</span> pos)</span> <span class="comment">//insert(&amp;root,value,pos/0)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!size[t])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!pos)</span><br><span class="line">		&#123;</span><br><span class="line">			sbttail++;</span><br><span class="line">			pos=sbttail;</span><br><span class="line">		&#125;</span><br><span class="line">		data[pos]=v;</span><br><span class="line">		size[pos]=<span class="number">1</span>;</span><br><span class="line">		sons[pos][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		sons[pos][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		t=pos;</span><br><span class="line">	&#125; <span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		size[t]++;</span><br><span class="line">		<span class="keyword">if</span> (v&lt;data[t]) insert(sons[t][<span class="number">0</span>],v,pos);</span><br><span class="line">		<span class="keyword">else</span> insert(sons[t][<span class="number">1</span>],v,pos);</span><br><span class="line">		maintain(t,v&gt;=data[t]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last; <span class="comment">//last node</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span> <span class="comment">//value=del(&amp;root,key)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	size[t]--;</span><br><span class="line">	<span class="keyword">if</span> (v==data[t]||(v&lt;data[t]&amp;&amp;sons[t][<span class="number">0</span>]==<span class="number">0</span>)||(v&gt;data[t]&amp;&amp;sons[t][<span class="number">1</span>]==<span class="number">0</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ret=data[t];</span><br><span class="line">		<span class="keyword">if</span> (sons[t][<span class="number">0</span>]==<span class="number">0</span>||sons[t][<span class="number">1</span>]==<span class="number">0</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			last=t;</span><br><span class="line">			t=sons[t][<span class="number">1</span>]+sons[t][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> data[t]=del(sons[t][<span class="number">0</span>],data[t]+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125; <span class="keyword">else</span></span><br><span class="line">	<span class="keyword">if</span> (v&lt;data[t]) <span class="keyword">return</span> del(sons[t][<span class="number">0</span>],v);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> del(sons[t][<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delk</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> k)</span> <span class="comment">//value=del(&amp;root,k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	size[t]--;</span><br><span class="line">	<span class="keyword">if</span> (size[sons[t][<span class="number">0</span>]]+<span class="number">1</span>==k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ret=data[t];</span><br><span class="line">		<span class="keyword">if</span> (sons[t][<span class="number">0</span>]==<span class="number">0</span>||sons[t][<span class="number">1</span>]==<span class="number">0</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			last=t;</span><br><span class="line">			t=sons[t][<span class="number">1</span>]+sons[t][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> data[t]=delk(sons[t][<span class="number">0</span>],data[t]+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125; <span class="keyword">else</span></span><br><span class="line">	<span class="keyword">if</span> (k&lt;=size[sons[t][<span class="number">0</span>]]) <span class="keyword">return</span> delk(sons[t][<span class="number">0</span>],k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> delk(sons[t][<span class="number">1</span>],k-<span class="number">1</span>-size[sons[t][<span class="number">0</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span> <span class="comment">//node=select(root,k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (k==size[sons[t][<span class="number">0</span>]]+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">	<span class="keyword">if</span> (k&lt;=size[sons[t][<span class="number">0</span>]]) <span class="keyword">return</span> select(sons[t][<span class="number">0</span>],k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> select(sons[t][<span class="number">1</span>],k-<span class="number">1</span>-size[sons[t][<span class="number">0</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> x)</span> <span class="comment">//node=search(root,x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (t==<span class="number">0</span>||x==data[t]) <span class="keyword">return</span> t;</span><br><span class="line">	<span class="keyword">if</span> (x&lt;data[t]) <span class="keyword">return</span> search(sons[t][<span class="number">0</span>],x);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> search(sons[t][<span class="number">1</span>],x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deb_out</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"sbttail=%d sbt=%d\n"</span>,sbttail,sbt);</span><br><span class="line">	<span class="keyword">for</span>	(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sbttail;i++)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%2d: key=%2d size=%2d left=%2d right=%2d\n"</span>,i,data[i],size[i],sons[i][<span class="number">0</span>],sons[i][<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	sbttail=<span class="number">0</span>;</span><br><span class="line">	sbt=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>	(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++) insert(sbt,i,<span class="number">0</span>);</span><br><span class="line">	deb_out();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//printf("%d\n",del(sbt,8));</span></span><br><span class="line">	insert(sbt,<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">	deb_out();</span><br><span class="line">	del(sbt,<span class="number">8</span>);</span><br><span class="line">	del(sbt,<span class="number">8</span>);</span><br><span class="line">	<span class="comment">//printf("%d\n",search(sbt,8));</span></span><br><span class="line">	deb_out();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后话">后话</h2><p>SBT可以用来快速维护一组数的插入、查找、删除、找第k大，然而你会发现只是想要单纯地实现这个功能，C++ STL 中的set就可以做到。哦对了，set不能找第k大……</p>
<blockquote>
<p>事实上set里面就是用<strong>红黑树</strong>来进行维护的。。。<br>然而我并不会红黑树。。。<br>然而你们也并不需要会红黑树。。。<br>因为直接用set就好了啊。。。-_-///<br>不用set那么用SBT嘛，这种东西学一个就差不多了</p>
</blockquote>
<p>所以虽然SBT效率高，但是扩展性似乎并没有特别强，一般需要用到的也就是只有动态多次求第k的时候。</p>
<p>真正想要见识一下神器的，请在未来好好研究学习Treap和Splay吧，这两个在应用的时候比SBT的用途广很多。</p>
<p>如需要模板题练手，请点击页面下方的标签查看详情。</p>
<p>当然模板可以参考，不过还是不要复制粘贴代码了，最好能自己写一遍。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>这将会是你踏入高级数据结构的第一步。<br></blockquote>

<p>终于要开始给队里面讲这种比较高级的数据结构了，也趁此机会自己好好理理。</p>
<p>首先要讲的是这个：</p>
<h1 id="二叉搜索树">二叉搜索树</h1><hr>
<p>二叉搜索树又叫二叉排序树，它的定义很简单：</p>
<ol>
<li><p>这是一棵二叉树</p>
</li>
<li><p>令x为二叉树中某个结点上表示的值，那么其左子树上所有结点的值都要不大于x，其右子树上所有结点的值都要不小于x</p>
</li>
</ol>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_算法学习" scheme="http://jcf94.github.io/categories/ACM-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[专业知识整理]]></title>
    <link href="http://jcf94.github.io/2015/06/19/2015-06-19-zhuanye/"/>
    <id>http://jcf94.github.io/2015/06/19/2015-06-19-zhuanye/</id>
    <published>2015-06-19T02:15:23.000Z</published>
    <updated>2015-06-27T07:40:27.499Z</updated>
    <content type="html"><![CDATA[<p>昨天刚开了大三大四的专业班会，本来是几个大四的讲解保研、考研、工作经验的，最后系主任吴老大站起来总结陈词。。。</p>
<blockquote>
<p>不愧是吴老大啊！一下就抓住了问题的关键，连着又把我们教育了一通。。。</p>
</blockquote>
<p>起因是：保研的学姐说她面试的时候被人老师问到个整流电路，答不上来，问到个采样定理，答不上来。找工作的学长说他面试的时候被人总监让写个C语言程序，写不出来。</p>
<p>然后吴老大果断抓住重点，开始批评教育！！！</p>
<blockquote>
<p>隐忧啊什么的<br><strong>要重基础！要重基础！要重基础！</strong>重要的事情要说好多遍！</p>
</blockquote>
<p>好吧，好像确实很有道理的样子。正好接下来也要准备夏令营面试。打算慢慢开始重新整理下大一到现在学过的专业课。</p>
<p>先占个坑。</p>
<a id="more"></a>
<p>嗯！首先理下之前学过的课,</p>
<h1 id="前三年学过的课程">前三年学过的课程</h1><hr>
<p>2012-2013学年<br>秋<br><del>[24050010]计算机应用基础</del><br><del>[12070060]机械制图</del><br><del>[14030010]体育（1）</del><br><del>[64050010]军事理论</del><br><del>[11070010]思想道德修养与法律基础</del><br><del>[13030011]大学英语（1）</del><br>[12031011]高等数学(1)<br><del>[24040010]通信技术导论</del><br><del>[2404001S]入学教育与毕业教育</del><br><del>[6405001S]军训</del><br>春<br><del>[12040011]大学物理（1）</del><br><del>[14030020]体育（2）</del><br><del>[11160010]中国近现代史纲要</del><br><del>[13030012]大学英语（2）</del><br>[12031012]高等数学(2)<br>[24050030]C语言程序设计<br><del>[33<strong>**</strong>]公共艺术类课</del><br>[24040020]数据库原理及应用<br><del>[24040030]计算机软件技术基础</del></p>
<p>2013-2014学年<br>秋<br><del>[11050010]马克思主义基本原理概论</del><br><del>[13030013]大学英语（3）</del><br>[12031030]线性代数<br><del>[12040012]大学物理（2）</del><br><del>[14030030]体育（3）</del><br>[12031110]复变函数与积分变换<br><del>[12040110]物理实验</del><br><del>[11080440]文献检索</del><br>[32051010]电路分析基础<br>[24040040]电磁场与电磁波<br>[24040050]信号与系统<br><del>[2404031S]公益劳动</del><br>春<br><del>[11060010]毛泽东思想和中国特色社会主义理论体系概论</del><br><del>[13030014]大学英语（4）</del><br>[12031040]概率论与数理统计<br><del>[14030040]体育（4）</del><br>[32053010]模拟电子技术基础<br>[24040060]数字信号处理<br>[24040070]自动控制概论<br>[24040080]传感器基础<br><del>[11<strong>**</strong>]思想政治理论课实践</del><br><del>[2404006S]数字信号处理课程设计</del></p>
<p>2014-2015学年<br>秋<br>[24040090]微机原理与接口技术<br>[24040100]高频电子线路<br>[24040110]通信系统原理<br>[32054010]数字电子技术基础<br>[24040130]信息论与编码技术<br><del>[24040120]专业英语</del><br>[24040150]数字图像处理<br><del>[2404009S]微机原理与接口技术课程设计</del><br><del>[3205702S]电子技术基础课程设计</del><br><del>[2404010S]高频电子线路课程设计</del><br>春<br>[24040160]数字光纤通信<br>[24040170]微波技术与天线<br>[24040180]现代交换技术<br>[24040190]移动通信<br>[24040230]数据通信与计算机网络<br>[24040210]单片机原理<br>[24040220]VHDL语言与数字EDA设计<br>[24040200]数字视频技术<br><del>[2404032S]电装实习</del><br><del>[2404022S]EDA课程设计</del></p>
<hr>
<h1 id="数学相关">数学相关</h1><h2 id="高等数学">高等数学</h2><h2 id="线性代数">线性代数</h2><h2 id="复变函数与积分变换">复变函数与积分变换</h2><h2 id="概率论与数理统计">概率论与数理统计</h2><hr>
<h1 id="专业课">专业课</h1><hr>
<h2 id="电学/无线电">电学/无线电</h2><h3 id="电路分析基础">电路分析基础</h3><h3 id="模拟电子技术基础">模拟电子技术基础</h3><h3 id="数字电子技术基础">数字电子技术基础</h3><h3 id="高频电子线路">高频电子线路</h3><h3 id="电磁场与电磁波">电磁场与电磁波</h3><h3 id="微波技术与天线">微波技术与天线</h3><p>主要内容是研究由电磁场与电磁波衍生出来的无线电技术，微波、天线与电波传播</p>
<p>详见 <a href="/2015/06/27/2015-06-27-weibojishuyutianxian/">微波技术与天线 复习笔记</a></p>
<hr>
<h2 id="信号/通信">信号/通信</h2><h3 id="信号与系统">信号与系统</h3><h3 id="数字信号处理">数字信号处理</h3><h3 id="通信系统原理">通信系统原理</h3><h3 id="信息论与编码技术">信息论与编码技术</h3><h3 id="数字光纤通信">数字光纤通信</h3><h3 id="现代交换技术">现代交换技术</h3><h3 id="移动通信">移动通信</h3><hr>
<h2 id="计算机应用/硬件">计算机应用/硬件</h2><h3 id="C语言程序设计">C语言程序设计</h3><h3 id="数据库原理及应用">数据库原理及应用</h3><h3 id="微机原理与接口技术">微机原理与接口技术</h3><h3 id="数据通信与计算机网络">数据通信与计算机网络</h3><h3 id="单片机原理">单片机原理</h3><h3 id="VHDL语言与数字EDA设计">VHDL语言与数字EDA设计</h3><hr>
<h2 id="自动化">自动化</h2><h3 id="自动控制概论">自动控制概论</h3><h3 id="传感器基础">传感器基础</h3><hr>
<h2 id="图像处理">图像处理</h2><h3 id="数字图像处理">数字图像处理</h3><h3 id="数字视频技术">数字视频技术</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>昨天刚开了大三大四的专业班会，本来是几个大四的讲解保研、考研、工作经验的，最后系主任吴老大站起来总结陈词。。。</p>
<blockquote>
<p>不愧是吴老大啊！一下就抓住了问题的关键，连着又把我们教育了一通。。。</p>
</blockquote>
<p>起因是：保研的学姐说她面试的时候被人老师问到个整流电路，答不上来，问到个采样定理，答不上来。找工作的学长说他面试的时候被人总监让写个C语言程序，写不出来。</p>
<p>然后吴老大果断抓住重点，开始批评教育！！！</p>
<blockquote>
<p>隐忧啊什么的<br><strong>要重基础！要重基础！要重基础！</strong>重要的事情要说好多遍！</p>
</blockquote>
<p>好吧，好像确实很有道理的样子。正好接下来也要准备夏令营面试。打算慢慢开始重新整理下大一到现在学过的专业课。</p>
<p>先占个坑。</p>]]>
    
    </summary>
    
      <category term="复习笔记" scheme="http://jcf94.github.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="我的大学" scheme="http://jcf94.github.io/categories/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[退役帖 伪]]></title>
    <link href="http://jcf94.github.io/2015/06/13/2015-06-13-tuiyi/"/>
    <id>http://jcf94.github.io/2015/06/13/2015-06-13-tuiyi/</id>
    <published>2015-06-13T05:20:32.000Z</published>
    <updated>2015-06-19T07:41:34.153Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>曾经为之付出过这么多的努力，在这个圈子中也认识了这么多优秀的人<br>要我怎么说放手？<br></blockquote>

<p>之前最后一次外出参赛是今年的省赛，也就是上周的这个时候吧，还正坐在赛场上苦思冥想中。。。</p>
<p>丧气的话也不想说了，毕竟还是自己实力不够，心态不行，真正的高手就算被水题坑了，也还是能够坚持做出其他的题来。</p>
<p>这段时间忙的事很多，学校里面是考试、实验、课设，另一边还要自己准备材料投夏令营。原本想着这个自己做的博客也要好好写，好好弄，结果干完正事之后也就几乎不想再碰电脑了。</p>
<p>然后翻了下前面写的几篇，越看越觉得画风不太对。。。都是日常和随笔。。。莫名其妙地就从原本想搞的技术博变成个情感交流博了（捂脸）。。。嗯！有空一定把前面博客园的帖子移回来！嗯！有空一定！</p>
<p>也是想了好多事。</p>
<a id="more"></a>
<hr>
<h1 id="回忆篇：">回忆篇：</h1><p>说说我回忆中的历程吧。</p>
<h2 id="OI是个起点">OI是个起点</h2><p>要说我最早接触coding是在什么时候？</p>
<p>其实早到初中。</p>
<p>我已经忘了那年是怎么被老师看中的了。唯一记得的是那时还是初一，还是在三中北校区的时候，有天，漂亮的女电脑老师找到我和脑袋，交给我们一份Pascal的资料说问我们想不想学？于是历史的车轮开始转动。</p>
<p>现在想想小时候还真是全能搞。。。-_-///初中参加过作文比赛、数学竞赛、英语竞赛、物理竞赛、化学竞赛，然而当时也并不看重计算机的。只是记得就上过一学期的课，然后NOIP普及组的初赛并没有过。。。</p>
<p>后来我们之后三中就再也没有听说过老师有再带过其他人了。想来也是命运和偶然。</p>
<hr>
<p>后来考到了温中，跟脑袋一起考进了前四班，又遇到了在我人生中领路的又一个重要老师。军辉顶着当时学校其他老师都不怎么支持的压力，毅然拉出了一个WZOI团队！</p>
<p>机房里每人一台电脑，一本黄皮书，一个暑假。刷完书的留下来，这台电脑贴上标签以后归你用，刷不完的继续或者离开。然后军辉自己开车带我们去椒江打NOIP的初赛，自己开车带我们去绍兴打复赛。</p>
<p>三年的暑假都给了OI，其实我也从来没有后悔过。开始的初衷是感兴趣，也许拿了奖高考能加分。后来我们能出成绩那年，国家出政策说加分取消。我问自己还要不要学下去？</p>
<blockquote>
<p>要！这么好玩的事情，真的不想放手！</p>
</blockquote>
<p>然后高三即使到了最后，我也依然继续留在了机房。</p>
<p>前几天翻那年今日还翻出以前自己高二时候写的东西来：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-13-tuiyi-1.jpg" alt="gaosan"></p>
<hr>
<p>后来那年比的最后一次NOIP也就这样了，成绩并没有好到能进省队啊，NOI啊，保送啊。我仍然是个弱渣，小透明而已。</p>
<p>再后来高考没有考好。出成绩的时候就已经蒙了。</p>
<p>我爸妈说后面的事情你自己选择吧，如果想复读一年，大不了再接送你上学一年</p>
<hr>
<p>最终我还是没勇气打电话给之前联系好的复读班，第二天爸妈找了个路桥那边专业帮人填志愿的老师，我翘掉了这天本来要去参加的初中同学会。</p>
<p>那时候我提的唯一两个要求</p>
<blockquote>
<p>211<br>通信工程</p>
</blockquote>
<p>最后出录取结果的那天，前三个志愿都差几分，第四个——<strong>长安大学</strong>，上了。</p>
<p>什么鬼？从来没听过这个学校的名字好么。。。</p>
<p>然而我来了。</p>
<hr>
<h2 id="ACM不是终点">ACM不是终点</h2><p>大学是个新开始，我极尽锋芒地展现着我的一切。</p>
<p>顺利地选上军训负责人，当上班长，加入我想去的学生组织，带领班级开始在学院的各种我能做到的比赛中争冠，选上下一级的班导员，作为成功学长给下几级新生讲解经验，建立社团……</p>
<p>我敢说我们专业是我们学院中我们这级，乃至我们往后这么多级中表现最为出色的！</p>
<blockquote>
<p>话说我越想越觉得我在这里和在家里就是两个完全不同的人。。。-_-///大概在家习惯了小透明，习惯了在所有人眼中我都是可以忽略的那一个。可是在这里，有太多我需要承担的事情了，上面是老师，下面是我的班，我的社团，都是我的人。<br>然后自己下意识地就把两个世界分开了。我从来没想过要介绍大学同学给高中同学认识，也从来不想跟大学的同学讲太多我以前的事情。<br>就像是踏上火车的那一瞬间，一个我沉睡，另一个我就切换过来了。只有在电话里和网络的另一头，才维持着另外一种联系。<br><strong>说双子座双重人格神马的都可以哪凉快哪呆着去啦。。。哥才没有精神分裂！！</strong></p>
</blockquote>
<p>很难描述当我第一次听说长大也有一群人在搞ACM时的心情。那就像是，竟然都会有他乡遇故知的感觉。</p>
<p>后来我见到了在我这条路上给予我们最大支持的老师，也知道了长大的ACM现状其实并不好。然而对我来说，这样一个平台让我觉得我的未来还能够继续坚持我所喜欢的，还能继续为我曾经的梦想奋斗！</p>
<p>荆老师也很高兴能够有一个有着很多基础的新生加入，那时候也是对我寄予厚望吧。。。只可惜最后在我手上还是没能够实现长大ACM的辉煌。</p>
<h3 id="我的第一队">我的第一队</h3><p>大一一来马上就被荆老师加入了当时长大ACM的一队。我的队友是高我两级的PSW，和高我一级的LQ。</p>
<p>PSW是长大之前实力最强的ACM选手了，我们一起去过南京邀请赛、西安省赛、成都现场赛。可惜最后他要毕业离开的时候，还是只能遗憾地希望我能够撑起未来振兴长大的重担。</p>
<p>还能说什么呢？只能怪那时候的自己没有觉悟，要忙班里的事，要忙学生组织的事，总想着未来还有时间，没有能再多抓紧时间训练了。</p>
<p>我后来想了下，我的一整个大一乃至大二，编程实力都没有过太大的进步，除了Pascal转C之外，几乎都只是在吃高中留下来的那点老本。</p>
<blockquote>
<p>现实总是这么讽刺，没有经历的时候很难自己觉悟，等到自己觉得晚了的时候，那就真的已经晚了。</p>
</blockquote>
<h3 id="第二队">第二队</h3><p>PSW毕业去了复旦，然后是<a href="http://bigballon.github.io/" target="_blank" rel="external">LW</a>转到我们队开始一起努力。</p>
<p>LW也是从大一开始就跟我关系最好的几个之一了。</p>
<p>我们一起加的科协，一起在组织里学习奋斗，一起在学院的比赛中为自己的班级相互拼。</p>
<p>这年我们第一次开始尝试运营我们自己的OJ站。遗憾最后IP还是被学校回收了。</p>
<p>这年情况也没有怎么好转，打过西安邀请赛、北京邀请赛。还是一次一次让荆老师失望。</p>
<h3 id="Xorzip!!">Xorzip!!</h3><p>真正让我们觉得长大ACM事业出现转机的还是在大二最后的时候。</p>
<p>我和LW一起遇到了<a href="http://www.cnblogs.com/AOQNRMGYXLMV/" target="_blank" rel="external">SYH</a>。（<a href="http://www.jianshu.com/p/7feeac080171" target="_blank" rel="external">代码也可以这样有趣</a>）</p>
<p>他对于算法，对于ACM的狂热之于我们俩有过之而无不及，也是比我们两个还要努力。</p>
<p>只能说相见恨晚吧，如果再早一年遇到他，可能长大历史会更早一些被改写，因为这一年中，我们开创了长大史上太多个<strong>第一次</strong>。</p>
<ul>
<li>虽然那年的网络赛我们还是一样菜，我们<strong>第一次</strong>开始能够分析清楚比赛中出现的各种题目类型了！</li>
<li>长大的外出参赛队<strong>第一次</strong>有了<strong>正式的队名</strong>！从来以前派出去的队伍都只叫长大队，Xorzip也是我们历史上<strong>第一个独立队名</strong></li>
<li>以前从来参赛都是比完就走，我们<strong>第一次</strong>开始留下来详细听赛后题目解析，体会颁奖典礼中其他人的感受</li>
<li><strong>第一次</strong>开始真正融入ACM的圈子，<strong>第一次</strong>开始跟外校的其他高手们有了交流</li>
<li><strong>第一次</strong>建立了我们的<strong>ACM协会</strong>，长大ACM集训队<strong>第一次</strong>有了正式的组织</li>
<li><strong>第一次</strong>有了一套初步的训练体系，<strong>第一次</strong>从大一开始就带出了许多新人入门</li>
<li><strong>第一次</strong>举办规模盛大的赛事，邀请到这么多学校的高手们过来参加</li>
<li>……</li>
<li>……</li>
</ul>
<p>这一年我们见证了温岭中学WZOI团队中4位当时跟我一起努力奋斗的同学为他们的学校打进了Final。</p>
<p>见证了俄罗斯男神<a href="http://codeforces.com/profile/tourist/" target="_blank" rel="external">tourist</a>在Final中AC掉所有题目，破纪录封神！</p>
<p>见证了陕西省整体的ACM环境逐渐活跃起来，各校都开始奋起直追。</p>
<p>然而…</p>
<p>然而…</p>
<p>我还是没有做到。</p>
<hr>
<p>我从不后悔当初离开家乡当初来到这里，从不后悔走上这样一条路，只是恨自己没有实力。</p>
<p>赛场上最后几分钟时看着其他队伍纷纷出题，看着自己的排名一步一步往下滑，那种感觉刻骨铭心。</p>
<p>要说现在觉得遗憾的事情，很多：</p>
<ul>
<li>遗憾自己到最后都还是没有足够的实力把长大带向辉煌</li>
<li>遗憾自己这么多年还是辜负了荆老师、前辈的期望</li>
<li>遗憾当初不能醒悟过来，抓紧时间</li>
</ul>
<p>不过也很高兴这一路上认识了这么多优秀的人，认识了一起从零开始把A协拉起来的这么多小伙伴。</p>
<p>要感谢的人也太多太多。</p>
<p>然而…</p>
<p>然而…</p>
<p>我们马上就要大四了</p>
<hr>
<p>上周省赛回来的时候，同队的队友都比较沮丧。本来是抱着争金保银的目标去的，却因为出题方判题和数据的问题弄了个什么都没有。</p>
<p>这种心情真是难受至极。</p>
<p>LW说这应该是他最后一次比赛了。</p>
<hr>
<h1 id="未来篇：">未来篇：</h1><p>本来也想着，如果保研能够顺利，下学期还能再拼一把区域赛。</p>
<p>现实是，虽然总是被认识的人称为大神，然而我知道我并不是啊！</p>
<p>我剩余的大学时光都奉献给了ACM，却没有能够创造出太大的成就。而其他方面对于我来说却基本都是零。</p>
<p>之前已经有过被拒和落选的经历了，我也不能够确定剩下的三所学校的夏令营能不能顺利通过申请。</p>
<p>保研或是考研，区别只是先后而已，最终面对的竞争仍然还是那么激烈。</p>
<hr>
<p>也是很感谢爸妈从高中以来的支持，无论是我高三毅然坚持OI竞赛的选择，大学选专业，还是到了大学之后做的各种事情，他们都是说只要我觉得那些事情是正确的，他们就会支持我。</p>
<hr>
<p>今年暑假的大部分时间我应该还会待在学校里，可能会到8月初再回家一趟。</p>
<p>也是希望能将我所学的所有算法知识都教给现在长大ACM的队员们，今年暑假抓紧时间的话，应该还是能有很大进步的。</p>
<p>至少过了这个暑假之后，他们的实力要赶上、超越我们现在的水平！！</p>
<p><strong>我相信，长大ACM的未来是光明的！</strong></p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=26624725&auto=1&height=66"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>曾经为之付出过这么多的努力，在这个圈子中也认识了这么多优秀的人<br>要我怎么说放手？<br></blockquote>

<p>之前最后一次外出参赛是今年的省赛，也就是上周的这个时候吧，还正坐在赛场上苦思冥想中。。。</p>
<p>丧气的话也不想说了，毕竟还是自己实力不够，心态不行，真正的高手就算被水题坑了，也还是能够坚持做出其他的题来。</p>
<p>这段时间忙的事很多，学校里面是考试、实验、课设，另一边还要自己准备材料投夏令营。原本想着这个自己做的博客也要好好写，好好弄，结果干完正事之后也就几乎不想再碰电脑了。</p>
<p>然后翻了下前面写的几篇，越看越觉得画风不太对。。。都是日常和随笔。。。莫名其妙地就从原本想搞的技术博变成个情感交流博了（捂脸）。。。嗯！有空一定把前面博客园的帖子移回来！嗯！有空一定！</p>
<p>也是想了好多事。</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="ACM" scheme="http://jcf94.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[生日 记]]></title>
    <link href="http://jcf94.github.io/2015/06/02/2015-06-02-birthday/"/>
    <id>http://jcf94.github.io/2015/06/02/2015-06-02-birthday/</id>
    <published>2015-06-02T15:22:58.000Z</published>
    <updated>2015-06-13T08:27:27.148Z</updated>
    <content type="html"><![CDATA[<p>不知不觉已经到了第21个生日，真心不想承认，又老了一岁……</p>
<p>然后就想着，去年的今天我在干什么？</p>
<p>明年的今天我会在干什么？明年大概就是快到了大家都要离开的日子了吧，嗯，我想明年一定不会放过这个日子！</p>
<a id="more"></a>
<hr>
<p>最常用的两个应用的提醒倒是跟的很快~~</p>
<p>空间总是最早就跟上的。记得大学刚开始那段日子，每天刷空间总是会记得先看看最近好友的生日，后来看得越来越少了，再后来空间看得也越来越少了。</p>
<p>也是越长大，似乎想说的话就越少了/^.^/，也都是下意识地只想说给自己那一个小圈子里的人听。于是空间状态越发越少，朋友圈越发越少…</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-033.jpg" alt="qzone"></p>
<p>话说从用网易云音乐开始就觉得它推荐的歌单很准，每次打开都能找到自己想听的歌。</p>
<p>换了不少音乐站，最后一直在用的也就是网易云和QQ啦。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-034.jpg" alt="wangyiyun"></p>
<hr>
<p>然后今年的生日没有告诉过别人，想着本来也就不是太看重这个日子啦。然后这几天事情各种多，考试、报告的deadline、然后是各种不算太好的消息、包括对未来的迷茫。原本想好的好好读个研究生的想法也因为突然的各种现实而动摇了，唉…不想说了</p>
<p>只是觉得心里挺空的，之前在忙着考试忙着赶报告的时候可以什么都不想。一旦考完了，放松下来之后，好多问题就自己冒出来到脑子里啦。总是想得都太远，也不知道这样是好事还是坏事。</p>
<p>嗯！生日嘛，本该就该是个高兴的日子啦，还有几个人能够记着，那就够了。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-031.jpg" alt="w1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-032.jpg" alt="w2"></p>
<hr>
<p>最后是刚到的这两本书。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-035.jpg" alt="book"></p>
<p>虽说还要纠结下半年究竟该做何选择，然而我总认为我所要坚持的大方向还是这块自己感兴趣的东西，那就继续学咯~不管以后的日子会怎么样，不辜负自己的心意就好了。</p>
<p>愿你们的每一天都过得愉快。</p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=368800&auto=1&height=66"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<p>不知不觉已经到了第21个生日，真心不想承认，又老了一岁……</p>
<p>然后就想着，去年的今天我在干什么？</p>
<p>明年的今天我会在干什么？明年大概就是快到了大家都要离开的日子了吧，嗯，我想明年一定不会放过这个日子！</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数字视频图像处理 复习笔记]]></title>
    <link href="http://jcf94.github.io/2015/05/30/2015-05-30-shuzishipin/"/>
    <id>http://jcf94.github.io/2015/05/30/2015-05-30-shuzishipin/</id>
    <published>2015-05-30T13:42:29.000Z</published>
    <updated>2015-06-28T04:40:50.466Z</updated>
    <content type="html"><![CDATA[<h2 id="第一章_绪论">第一章 绪论</h2><h3 id="视频图像处理的概念">视频图像处理的概念</h3><p>视频是一组图像在<strong>时间轴</strong>上的<strong>有序排列</strong>，是二维图像在一维时间轴上构成的<strong>图像序列</strong>，又称<strong>动态图像、活动图像、运动图像</strong>。不止包含了静止图像的内容，还包含了目标的<strong>运动信息</strong>和<strong>客观世界随时间变化的信息</strong>。</p>
<p>序列&gt;帧&gt;像素</p>
<h3 id="视频图像处理系统的组成">视频图像处理系统的组成</h3><ol>
<li>图像<strong>采集</strong></li>
<li>图像<strong>显示</strong></li>
<li>图像<strong>存储</strong></li>
<li>图像<strong>通信</strong></li>
<li>图像<strong>处理和分析</strong></li>
</ol>
<a id="more"></a>
<p>图像处理和分析：</p>
<ol>
<li>图像变换</li>
<li>图像编码压缩</li>
<li>图像增强复原</li>
<li>图像分割</li>
<li>图像理解和识别</li>
</ol>
<hr>
<h2 id="第二章_视频图象的表示">第二章 视频图象的表示</h2><h3 id="图像的基本概念">图像的基本概念</h3><ol>
<li>光通量：光源辐射出来的光功率，单位流明（lm）</li>
<li>照度：单位面积上的光通量，单位勒克斯（lx，$1ls=1lm/m^2$）</li>
<li>亮度：观察者感觉光的量度，有主观性，又称辉度</li>
<li>视敏度：人眼对不同波长可见光的敏感程度</li>
<li>亮度适应级：一定条件下，人眼的亮度适应区间</li>
</ol>
<h3 id="分辨率">分辨率</h3><ol>
<li>图像分辨率<br>图像中存储的信息，单位像素/英寸（pixel per inch, ppi）</li>
<li>显示分辨率<br>构成画面像素点的多少，用宽高像素*像素表示</li>
<li>打印分辨率<br>又叫输出分辨率，决定打印机打印的惊喜程度，单位点/英寸（dot per inch, dpi）</li>
</ol>
<h3 id="人眼的视觉特性">人眼的视觉特性</h3><table>
<thead>
<tr>
<th></th>
<th>锥状细胞</th>
<th>柱状细胞</th>
</tr>
</thead>
<tbody>
<tr>
<td>结构</td>
<td>一个细胞连一个神经末梢</td>
<td>几个细胞连一个神经末梢</td>
</tr>
<tr>
<td>功能</td>
<td>感光/感色，区分细节</td>
<td>感光，提供整体形象</td>
</tr>
<tr>
<td>作用时间</td>
<td>强光下、白天</td>
<td>弱光下、黑夜</td>
</tr>
<tr>
<td>视觉</td>
<td>亮视觉</td>
<td>暗视觉</td>
</tr>
</tbody>
</table>
<p>锥状细胞分为<strong>红敏、绿敏、蓝敏</strong>。</p>
<p>三基色原理。</p>
<p>影响人眼分辨力的因素：<strong>环境照度、景物相对对比度、被观察物体的距离和运动状态</strong></p>
<ol>
<li>人眼对亮度响应有<strong>非线性特性，对灰度误差不敏感</strong></li>
<li>人眼对<strong>亮度</strong>信号的空间分辨率大于对色度信号的空间分辨率</li>
<li>人眼容易感觉到<strong>边缘位置</strong>的变化，而对于边缘部分的灰度误差不敏感</li>
<li>时间域的<strong>掩蔽效应</strong>，当视频图像序列中相邻画面的变化剧烈（如场景切换）时，人眼的分辨率会突然剧烈的下降</li>
<li><strong>视觉惰性</strong>，人眼的亮度感觉总是滞后于实际亮度，<strong>视觉暂留</strong></li>
<li><strong>闪烁感觉</strong>，周期性光脉冲频率高到一定程度后人眼无法区分</li>
</ol>
<h3 id="颜色模型">颜色模型</h3><table>
<thead>
<tr>
<th></th>
<th>RGB</th>
<th>HSI</th>
<th>YUV</th>
</tr>
</thead>
<tbody>
<tr>
<td>主要用于</td>
<td>计算机显示器</td>
<td>描述人眼的视觉特性</td>
<td>电视信号，彩色兼容黑白</td>
</tr>
<tr>
<td>说明</td>
<td>分别表示红绿蓝三色的分解采样量</td>
<td>色调H，饱和度S，密度I（对应亮度和灰度）</td>
<td>亮度Y，色度U、V</td>
</tr>
</tbody>
</table>
<p><strong>真彩色</strong>：每个像素值都用三基色分量描述</p>
<p><strong>伪彩色</strong>：每个像素颜色采用颜色查找表表现</p>
<p><strong>直接色</strong>：每个像素点的RGB值分别用查找表表现</p>
<h3 id="图像的数字化">图像的数字化</h3><p>视频图象数字化两种方法：</p>
<ol>
<li>复合编码：先数字化再分离<br>先用高速模/数转换器对模拟视频（彩色全电视信号）进行数字化，再在数字域中分离</li>
<li>分量编码：先分离再数字化<br>从模拟视频（彩色电视信号）中分离出彩色分量的亮度和色度，得到YUV或YIQ分量，再用3个模/数转换器对3个分量分别数字化</li>
</ol>
<p>采样方式：隔行采样</p>
<h3 id="图像量化">图像量化</h3><ol>
<li>有记忆量化和无记忆量化：取样点是否独立</li>
<li>均匀量化和非均匀量化：量化步长是否一致</li>
<li>标量量化和矢量量化：<br>标量量化：一维量化，所有取样使用同一个量化器进行量化，每个取样的量化都和其他所有取样无关(无记忆量化)，常用均方误差量化器<br>矢量量化：多维量化，先将K个取样值序列形成K维空间中的一个矢量,然后将此矢量进行量化</li>
</ol>
<p>非均匀量化：</p>
<ol>
<li>基于人的视觉特性特点，对于亮度值急剧变化的部分，粗量化；对亮度值变化比较平缓的部分，细量化。</li>
<li>计算所有可能的亮度值出现的概率分布，对于出现概率大的那些亮度值，细量化；对于出现概率小的那些亮度值，粗量化</li>
</ol>
<p>非均匀采样：在细节多区域采样密，在平滑区域采样少</p>
<p>空间分辨率：图像的大小，空间分辨率=最大行数*每行的最大像素数。</p>
<p>灰度分辨率：一个像素值单位幅度上包含的灰度级，用一个字节存储一个像素值，则灰度级数为256</p>
<h3 id="图像格式">图像格式</h3><table>
<thead>
<tr>
<th></th>
<th>矢量图形</th>
<th>位图图像</th>
</tr>
</thead>
<tbody>
<tr>
<td>定义</td>
<td>图形，指用一组绘图指令描述和记录的各种图形，包括直线、弧线、圆、矩形的大小形状等</td>
<td>图像，由一组计算机内存位组成，这些位定义了图像中每个像素点的亮度和颜色</td>
</tr>
<tr>
<td>文件内容</td>
<td>图形指令</td>
<td>图像点阵数据</td>
</tr>
<tr>
<td>生成</td>
<td>相应软件生成</td>
<td>用绘图软件生成；用彩色扫描仪扫描二维图片；用摄像机以及帧捕获设备获得数字化画面</td>
</tr>
<tr>
<td>所需磁盘空间</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>常用格式</td>
<td>WHF、DRW、CDR、DXF、EPS、FLI、FLC、CGM等</td>
<td>BMP、PCX、GIF、TIFF</td>
</tr>
</tbody>
</table>
<h2 id="第三章_图像变换">第三章 图像变换</h2><h3 id="傅里叶变换_FT">傅里叶变换 FT</h3><h3 id="离散傅里叶变换_DFT">离散傅里叶变换 DFT</h3><h3 id="快速傅里叶变换_FFT_(掌握)">快速傅里叶变换 FFT (<strong>掌握</strong>)</h3><h3 id="离散余弦变换_DCT">离散余弦变换 DCT</h3><h3 id="K-L变换">K-L变换</h3><p>均方误差（MSE）意义下的最佳变换。</p>
<h3 id="连续小波变换_CWT">连续小波变换 CWT</h3><p>小波变换：把一个信号分解为将基本小波经过缩放和平移之后的一系列小波</p>
<h3 id="小波变换">小波变换</h3><h2 id="第六章_视频图像分割">第六章 视频图像分割</h2><h3 id="视频图像分割的相关概念">视频图像分割的相关概念</h3><p>从语义信息分析，视频由大量<strong>场景</strong>组成的，每个场景由一个或多个<strong>镜头</strong>组成，镜头由一系列的<strong>帧</strong>组成的。</p>
<p>视频对象分割：把视频序列中（一个镜头）人们感兴趣的或具有某种重要特性的一个或多个<strong>视频对象</strong>从视频场景中提取出来。</p>
<p>同一视频对象具有<strong>相似</strong>的属性，如<strong>亮度、色彩、纹理及运动特征等</strong>。</p>
<p>一个<strong>视频对象</strong>是指视频图像序列中的同一个物理对象。位于一个图像中的视频对象称为一个<strong>视频对象区</strong>。</p>
<p>为了表示用户感兴趣的区域 ，MPEG-4标准提出了视频对象的概念，其<strong>编码是基于对象</strong>的，由此，对比特率控制可以基于对象。为了实现高效压缩，每个视频对象用三类信息来描述：<strong>运动信息、形状信息、纹理信息</strong>，再根据这些信息完成视频的编码和解码。</p>
<h3 id="视频分割基本理论">视频分割基本理论</h3><p>按照是否需要人工参与分：自动方式、半自动方式</p>
<p>按照视频分割过程中利用的信息分：</p>
<ol>
<li><strong>时域分割</strong>算法用来检测和分割物体的<strong>运动边缘</strong>；</li>
<li><strong>空间域分割</strong>算法利用特定的判决原则将图像<strong>分割成区域集合</strong>；</li>
<li><strong>时空联合分割</strong>算法结合了时域分割和空间域分割的优点。</li>
</ol>
<p>按照是否提供压缩形式分：压缩域分割、非压缩域分割</p>
<p>按照用途分：用于视频压缩编码、用于内容交互多媒体应用</p>
<h3 id="视频分割技术">视频分割技术</h3><h4 id="空间域分割">空间域分割</h4><blockquote>
<p>视频帧内的分割，即图像分割，将图像分割为有意义的区域集合，这些区域之间通常具有明显的边界。</p>
</blockquote>
<p>基于空间域的分割技术主要有：</p>
<ul>
<li>基于灰度的空域分割；</li>
<li>基于区域的空域分割；</li>
<li>基于边缘的空域分割；</li>
<li>基于纹理的空域分割等</li>
<li>分水岭算法：基于数学形态学的图像分割算法</li>
</ul>
<h5 id="区域生长（Region_Growing）（掌握）">区域生长（Region Growing）（掌握）</h5><blockquote>
<p>将具有相似性质的像素集合起来构成区域</p>
</blockquote>
<p>区域生长法的关键：</p>
<ol>
<li>选择或确定一组能正确代表所需区域的<strong>种子像素</strong>；</li>
<li>确定在<strong>生长</strong>过程中能将<strong>相邻像素</strong>包括进来的准则；</li>
<li>制定让生长过程停止的<strong>条件或规则</strong></li>
</ol>
<p>常见区域生长算法种类：</p>
<ol>
<li>以单像素为单位的区域生长法</li>
<li>以区域为单位的区域生长法（子图合并）</li>
</ol>
<h4 id="时间域分割技术">时间域分割技术</h4><h5 id="帧间差分的变化检测">帧间差分的变化检测</h5><blockquote>
<p>时域中检测运动对象的基本方法，采用帧间差分法可消除视频数据的帧间冗余信息，提取变化检测掩模（Change Detection Mask）。</p>
</blockquote>
<p>基本原理：通过检测前、后帧之间的帧差，从而把当前视频分割成相对于参考帧“变化的”和“未变化的”区域。</p>
<p>前后帧的偏移帧差：<br>$$d_{k,k+1}(x,y)=|f_{k+1}(x,y)-f_k(x,y)|$$</p>
<p>局限性：</p>
<ol>
<li>阈值选取至关重要的，无通用阈值设定方法；</li>
<li>对某些视频序列无能为力的，如纹理不够充分、某些帧对象存在运动而另外一些帧没有运动；</li>
<li>对于对象间的相互遮挡区、显露区的判断是直接用亮度信号估算参数；</li>
<li>差分检测受噪声影响不敏感，还受运动估算精度的影响</li>
</ol>
<h4 id="块匹配的运动估计">块匹配的运动估计</h4><blockquote>
<p>基于对时间图像序列变化的检测。</p>
</blockquote>
<p>运动物体特征：检测图像变化，可以在不同的层次上进行，如像素、边缘或区域</p>
<p>二维运动估计：估计运动前后相邻时刻两幅图像上对应点的坐标,以获取二维运动矢量。假设物体点的亮度在此运动和时间间隔保持不变。</p>
<p>几种匹配准则：</p>
<ol>
<li>最大互相关函数</li>
<li>最小均方误差函数（MSE）</li>
<li>最小平均绝对差值函数（MAD）</li>
<li>最大匹配像素统计（MPC）</li>
</ol>
<h4 id="光流法">光流法</h4><p>运动场：给图像中<strong>每一像素点赋予一个速度向量</strong>，就形成了<strong>图像运动场</strong>(motion field)，对应于物体的三维运动</p>
<p>光流定义：视频序列<strong>空间坐标关于时间的变化率</strong>，对应于像素的<strong>瞬时速度矢量</strong>，也是运动物体在一帧图像到下一帧图像相对应像素点间的位移量</p>
<p>光流：图像亮度模式的<strong>表观(视在)运动</strong>，“可察觉”的二维运动，依赖于<strong>光照条件</strong>和<strong>物体表面的纹理</strong>。假设光流就是真实的二维运动，估算二维运动矢量。</p>
<h2 id="第九章_视频跟踪">第九章 视频跟踪</h2><h2 id="第十章_视频压缩编码">第十章 视频压缩编码</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="第一章_绪论">第一章 绪论</h2><h3 id="视频图像处理的概念">视频图像处理的概念</h3><p>视频是一组图像在<strong>时间轴</strong>上的<strong>有序排列</strong>，是二维图像在一维时间轴上构成的<strong>图像序列</strong>，又称<strong>动态图像、活动图像、运动图像</strong>。不止包含了静止图像的内容，还包含了目标的<strong>运动信息</strong>和<strong>客观世界随时间变化的信息</strong>。</p>
<p>序列&gt;帧&gt;像素</p>
<h3 id="视频图像处理系统的组成">视频图像处理系统的组成</h3><ol>
<li>图像<strong>采集</strong></li>
<li>图像<strong>显示</strong></li>
<li>图像<strong>存储</strong></li>
<li>图像<strong>通信</strong></li>
<li>图像<strong>处理和分析</strong></li>
</ol>]]>
    
    </summary>
    
      <category term="复习笔记" scheme="http://jcf94.github.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="我的大学" scheme="http://jcf94.github.io/categories/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[现代交换原理 复习笔记 部分]]></title>
    <link href="http://jcf94.github.io/2015/05/28/2015-05-28-xiandaijiaohuan/"/>
    <id>http://jcf94.github.io/2015/05/28/2015-05-28-xiandaijiaohuan/</id>
    <published>2015-05-28T15:56:10.000Z</published>
    <updated>2015-06-28T04:39:22.880Z</updated>
    <content type="html"><![CDATA[<p>感觉我也是醉醉的，人比较懒，愿意打字都不愿意动笔了……</p>
<hr>
<h2 id="第1章_绪论">第1章 绪论</h2><h3 id="交换">交换</h3><p>所谓交换，就是在通信网上，负责在通信的源和目的终端之间建立通信信道，传送通信信息的机制，也就是根据目的地，在源和目的终端之间传送通信信息。网内的任一个用户可以按着自己的要求与网内的其他用户进行信息交换</p>
<a id="more"></a>
<ul>
<li><p>交换式通信网通信过程</p>
<blockquote>
<ol>
<li>呼叫建立阶段</li>
<li>消息传输阶段</li>
<li>释放阶段</li>
</ol>
</blockquote>
</li>
<li><p>交换方式</p>
<blockquote>
<p>电路交换 CS （Circuit Switch）<br>报文交换 MS （Message Switch）<br>分组交换 PS （Package Switch）</p>
<blockquote>
<p>数据报 Datagram<br>虚电路 VC (Virtual Circuit)</p>
<blockquote>
<p>交换虚电路 SVC （Switching Virtual Circuit）<br>永久虚电路 PVC （Permanent Virtual Circuit）</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th>分类</th>
<th>电路交换</th>
<th>报文交换</th>
<th>分组交换</th>
</tr>
</thead>
<tbody>
<tr>
<td>方式</td>
<td>通信之前先建立通路，通信时通路独占，通信结束，通路释放</td>
<td>无需建立通路（无连接）</td>
<td>将报文分成若干个报文组（packet)，每个报文组要加上地址、编号、校验码，然后以报文组为存储转发单位逐节点转发，到达目的地再按编号组装成原报文</td>
</tr>
<tr>
<td>接续时间</td>
<td>较长</td>
<td>较短</td>
<td>较短</td>
</tr>
<tr>
<td>传输时延</td>
<td>短</td>
<td>长，偏差很大</td>
<td>较短</td>
</tr>
<tr>
<td>数据可靠性</td>
<td>一般</td>
<td>较高</td>
<td>高</td>
</tr>
<tr>
<td>对业务过载的反应</td>
<td>拒绝接收呼叫</td>
<td>信息存储在交换机中，传输时延加大</td>
<td>减小用户输入信息流量（流量控制），时延加大</td>
</tr>
<tr>
<td>异种终端之间的相互通信</td>
<td>不可</td>
<td>可</td>
<td>可</td>
</tr>
<tr>
<td>电路利用率</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>交换机成本</td>
<td>较低</td>
<td>较高</td>
<td>较高</td>
</tr>
<tr>
<td>实时会话业务</td>
<td>适用</td>
<td>不适用</td>
<td>轻负载下适用</td>
</tr>
</tbody>
</table>
<ul>
<li>分组交换<blockquote>
<p>基于<strong>统计时分复用</strong>，实时性较好，线路利用率高。</p>
<ol>
<li>数据报方式:以分组为基本单位逐节点转发，且不同节点可沿不同的路径传输，类似报文交换。</li>
<li>虚电路:首先网络在通信两端建立逻辑连接，然后用户数据以分组为单位沿该路径顺序传送到达终点（逐节点转发）。类似于电路交换，但通路不是一直占用。</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="程控交换机">程控交换机</h3><ul>
<li><p>交换机网络接续方式</p>
<blockquote>
<ol>
<li>空分</li>
<li>时分</li>
</ol>
</blockquote>
</li>
<li><p>控制方式</p>
<blockquote>
<ol>
<li>集中控制</li>
<li>分级控制</li>
<li>全分散控制</li>
</ol>
</blockquote>
</li>
<li><p>五级长途电话网</p>
<blockquote>
<ol>
<li>省间中心 C1</li>
<li>省中心 C2</li>
<li>地区中心 C3</li>
<li>县中心 C4</li>
<li>本地端局 C5</li>
</ol>
</blockquote>
</li>
<li><p>三级国际电话网</p>
<blockquote>
<ol>
<li>国际中心局 CT1：各CT1之间均有直达链路</li>
<li>CT2</li>
<li>接口局 CT3</li>
</ol>
</blockquote>
</li>
<li><p>路由分类</p>
<blockquote>
<ol>
<li>基干路由：一部分是C1级交换中心之间的低呼损电路群；另一部分是同一交换区内相邻级之间的低呼损电路群。基干路由上的话务量不允许溢出</li>
<li>直达路由：先选择高效直达路由。当高效直达路由忙时，选择迂回路由。选择的顺序是“由远而近”，即先在被叫端“自下而上”选择。然后在主叫端“自上而下”选择。最后选择最终路由。</li>
</ol>
</blockquote>
</li>
<li><p>本地电话网</p>
<blockquote>
<ol>
<li>去话汇接</li>
<li>来话汇接</li>
<li>来去话汇接</li>
<li>集中汇接</li>
<li>主辅汇接</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="第2章_交换机理论基础">第2章 交换机理论基础</h2><ul>
<li>话务量<br>考察时间内各次服务时间总和<br>Y表示话务量，T表示时间总和，<br>$$A= {Y\over T}=n{S\over T}=λS$$<br>$$λ={n\over T}$$</li>
</ul>
<h2 id="第3章_信令系统">第3章 信令系统</h2><h3 id="概述">概述</h3><ul>
<li><p>信令<br>信令是各交换局在完成呼叫接续中使用的一种通信语言，它是控制交换机产生动作的命令。</p>
</li>
<li><p>信令的分类</p>
<blockquote>
<ol>
<li>按工作区域分<br>1) 用户线信令<br>2) 局间信令<br>3) 交换机内部信令</li>
<li>按传送方向分<br>1) 前向信令<br>2) 后向信令</li>
<li>按功能分<br>1) 监视信令（线路信令）：用来监视或改变线路上的呼叫状态或条件<br>2) 选择信令（记发器信令）：由主叫用户发出的数字信号（电话号码），即被叫用户的地址信息<br>3) 操作信令（管理信令）</li>
<li>按传播途径分<br>1) <strong>随路信令（带内信令）</strong>：通过话路传送的信令<br>2) <strong>公共信道信令（带外信令）</strong>：信令传送和话路分开的信令</li>
</ol>
</blockquote>
</li>
<li><p>信令的传送方式</p>
<blockquote>
<ol>
<li>端到端：对电路质量要求较高</li>
<li>逐段转发：对线路要求较低</li>
<li>混合方式：中国1号记发器信令在劣质电路中使用逐段转发方式，在优质电路中使用端到端方式，No.7信令通常使用逐段转发方式但也可提供端到端信令。</li>
</ol>
</blockquote>
</li>
<li><p>控制方式</p>
<blockquote>
<ol>
<li>非互控（脉冲方式）：设备简单，但可靠性差</li>
<li>半互控方式：发端每发送一组信令之后必须受到确认后才能再发</li>
<li>全互控方式：连续发送，不中断，直到受到证实之后才停止。抗干扰能力强，可靠性好，但发码速度慢<br>中国1号记发器信令使用<strong>全互控方式</strong>，保证可靠性，但影响了速度；No.7信令使用非互控方式，速度快，同时采用一些措施来保证可靠性。</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="中国No-1信令">中国No.1信令</h3><p>中国1号信令是一种<strong>随路信令</strong>。<br>方式分为线路信令和记发器信令。<br>数据类型分为模拟型线路信令（直流型线路信令、带内单频信令）和数字型线路信令。 </p>
<ul>
<li><p>带内单频线路信令<br><strong>单频2600Hz</strong>，基本脉冲为<strong>长脉冲600ms</strong>，<strong>短脉冲150ms</strong>，两信令<strong>最小标称间隔300ms</strong>。</p>
</li>
<li><p>局间数字型线路信令<br>一个复帧由<strong>16</strong>个子帧组成，记为<strong>F0~F15</strong><br>每一个子帧有<strong>32</strong>个时隙，<strong>256bit</strong>，<strong>T=125us</strong>，记为<strong>TS0~TS31</strong><br>每一个时隙包含<strong>8bit</strong>二进制码字<br><strong>TS0</strong>用于收发端同步，称为帧同步时隙，也称为帧定位码组<br><strong>TS1~TS15以及TS17~TS31</strong>是话音时隙<br><strong>TS16</strong>用来传送复帧同步及数字型线路信令，称为信令时隙。一路话音信号的线路信令只需要<strong>4bit</strong>，即一个<strong>TS16</strong>时隙可以传送两路。</p>
</li>
<li><p>No.1记发器信令 RS（Resister Signal）<br><strong>多频互控方式信令，MFC（Multiple Frequency Control）</strong>，传送方式为<strong>端到端</strong>，劣质电路上也可采用<strong>逐段转发</strong>方式，控制方式为<strong>全互控</strong>。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>组别</th>
<th>名称</th>
<th>基本含义</th>
<th>容量</th>
</tr>
</thead>
<tbody>
<tr>
<td>I</td>
<td>KA</td>
<td>主叫用户类别</td>
<td>15</td>
</tr>
<tr>
<td>I</td>
<td>KC</td>
<td>长途接续类别</td>
<td>5</td>
</tr>
<tr>
<td>I</td>
<td>KE</td>
<td>市内接续类别</td>
<td>5</td>
</tr>
<tr>
<td>I</td>
<td>数字信令</td>
<td>0~9</td>
<td>10</td>
</tr>
<tr>
<td>II</td>
<td>KD</td>
<td>发端呼叫类别</td>
<td>6</td>
</tr>
<tr>
<td>A</td>
<td>A</td>
<td>收号状态和接续状态</td>
<td>6</td>
</tr>
<tr>
<td>B</td>
<td>KB</td>
<td>被叫用户状态</td>
<td>6</td>
</tr>
</tbody>
</table>
<ul>
<li>前向I组和后向A组互控，前向II组和后向B组互控</li>
</ul>
<h3 id="No-7_信令">No.7 信令</h3><p>局间的NO.7信令链路是由两端的信令终端设备和它们之间的数据链路组成。<br>最适合采用64kbit/s的数字信道，也适合模拟信道和较低速率下的工作，适合由数字程控交换机和数字传输设备所组成的综合数字网。<br>高可靠性。<br><strong>公共信道信令</strong>。<br>用于支持<strong>蜂窝移动通信</strong>、<strong>PCN</strong>、<strong>ATM</strong>等，用于支持国际网和国内网。</p>
<hr>
<ul>
<li>No.7信令网的基本组成部件有<strong>信令点SP</strong>、<strong>信令转接点STP</strong>和<strong>信令链路SL</strong></li>
</ul>
<hr>
<ul>
<li>SP是处理控制消息的节点，产生消息的信令点为该消息的起源点，消息到达的信令点为该消息的目的地节点。<br>信令点编码有两种：<br><strong>14位（国际）</strong>：3位大区、8位区域网、3位信号点<br><strong>24位（国内）</strong>：8位主信令区、8位分信令区、8位信令点<br>源信令点编码<strong>OPC(Origin Point Code)</strong>，目的信令点编码记为<strong>DPC(Destination Point Code)</strong>。</li>
</ul>
<hr>
<ul>
<li><strong>信令转接点STP</strong>分为综合型和独立型两种。独立型STP是只具有<strong>消息传递部分MTP</strong>和<strong>信令连接控制部分SCCP</strong>功能的信令转接点设备；综合型STP是除了具有消息传递部分MTP和信令连接控制部分SCCP的功能外，还具有<strong>用户部分</strong>功能(例如TUP/ISUP、TCAP、INAP)的信令转接点设备。</li>
</ul>
<hr>
<ul>
<li><strong>信令链路SL</strong>连接各个信令点或信令转接点<br>在两个相邻信令点之间传送信令消息的链路称为信令链路。<br>相同属性的信令链路组成一组链路集。<br>到同一局向的所有链路可属一个链路集，也可属多个链路集；但两个相邻的信令点之间的信令链路只能属于一个链路集。<br>对于相邻两个信令点之间的所有链路，都有一个统一编号，称为<strong>信令链路编码SLC(Signalling Link Code)</strong>。</li>
</ul>
<hr>
<ul>
<li>信令链路的连接方式<br>根据通话电路和信令链路的关系，可采用三种工作方式：</li>
</ul>
<ol>
<li><strong>直连工作方式</strong>：信令链路直接连接两个SP，信令消息直达。</li>
<li><strong>准直联工作方式</strong>：信令消息可能会通过STP转接，路径是<strong>预先设定好</strong>的。</li>
<li><strong>完全分离工作方式</strong>：可能会有多条转接路径，而路由是<strong>动态分配</strong>的。</li>
</ol>
<hr>
<ul>
<li>协议集<br>No.7信令的基本功能结构由<strong>消息传递部分(MTP)（底层）</strong>和<strong>用户部分(UP)（高层）</strong>组成。</li>
</ul>
<hr>
<ul>
<li>消息传递部分 MTP<br>主要是在信令网中提供<strong>可靠的</strong>信令消息传递，并在系统和信令网故障情况下，具有为保证可靠的信息传送而作出响应并采取必要措施的能力。<br>它由三个功能级组成：</li>
</ul>
<ol>
<li><strong>信令数据链路功能(MTP1)</strong>：相当于<strong>物理层</strong>，定义了数字信令链路的物理、电气及功能特性</li>
<li><strong>信令链路控制功能(MTP2)</strong>：相当于<strong>数据链路层</strong>，提供<strong>流量控制</strong>、<strong>消息顺序确认</strong>及<strong>检错重传</strong>功能</li>
<li><strong>信令网络功能(MTP3)</strong>：相当于<strong>网络层</strong>，提供<strong>路由功能</strong></li>
</ol>
<hr>
<ul>
<li>用户部分 UP<br>定义了通信网的各类用户(业务)所需要的信令及其编码，规定用户部分(UP)与消息传递部分（MTP）之间的信号传输关系。控制各种基本呼叫的建立和释放。</li>
</ul>
<ol>
<li><strong>ISDN用户部分ISUP、电话用户部分TUP、数据用户部分DUP</strong>：一般都用ISUP替代全部。</li>
<li><strong>信令连接控制部分SCCP</strong>：本身相当于<strong>传输层</strong>，但是与<strong>MTP-3共同组成网络层</strong>，<strong>与MTP共同组成网络业务部分NSP</strong>。加强消息传递功能。</li>
<li><strong>事务处理能力应用部分TCAP</strong>：提供节点之间的传递信息的手段以及对相互独立的各种应用提供通用的业务</li>
<li><strong>TC用户</strong>：指各种应用，目前有智能网应用部分(INAP)、移动应用部分(MAP)、运行维护管理应用部分(OMAP)</li>
</ol>
<hr>
<ul>
<li>CCS7信令单元格式<br>信令消息是以<strong>信号单元</strong>的方式传送，而<br>且采用<strong>不等长信号单元</strong>。以<strong>8bit</strong>为长度单位<br>它有三种信号单元：</li>
</ul>
<ol>
<li><strong>消息信令单元MSU</strong>：用来传送<strong>第三级以上</strong>的各层发送的信息。</li>
<li><strong>链路状态信令单元LSSU</strong>：用来传送信令链路状态</li>
<li><strong>填充信令单元FISU</strong>：是在信令链路上没有消息要传送时，向对端发送的空信号，用来维持信令链路的通信状态，同时可证实对端发来的信令单元。</li>
</ol>
<ul>
<li><p><strong>信令信息字段 SIF(Signalling Information Field)</strong>是MSU特有的，长度为<strong>2~272个8位组</strong>，包含路由标记和信令数据，就是实际发送的消息。</p>
</li>
<li><p>LSSU和FISU都由信令链路功能级生成及处理。</p>
</li>
</ul>
<hr>
<ul>
<li>电话用户部分TUP<br>电话用户消息的内容是在消息信令单元MSU中的<strong>信令信息字段SIF</strong>中传送的。由<strong>标记、标题码和信令信息</strong>三部分组成。</li>
</ul>
<ol>
<li>初始地址消息<strong>IAM（无附加）</strong>或<strong>IAI（附加信息）</strong>：含有下一个交换局为建立呼叫、确定路由所需的有关信息。初始地址消息蕴含了占用电路的功能</li>
<li>后序地址消息<strong>SAM（一次传多位）</strong>和<strong>SAO（一次传一位）</strong>：传送剩余的被叫号码。</li>
<li>地址全消息<strong>ACM</strong></li>
<li>地址不全消息<strong>ADI</strong></li>
<li>被叫用户状态：用户市忙<strong>SLB</strong>、用户长忙<strong>STB</strong>、线路不工作<strong>LOS</strong>、空号<strong>UNN</strong>和发送专用信息音<strong>SST</strong></li>
<li>应答信号<strong>ANC（计费）</strong>、<strong>ANN（免费）</strong></li>
<li>后向拆线信号<strong>CBK</strong>、前向拆线信号<strong>CLF</strong></li>
</ol>
<p>首先发送：</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>空</th>
<th>CIC</th>
<th>OPC</th>
<th>DPC</th>
</tr>
</thead>
<tbody>
<tr>
<td>长度</td>
<td>4</td>
<td>12</td>
<td>24</td>
<td>24</td>
</tr>
</tbody>
</table>
<ul>
<li>话音电路标识CIC</li>
</ul>
<hr>
<ul>
<li>ISDN用户部分ISUP<br>ISUP可以全面支持ISDN用户的基本承载业务和补充业务，而且可以<strong>完全实现TUP（电话用户部分）和DUP（数据用户部分）</strong>的功能</li>
</ul>
<p>首先发送：</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>空</th>
<th>SLS</th>
<th>OPC</th>
<th>DPC</th>
</tr>
</thead>
<tbody>
<tr>
<td>长度</td>
<td>4</td>
<td>12</td>
<td>24</td>
<td>24</td>
</tr>
</tbody>
</table>
<ul>
<li>信令链路选择SLS</li>
</ul>
<hr>
<ol>
<li>初始地址消息<strong>IAM（无附加）</strong>或<strong>IAI（附加信息）</strong>：含有下一个交换局为建立呼叫、确定路由所需的有关信息。初始地址消息蕴含了占用电路的功能</li>
<li>后序地址消息<strong>SAM（一次传多位）</strong>和<strong>SAO（一次传一位）</strong>：传送剩余的被叫号码。</li>
<li>地址全消息<strong>ACM</strong></li>
<li>地址不全消息<strong>ADI</strong></li>
<li>被叫用户状态：用户市忙<strong>SLB</strong>、用户长忙<strong>STB</strong>、线路不工作<strong>LOS</strong>、空号<strong>UNN</strong>和发送专用信息音<strong>SST</strong></li>
<li>应答信号<strong>ANC（计费）</strong>、<strong>ANN（免费）</strong></li>
<li>后向拆线信号<strong>CBK</strong>、前向拆线信号<strong>CLF</strong></li>
</ol>
<table>
<thead>
<tr>
<th>—-</th>
<th>ISUP</th>
<th>TUP</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始地址消息</td>
<td>IAM</td>
<td>IAM/IAI</td>
</tr>
<tr>
<td>后序地址消息（重叠发送时）</td>
<td></td>
<td>SAM/SAO</td>
</tr>
<tr>
<td>地址全消息</td>
<td>ACM</td>
<td>ACM</td>
</tr>
<tr>
<td>地址不全消息</td>
<td>ADI</td>
<td>ADI</td>
</tr>
<tr>
<td>应答信号</td>
<td>ANM</td>
<td>ANC/ANN</td>
</tr>
<tr>
<td>故障信号</td>
<td>包含在REL中</td>
<td>SLB/STB/LOS/UNN</td>
</tr>
<tr>
<td>挂机信号</td>
<td></td>
<td>CBK（后向）</td>
</tr>
<tr>
<td>拆线信号</td>
<td>REL（链路清除）</td>
<td>CLF（前向）</td>
</tr>
<tr>
<td>拆线证实</td>
<td>RLC</td>
<td>RLG</td>
</tr>
</tbody>
</table>
<h2 id="第4章_数字程控交换原理与技术">第4章 数字程控交换原理与技术</h2><ul>
<li>交换机的基本组成</li>
</ul>
<ol>
<li>话路部分<br>用户电路<br>中继器<br>交换网络<br>信令设备</li>
<li>控制系统</li>
</ol>
<hr>
<ul>
<li>控制方式</li>
</ul>
<ol>
<li>集中控制</li>
<li>分散控制：资源分散，控制功能集中<br>1) 分级控制：上下级结构、每个层次的处理机处理一部分内容<br>2) 全分散控制：平行结构、将系统划分为几个模块，每个模块相互通信，相互配合<br>3) 基于容量分担的全分散控制：综合上两个、在平行结构中分层<br>容量分担：资源分散、功能集中<br>功能分担：资源集中、功能分散<br>话务分担：<br>容量分担：</li>
</ol>
<table>
<thead>
<tr>
<th>—-</th>
<th>集中控制</th>
<th>分散控制</th>
</tr>
</thead>
<tbody>
<tr>
<td>优点</td>
<td>处理机能够及时掌握、了解整个系统的运行状态，使用和管理系统的全部资源，不会出现资源争夺的冲突</td>
<td>任何一个模块故障，整体仍然能够运行，扩容方便，灵活</td>
</tr>
<tr>
<td>缺点</td>
<td>灵活性差，经济性差（处理级复杂、昂贵），软件庞大，维护困难</td>
<td>各部分独立，可能会出现资源冲突，公共资源难以共享，单独模块的容量过小</td>
</tr>
<tr>
<td>适合</td>
<td>小容量交换机</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li>处理机的冗余配置</li>
</ul>
<ol>
<li>重要的进行1+1配置</li>
<li>不重要的进行n+1配置</li>
</ol>
<ul>
<li>1+1的三种方式</li>
</ul>
<table>
<thead>
<tr>
<th>—-</th>
<th>同步双工</th>
<th>双机互助（话务分担）</th>
<th>主/备用</th>
</tr>
</thead>
<tbody>
<tr>
<td>特点</td>
<td>两机同步工作，比较执行结果</td>
<td>各自独立工作，一旦一台出错，另一台承担全部工作</td>
<td>一台联机一台备用，一旦出故障则主/备用切换</td>
</tr>
<tr>
<td>优点</td>
<td>对硬件故障反应快</td>
<td>过负荷能力强，对软件故障有容错能力，可一台服务一台调试升级</td>
<td>实现简单，热备用时备用机保存主机的相关数据，可以随时接替工作</td>
</tr>
<tr>
<td>缺点</td>
<td>对软件无容错能力，需要不停复核，降低了效率</td>
<td>为避免双机争抢资源，双机通信频繁，软件复杂，对硬件故障反应速度不如同步双工</td>
<td>冷备用切换时会产生延误或者连接中断等</td>
</tr>
</tbody>
</table>
<hr>
<p>4.3.1</p>
<hr>
<ul>
<li><p>程控交换机的硬件结构<br>程控交换机的硬件包括<strong>话路系统</strong>、<strong>中央处理系统（控制系统）</strong>，<strong>维护与操作系统</strong>三部分</p>
</li>
<li><p>用户电路的七大功能，被称为：BORSCHT</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>B</th>
<th>Battery Feed</th>
<th>馈电</th>
</tr>
</thead>
<tbody>
<tr>
<td>O</td>
<td>Overvoltage</td>
<td>过压保护</td>
</tr>
<tr>
<td>R</td>
<td>Ring</td>
<td>振铃</td>
</tr>
<tr>
<td>S</td>
<td>Supervision</td>
<td>监视</td>
</tr>
<tr>
<td>C</td>
<td>CODEC&amp;filter</td>
<td>编解码和滤波</td>
</tr>
<tr>
<td>H</td>
<td>Hybrid</td>
<td>混合</td>
</tr>
<tr>
<td>T</td>
<td>Test</td>
<td>测试</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li><p>交换网络结构<br>交换网络是由若干个交换单元按照一定的<strong>拓扑结构</strong>和<strong>控制方式</strong>构成的网络</p>
</li>
<li><p>交换网络的<strong>三个基本要素</strong><br>交换单元、不同交换单元间的拓扑连接和控制方式</p>
</li>
<li><p>多级交换网络的拓扑结构可用三个参数来说明：</p>
</li>
</ul>
<ol>
<li>每个交换单元的容量。</li>
<li>交换单元的级数。</li>
<li>交换单元间的连接通路(链路)</li>
</ol>
<ul>
<li><p>内部阻塞<br>从交换网络不同输入端来的信息在交换网络中交换时发生的对同一公共资源发生争抢的情况。在竞争资源时失败的信息会被阻塞，直到公共资源被释放。</p>
</li>
<li><p>内部阻塞概率</p>
</li>
</ul>
<p>$$a={A \over n*m}$$</p>
<ul>
<li>无阻塞网络 <strong>Clos网络</strong> 输入m*n 输出 j*k</li>
</ul>
<table>
<thead>
<tr>
<th>—-</th>
<th>第一级</th>
<th>第二级</th>
<th>第三级</th>
</tr>
</thead>
<tbody>
<tr>
<td>个数</td>
<td>m</td>
<td>n+j-1</td>
<td>k</td>
</tr>
<tr>
<td>入线数</td>
<td>n</td>
<td>m</td>
<td>n+j-1</td>
</tr>
<tr>
<td>出线数</td>
<td>n+j-1</td>
<td>k</td>
<td>j</td>
</tr>
</tbody>
</table>
<ul>
<li>中间一级可以继续拆分</li>
</ul>
<hr>
<ul>
<li><p>空分交换机/空间接线器<br>用来实现多个输入复用线与多个输出复用线之间的空间交换，而不改变其时隙位置</p>
</li>
<li><p>基本结构</p>
</li>
</ul>
<ol>
<li>交叉点矩阵：开关阵列</li>
<li>控制存储器</li>
</ol>
<ul>
<li>时分交换机<br>共享存储器型的交换单元</li>
</ul>
<ol>
<li>话音存储器SM：用于存储话音信号</li>
<li>控制存储器CM：用于存储控制命令字</li>
</ol>
<ul>
<li>TST网络<br>TST网络是在电路交换系统中经常使用的一种交换网<br>络，它是三级交换网络，两侧为T接线器，中间一级为S接线<br>器，S级的出入线数决定于两侧T接线器的数量。</li>
</ul>
<ol>
<li>第1级，T接线器：负责输入母线的时隙交换。</li>
<li>S接线器：负责母线之间的空间交换。</li>
<li>第2级，T接线器：负责输出母线的时隙交换</li>
</ol>
<ul>
<li>常用的有<br>$TS^nT$、$ST^nS$、T/结合、TTT等</li>
</ul>
<hr>
<ul>
<li>交换软件中使用的语言</li>
</ul>
<ol>
<li>规范描述语言SDL：用于系统设计阶段，用来说明对程控交换机的各种功能要求和技术规范，并描述功能和状态的变化情况；</li>
<li>高级语言和汇编语言：用来编写软件程序；</li>
<li>人机对话语言MML：主要用于人机对话，在软件测试和运行维护阶段使用</li>
</ol>
<hr>
<ul>
<li>局数据</li>
</ul>
<ol>
<li>配置数据</li>
<li>路由和中继规则</li>
<li>No.7信令数据</li>
<li>计费数据</li>
<li>新业务提供情况</li>
</ol>
<ul>
<li>用户数据</li>
</ul>
<ol>
<li>用户电话号码、用户设备号码</li>
<li>用户线类别</li>
<li>话机类别</li>
<li>用户的服务等级</li>
<li>用户对新业务的使用权及已经登记的新业务</li>
<li>用户计费数据</li>
</ol>
<hr>
<ul>
<li>程控交换机中操作系统主要功能是：</li>
</ul>
<ol>
<li>任务调度</li>
<li>存储器管理</li>
<li>进程之间的通信、处理机之间通信</li>
<li>定时管理</li>
<li>系统监督和恢复</li>
<li>I／O设备管理、文件管理等</li>
</ol>
<ul>
<li><p>优先级<br>按照对实时性要求的不同，程序的优先级大致可分为<strong>中断级、时钟级和基本级</strong></p>
</li>
<li><p>比特型时间表<br>一个时间表所能调度的程序数等于该时间表的列数，时间表能够支持的不同周期数等于时间表行数n的不同因子数</p>
</li>
</ul>
<hr>
<ul>
<li>呼叫处理的过程</li>
</ul>
<ol>
<li>输入处理：负责采集话路设备的状态信息的变化和有关信息，只负责检测事件而不进行处理。本质上是软件和硬件之间的接口程序，和硬件设备直接联系，通过周期性的扫描程序实现状态信息的采集。</li>
<li>内部处理：主要任务是分析收集的信息和各类发生的事件，分配资源，并根据所发生的时间及与该事件有关进程的当前状态决定下一步的动作。由于对时间没有严格要求，一般情况下，采用队列方式来完成。</li>
<li>输出处理：依据内部分析的结果完成对话路设备的驱动。如交换网络的接续、向用户发生各种信令音等</li>
</ol>
<h2 id="第5章_分组交换原理与技术">第5章 分组交换原理与技术</h2><h2 id="第6章_ATM原理与技术">第6章 ATM原理与技术</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>感觉我也是醉醉的，人比较懒，愿意打字都不愿意动笔了……</p>
<hr>
<h2 id="第1章_绪论">第1章 绪论</h2><h3 id="交换">交换</h3><p>所谓交换，就是在通信网上，负责在通信的源和目的终端之间建立通信信道，传送通信信息的机制，也就是根据目的地，在源和目的终端之间传送通信信息。网内的任一个用户可以按着自己的要求与网内的其他用户进行信息交换</p>]]>
    
    </summary>
    
      <category term="复习笔记" scheme="http://jcf94.github.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="我的大学" scheme="http://jcf94.github.io/categories/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通宵那些事]]></title>
    <link href="http://jcf94.github.io/2015/05/28/2015-05-28-diary/"/>
    <id>http://jcf94.github.io/2015/05/28/2015-05-28-diary/</id>
    <published>2015-05-28T12:14:10.000Z</published>
    <updated>2015-05-28T12:33:39.000Z</updated>
    <content type="html"><![CDATA[<p>已经快要忘了上一次通宵是在什么时候了，曾经做数学建模的时候是通过的，最后应该也是在期末的某次，一边要弄课设，一边又有考试，然后想着通宵赶紧把课设做做完，留出白天的时间来好好复习。</p>
<p>说起来还是自己平时的执行效率太低，总是没有办法全心全意地复习，拖啊拖啊拖啊的，就拖成了现在这个样子。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>已经快要忘了上一次通宵是在什么时候了，曾经做数学建模的时候是通过的，最后应该也是在期末的某次，一边要弄课设，一边又有考试，然后想着通宵赶紧把课设做做完，留出白天的时间来好好复习。</p>
<p>说起来还是自己平时的执行效率太低，总是没有办法全心全意地复习，拖啊拖啊拖啊的，就]]>
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始使用Github]]></title>
    <link href="http://jcf94.github.io/2015/05/26/2015-05-26-start/"/>
    <id>http://jcf94.github.io/2015/05/26/2015-05-26-start/</id>
    <published>2015-05-26T07:34:31.000Z</published>
    <updated>2015-05-27T04:54:28.000Z</updated>
    <content type="html"><![CDATA[<p>之前的博客都是写在博客园上的，现在转移至github。</p>
<p>第一次用Markdown这种语法，真心简洁明了，短小精悍啊~ 各种格式也是帅爆</p>
<p>算是从5月26号正式开始跑这个博客吧，27号最后换了个比较喜欢的主题，然后开始慢慢改自己的东西，估计以后一段时间用的都是这个样式了。</p>
<p>然后有空会开始把博客园的东西一篇一篇移回到这里来。</p>
<hr>
<p>最近一周各种考试+实验+写报告，满满的都是事情…</p>
<p>然而这么忙，我发现我还是控制不住自己啊啊…就开始折腾这个博客了…这种自己都觉得坑爹啊的奇怪习惯真得改改了啊啊啊（捂脸）</p>
<p>好好复习去了……</p>
<p>最后吐槽一句，这学期的考试真的好难啊啊啊啊啊啊啊~~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前的博客都是写在博客园上的，现在转移至github。</p>
<p>第一次用Markdown这种语法，真心简洁明了，短小精悍啊~ 各种格式也是帅爆</p>
<p>算是从5月26号正式开始跑这个博客吧，27号最后换了个比较喜欢的主题，然后开始慢慢改自己的东西，估计以后一段时]]>
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[test]]></title>
    <link href="http://jcf94.github.io/2015/05/26/2015-05-26-test/"/>
    <id>http://jcf94.github.io/2015/05/26/2015-05-26-test/</id>
    <published>2015-05-26T05:07:16.000Z</published>
    <updated>2015-06-13T05:19:32.611Z</updated>
    <content type="html"><![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><pre><code>这是一段不加格式的代码
<span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span>
<span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span>

<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>
</span>{
    <span class="built_in">printf</span>(<span class="string">"Helloworld\n"</span>);

    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><h3 id="三级标题">三级标题</h3><a id="more"></a>
<h4 id="四级标题">四级标题</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段正常的代码</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Helloworld\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$$这是一串数学公式$$<br>$$e=mc^2$$</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>又名块注释</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p><em>这是一句斜体</em></p>
<p><em>这也是一句斜体</em></p>
<p><strong>这是一句加粗</strong></p>
<p><strong>这也是一句加粗</strong></p>
<ul>
<li>这是无序列表</li>
</ul>
<ul>
<li>这也是无序列表</li>
</ul>
<ul>
<li>这还是无序列表</li>
</ul>
<ol>
<li>这是有序列表</li>
<li>这也是有序列表</li>
</ol>
<p>这是一个<a href="http://baidu.com" target="_blank" rel="external">链接</a></p>
<p>这是一堆链接<a href="http://google.com" target="_blank" rel="external">Google</a>，<a href="http://baidu.com" target="_blank" rel="external">baidu</a></p>
<blockquote>
<p>下面来测试一下带图</p>
</blockquote>
<p><img src="/images/photo.jpg" alt="alt text" title="图片测试"></p>
<p><del>删除线</del></p>
<table>
<thead>
<tr>
<th style="text-align:left">这是一个</th>
<th style="text-align:center">表格</th>
<th style="text-align:right">OK</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">左对齐</td>
<td style="text-align:center">居中</td>
<td style="text-align:right">右对齐</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><pre><code>这是一段不加格式的代码
<span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span>
<span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span>

<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>
</span>{
    <span class="built_in">printf</span>(<span class="string">"Helloworld\n"</span>);

    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><h3 id="三级标题">三级标题</h3>]]>
    
    </summary>
    
      <category term="测试" scheme="http://jcf94.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jcf94.github.io/2015/05/26/2015-05-26-hello-world/"/>
    <id>http://jcf94.github.io/2015/05/26/2015-05-26-hello-world/</id>
    <published>2015-05-26T02:00:00.000Z</published>
    <updated>2015-05-26T05:58:19.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="测试" scheme="http://jcf94.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 3726 Graph and Queries 平衡树+前向星+并查集+离线操作+逆向思维 数据结构大综合题]]></title>
    <link href="http://jcf94.github.io/2015/03/23/2015-03-23-HDU-3726-Graph-and-Queries/"/>
    <id>http://jcf94.github.io/2015/03/23/2015-03-23-HDU-3726-Graph-and-Queries/</id>
    <published>2015-03-23T11:29:27.000Z</published>
    <updated>2015-06-19T06:34:04.926Z</updated>
    <content type="html"><![CDATA[<h1 id="Graph_and_Queries">Graph and Queries</h1><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>You are given an undirected graph with N vertexes and M edges. Every vertex in this graph has an integer value assigned to it at the beginning. You’re also given a sequence of operations and you need to process them as requested. Here’s a list of the possible operations that you might encounter:</p>
<p>1)  Deletes an edge from the graph. The format is [D X], where X is an integer from 1 to M, indicating the ID of the edge that you should delete. It is guaranteed that no edge will be deleted more than once.</p>
<p>2)  Queries the weight of the vertex with K-th maximum value among all vertexes currently connected with vertex X (including X itself). The format is [Q X K], where X is an integer from 1 to N, indicating the id of the vertex, and you may assume that K will always fit into a 32-bit signed integer. In case K is illegal, the value for that query will be considered as undefined, and you should return 0 as the answer to that query.</p>
<p>3)  Changes the weight of a vertex. The format is [C X V], where X is an integer from 1 to N, and V is an integer within the range [-106, 106].</p>
<a id="more"></a>
<p>The operations end with one single character, E, which indicates that the current case has ended. For simplicity, you only need to output one real number - the average answer of all queries.</p>
<h2 id="Input">Input</h2><p>There are multiple test cases in the input file. Each case starts with two integers N and M (1 &lt;= N &lt;= 2 <em> 104, 0 &lt;= M &lt;= 6 </em> 104), the number of vertexes in the graph. The next N lines describes the initial weight of each vertex (-106 &lt;= weight[i] &lt;= 106). The next part of each test case describes the edges in the graph at the beginning. Vertexes are numbered from 1 to N. The last part of each test case describes the operations to be performed on the graph. It is guaranteed that the number of query operations [Q X K] in each case will be in the range [1, 2 <em> 105], and there will be no more than 2 </em> 105 operations that change the values of the vertexes [C X V].<br>There will be a blank line between two successive cases. A case with N = 0, M = 0 indicates the end of the input file and this case should not be processed by your program.</p>
<h2 id="Output">Output</h2><p>For each test case, output one real number – the average answer of all queries, in the format as indicated in the sample output. Please note that the result is rounded to six decimal places.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>3<br>20<br>1 2<br>3<br>3<br>D 3<br>Q 1 2<br>Q 2 1<br>D 2<br>Q 3 2<br>C 1 50<br>Q 1 1<br>E<br>3<br>20<br>1 2<br>3<br>3<br>Q 1 1<br>Q 1 2<br>Q 1 3<br>E<br>0</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>Case 1: 25.000000<br>Case 2: 16.666667</p>
</blockquote>
<p>【Hint】</p>
<p>For the first sample:<br>D 3 — deletes the 3rd edge in the graph (the remaining edges are (1, 2) and (2, 3))<br>Q 1 2 — finds the vertex with the second largest value among all vertexes connected with 1. The answer is 20.<br>Q 2 1 — finds the vertex with the largest value among all vertexes connected with 2. The answer is 30.<br>D 2 — deletes the 2nd edge in the graph (the only edge left after this operation is (1, 2))<br>Q 3 2 — finds the vertex with the second largest value among all vertexes connected with 3.  The answer is 0 (Undefined).<br>C 1 50 — changes the value of vertex 1 to 50.<br>Q 1 1 — finds the vertex with the largest value among all vertex connected with 1. The answer is 50.<br>E — This is the end of the current test case. Four queries have been evaluated, and the answer to this case is (20 + 30 + 0 + 50) / 4 = 25.000.</p>
<p>For the second sample, caution about the vertex with same weight:<br>Q 1 1 – the answer is 20<br>Q 1 2 – the answer is 20<br>Q 1 3 – the answer is 10</p>
<h2 id="题意">题意</h2><p>给出一张无向图，并在图中进行多种操作：</p>
<p>1.删除一条边；2.改变一个点的权值；3.询问x能够到达的所有点中，第k大的是多少</p>
<h2 id="分析">分析</h2><p>花费了好多时间在这道题上，算是这段时间中做到的最综合的数据结构题了。</p>
<p>首先本题的无向图一开始就是个陷阱，如果单纯地从图的角度来考虑，每次询问都需要遍历全图来找第k大的值，这显然是不可取的，而中间又存在删边操作，图的连通性不是稳定的，结点的权值会变，而且可能多次改变，所以整个图是完全不稳定的，没办法用图论的方法来解决。</p>
<p>考虑倒过来操作，如果我们从做完所有操作之后最后的结果图出发，逆序回去，则原本的删边可以看成是将两个连通块连接到一起，询问第k值是在x点当前所属的连通块中进行，对点权的修改也是，而对于每一个独立的连通块，最后这两步可以用平衡树来实现。</p>
<p>所以算法的雏形就有了，询问连通块k值、修改连通块中点的点权操作——平衡树，维护点的连通性——并查集，保存点权的修改信息——前向星</p>
<p>完整过程：</p>
<p>1.首先从完整图出发，读入所有操作，记录删掉的边，按顺序记录点权的变化情况，记录其他信息；</p>
<p>2.用删边信息建立终图的连通性，并查集维护，对于每一个独立的连通块，建立一个独立的平衡树（这里我用的是SBT，网上题解搜出来好多人用的Splay，我其实有点不太理解，感觉这里没有需要用到Splay特殊结构的地方，单纯的维护平衡树的话Splay的稳定性和效率应该是不如SBT的。有大神路过看到这个的话，希望能交流下~~~）；</p>
<p>3.从最后一条操作开始逆序回来：</p>
<p>i.  询问，则在x所属的平衡树中找第k值；</p>
<p>ii. 修改，则在x所属的平衡树中删掉原始的值，插入新值，这里对点权的顺序维护我用了前向星，要保证点权的操作也是要有序的；</p>
<p>iii.删边，在这里就是如果两个点属于两个不同的连通块，则将两个连通块连起来，并查集合并，同时平衡树合并。平衡树合并的时候只能把小的那棵树一个一个加到大的树中去，貌似Splay有个启发式合并，用了finger search神马的东西，可以把合并在O（nlogn）内完成，不会写，ORZ。</p>
<h2 id="后记">后记</h2><p>写这道题的时候，SBT模板改了两次，-_-///，然后中间有SBT结合并查集结合前向星的，代码里面就是数组套数组套数组套数组……好多地方写着写着就写乱了，教训是如果能简单，一定不要往复杂了写。</p>
<p>然后并查集的教训：father[]绝对不能直接引用，必须调用getfather（）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : HDU3726</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 20010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> enod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> p,q;</span><br><span class="line">    <span class="keyword">bool</span> enable;</span><br><span class="line">&#125; enode;</span><br><span class="line">enode e[<span class="number">60010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> qnod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,k;</span><br><span class="line">&#125; qnode;</span><br><span class="line">qnode lisq[<span class="number">200010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> no,value,time;</span><br><span class="line">&#125; node;</span><br><span class="line">node lis[<span class="number">300010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sons[MAXN][<span class="number">2</span>],size[MAXN],data[MAXN],sbt[MAXN],sbttail;</span><br><span class="line"><span class="keyword">int</span> lisd[<span class="number">60010</span>],taild,tailq,tail,tailtot,lisc[<span class="number">200010</span>],tailc=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> start[MAXN],num[MAXN],father[MAXN];</span><br><span class="line"><span class="keyword">char</span> listot[<span class="number">500010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;t,<span class="keyword">int</span> w)</span> <span class="comment">//rotate(&amp;node,0/1)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=sons[t][<span class="number">1</span>-w];</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    sons[t][<span class="number">1</span>-w]=sons[k][w];</span><br><span class="line">    sons[k][w]=t;</span><br><span class="line">    size[k]=size[t];</span><br><span class="line">    size[t]=size[sons[t][<span class="number">0</span>]]+size[sons[t][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span> <span class="comment">//maintain(&amp;node,flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">1</span>]]) rotate(t,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">1</span>]]) </span><br><span class="line">        &#123;</span><br><span class="line">            rotate(sons[t][<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">            rotate(t,<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">0</span>]]) rotate(t,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">0</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            rotate(sons[t][<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">            rotate(t,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    maintain(sons[t][<span class="number">0</span>],<span class="keyword">false</span>);</span><br><span class="line">    maintain(sons[t][<span class="number">1</span>],<span class="keyword">true</span>);</span><br><span class="line">    maintain(t,<span class="keyword">false</span>);</span><br><span class="line">    maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v,<span class="keyword">int</span> pos)</span> <span class="comment">//insert(&amp;root,value)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!size[t])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!pos)</span><br><span class="line">        &#123;</span><br><span class="line">            sbttail++;</span><br><span class="line">            pos=sbttail;</span><br><span class="line">        &#125;</span><br><span class="line">        data[pos]=v;</span><br><span class="line">        size[pos]=<span class="number">1</span>;</span><br><span class="line">        sons[pos][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        sons[pos][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        t=pos;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        size[t]++;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;data[t]) insert(sons[t][<span class="number">0</span>],v,pos);</span><br><span class="line">        <span class="keyword">else</span> insert(sons[t][<span class="number">1</span>],v,pos);</span><br><span class="line">        maintain(t,v&gt;=data[t]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span> <span class="comment">//node=del(&amp;root,key)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    size[t]--;</span><br><span class="line">    <span class="keyword">if</span> (v==data[t]||(v&lt;data[t]&amp;&amp;sons[t][<span class="number">0</span>]==<span class="number">0</span>)||(v&gt;data[t]&amp;&amp;sons[t][<span class="number">1</span>]==<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret=data[t];</span><br><span class="line">        <span class="keyword">if</span> (sons[t][<span class="number">0</span>]==<span class="number">0</span>||sons[t][<span class="number">1</span>]==<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            last=t;</span><br><span class="line">            t=sons[t][<span class="number">1</span>]+sons[t][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> data[t]=del(sons[t][<span class="number">0</span>],data[t]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (v&lt;data[t]) <span class="keyword">return</span> del(sons[t][<span class="number">0</span>],v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> del(sons[t][<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==size[sons[t][<span class="number">0</span>]]+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=size[sons[t][<span class="number">0</span>]]) <span class="keyword">return</span> select(sons[t][<span class="number">0</span>],k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> select(sons[t][<span class="number">1</span>],k-<span class="number">1</span>-size[sons[t][<span class="number">0</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_father</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i]=i;</span><br><span class="line">        sbt[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x]!=x) father[x]=getfather(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xx=getfather(x),yy=getfather(y);</span><br><span class="line">    <span class="keyword">if</span> (size[sbt[xx]]&gt;size[sbt[yy]]) </span><br><span class="line">    &#123;</span><br><span class="line">        father[yy]=xx;</span><br><span class="line">        <span class="keyword">while</span>(size[sbt[yy]]&gt;<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=del(sbt[yy],data[sbt[yy]]);</span><br><span class="line">            insert(sbt[xx],temp,last);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        father[xx]=yy;</span><br><span class="line">        <span class="keyword">while</span>(size[sbt[xx]]&gt;<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=del(sbt[xx],data[sbt[xx]]);</span><br><span class="line">            insert(sbt[yy],temp,last);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.no==b.no) <span class="keyword">return</span> a.time&lt;b.time;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.no&lt;b.no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"3726.txt"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n,m,tt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>&amp;&amp;(n+m&gt;<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            lis[i].no=i;</span><br><span class="line">            lis[i].time=i;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;lis[i].value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;e[i].p,&amp;e[i].q);</span><br><span class="line">            e[i].enable=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        taild=<span class="number">0</span>;tailq=<span class="number">0</span>;tailc=<span class="number">0</span>;tail=n;tailtot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> doit=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(doit)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> c=getchar();</span><br><span class="line">            <span class="keyword">while</span>(c!=<span class="string">'D'</span>&amp;&amp;c!=<span class="string">'Q'</span>&amp;&amp;c!=<span class="string">'C'</span>&amp;&amp;c!=<span class="string">'E'</span>) c=getchar();</span><br><span class="line">            tailtot++;</span><br><span class="line">            listot[tailtot]=c;</span><br><span class="line">            <span class="keyword">switch</span>(c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                    taild++;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;lisd[taild]);</span><br><span class="line">                    e[lisd[taild]].enable=<span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'Q'</span>:</span><br><span class="line">                    tailq++;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;lisq[tailq].x,&amp;lisq[tailq].k);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                    tail++;</span><br><span class="line">                    lis[tail].time=tail;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;lis[tail].no,&amp;lis[tail].value);</span><br><span class="line">                    tailc++;</span><br><span class="line">                    lisc[tailc]=lis[tail].no;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    doit=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(&amp;lis[<span class="number">1</span>],&amp;lis[tail+<span class="number">1</span>],op);</span><br><span class="line">        <span class="keyword">int</span> o=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (o!=lis[i].no)</span><br><span class="line">            &#123;</span><br><span class="line">                o=lis[i].no;</span><br><span class="line">                start[o]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            num[o]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        clean_father(n);</span><br><span class="line">        sbttail=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(size,<span class="number">0</span>,<span class="keyword">sizeof</span>(size));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) insert(sbt[i],lis[start[i]+num[i]-<span class="number">1</span>].value,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (e[i].enable)</span><br><span class="line">        <span class="keyword">if</span> (getfather(e[i].p)!=getfather(e[i].q)) </span><br><span class="line">        link(e[i].p,e[i].q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ansq=tailq;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=tailtot-<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">switch</span>(listot[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>:</span><br><span class="line">                <span class="keyword">if</span> (lisq[tailq].k&gt;<span class="number">0</span>&amp;&amp;size[sbt[getfather(lisq[tailq].x)]]&gt;=lisq[tailq].k) </span><br><span class="line">                    ans+=data[select(sbt[getfather(lisq[tailq].x)],size[sbt[getfather(lisq[tailq].x)]]-lisq[tailq].k+<span class="number">1</span>)];</span><br><span class="line">                tailq--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                <span class="keyword">if</span> (getfather(e[lisd[taild]].p)!=getfather(e[lisd[taild]].q))</span><br><span class="line">                    link(e[lisd[taild]].p,e[lisd[taild]].q);</span><br><span class="line">                taild--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                num[lisc[tailc]]--;</span><br><span class="line">                del(sbt[getfather(lisc[tailc])],lis[start[lisc[tailc]]+num[lisc[tailc]]].value);</span><br><span class="line">                insert(sbt[getfather(lisc[tailc])],lis[start[lisc[tailc]]+num[lisc[tailc]]-<span class="number">1</span>].value,last);</span><br><span class="line">                tailc--;</span><br><span class="line">        &#125;</span><br><span class="line">        tt++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %.6f\n"</span>,tt,ans/ansq);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Graph_and_Queries">Graph and Queries</h1><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>You are given an undirected graph with N vertexes and M edges. Every vertex in this graph has an integer value assigned to it at the beginning. You’re also given a sequence of operations and you need to process them as requested. Here’s a list of the possible operations that you might encounter:</p>
<p>1)  Deletes an edge from the graph. The format is [D X], where X is an integer from 1 to M, indicating the ID of the edge that you should delete. It is guaranteed that no edge will be deleted more than once.</p>
<p>2)  Queries the weight of the vertex with K-th maximum value among all vertexes currently connected with vertex X (including X itself). The format is [Q X K], where X is an integer from 1 to N, indicating the id of the vertex, and you may assume that K will always fit into a 32-bit signed integer. In case K is illegal, the value for that query will be considered as undefined, and you should return 0 as the answer to that query.</p>
<p>3)  Changes the weight of a vertex. The format is [C X V], where X is an integer from 1 to N, and V is an integer within the range [-106, 106].</p>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VIJOS P1081 野生动物园 SBT、划分树模板]]></title>
    <link href="http://jcf94.github.io/2015/03/16/2015-03-16-vijos-p1081/"/>
    <id>http://jcf94.github.io/2015/03/16/2015-03-16-vijos-p1081/</id>
    <published>2015-03-16T08:04:00.000Z</published>
    <updated>2015-06-19T06:26:48.901Z</updated>
    <content type="html"><![CDATA[<h1 id="野生动物园">野生动物园</h1><h2 id="描述">描述</h2><p>cjBBteam拥有一个很大的野生动物园。这个动物园坐落在一个狭长的山谷内，这个区域从南到北被划分成N个区域，每个区域都饲养着一头狮子。这些狮子从北到南编号为1,2,3,…,N。每头狮子都有一个觅食能力值Ai，Ai越小觅食能力越强。饲养员cmdButtons决定对狮子进行M次投喂，每次投喂都选择一个区间[I,J]，从中选取觅食能力值第K强的狮子进行投喂。值得注意的是，cmdButtons不愿意对某些区域进行过多的投喂，他认为这样有悖公平。因此cmdButtons的投喂区间是互不包含的。你的任务就是算出每次投喂后，食物被哪头狮子吃掉了。</p>
<a id="more"></a>
<h2 id="输入格式">输入格式</h2><p>输入第一行有两个数N和M。此后一行有N个数，从南到北描述狮子的觅食能力值。此后M行，每行描述一次投喂。第t+2的三个数I,J,K表示在第t次投喂中，cmdButtons选择了区间[I,J]内觅食能力值第K强的狮子进行投喂。</p>
<h2 id="输出格式">输出格式</h2><p>输出有M行，每行一个整数。第i行的整数表示在第i次投喂中吃到食物的狮子的觅食能力值。</p>
<h2 id="样例输入">样例输入</h2><blockquote>
<p>7 2<br>1 5 2 6 3 7 4<br>1 5 3<br>2 7 1</p>
</blockquote>
<h2 id="样例输出">样例输出</h2><blockquote>
<p>3<br>2</p>
</blockquote>
<h2 id="分析">分析</h2><h3 id="解法一、平衡树">解法一、平衡树</h3><p>由题目给出的区间互相不包含可以得出，若将每次询问的区间按照起始区域进行排序，那一定是一段接一段，只有可能是两种情况：</p>
<p>下一段的左端与上一段的右端不相交或者相交。</p>
<p>这两种情况都是前面的数据与后面的数据互不影响，因此将区间排序之后，对于每一个区间，删除掉前面多余的，插入后面不够的，使平衡树中仅留下该区间中的数据，然后直接找第k小即可。</p>
<p>SBT可解。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : VIJOS1081</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sons[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> size[MAXN],data[MAXN];</span><br><span class="line"><span class="keyword">int</span> sbt=<span class="number">0</span>,sbttail=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;t,<span class="keyword">int</span> w)</span> <span class="comment">//rotate(&amp;node,0/1)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=sons[t][<span class="number">1</span>-w];</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    sons[t][<span class="number">1</span>-w]=sons[k][w];</span><br><span class="line">    sons[k][w]=t;</span><br><span class="line">    size[k]=size[t];</span><br><span class="line">    size[t]=size[sons[t][<span class="number">0</span>]]+size[sons[t][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span> <span class="comment">//maintain(&amp;node,flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">1</span>]]) rotate(t,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">1</span>]]) </span><br><span class="line">        &#123;</span><br><span class="line">            rotate(sons[t][<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">            rotate(t,<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">0</span>]]) rotate(t,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">0</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            rotate(sons[t][<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">            rotate(t,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    maintain(sons[t][<span class="number">0</span>],<span class="keyword">false</span>);</span><br><span class="line">    maintain(sons[t][<span class="number">1</span>],<span class="keyword">true</span>);</span><br><span class="line">    maintain(t,<span class="keyword">false</span>);</span><br><span class="line">    maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span> <span class="comment">//insert(&amp;root,0,value)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t)</span><br><span class="line">    &#123;</span><br><span class="line">        sbttail++;</span><br><span class="line">        data[sbttail]=v;</span><br><span class="line">        size[sbttail]=<span class="number">1</span>;</span><br><span class="line">        sons[sbttail][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        sons[sbttail][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        t=sbttail;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        size[t]++;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;data[t]) insert(sons[t][<span class="number">0</span>],v);</span><br><span class="line">        <span class="keyword">else</span> insert(sons[t][<span class="number">1</span>],v);</span><br><span class="line">        maintain(t,v&gt;=data[t]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span> <span class="comment">//del(&amp;root,key)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    size[t]--;</span><br><span class="line">    <span class="keyword">if</span> (v==data[t]||(v&lt;data[t]&amp;&amp;sons[t][<span class="number">0</span>]==<span class="number">0</span>)||(v&gt;data[t]&amp;&amp;sons[t][<span class="number">1</span>]==<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret=data[t];</span><br><span class="line">        <span class="keyword">if</span> (sons[t][<span class="number">0</span>]==<span class="number">0</span>||sons[t][<span class="number">1</span>]==<span class="number">0</span>) t=sons[t][<span class="number">1</span>]+sons[t][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> data[t]=del(sons[t][<span class="number">0</span>],data[t]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (v&lt;data[t]) <span class="keyword">return</span> del(sons[t][<span class="number">0</span>],v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> del(sons[t][<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==size[sons[t][<span class="number">0</span>]]+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=size[sons[t][<span class="number">0</span>]]) <span class="keyword">return</span> select(sons[t][<span class="number">0</span>],k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> select(sons[t][<span class="number">1</span>],k-<span class="number">1</span>-size[sons[t][<span class="number">0</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,l,r,k;</span><br><span class="line">&#125; node;</span><br><span class="line">node d[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.l==b.l) <span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.l&lt;b.l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,ans;</span><br><span class="line">&#125; node1;</span><br><span class="line">node1 out[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op1</span><span class="params">(node1 a,node1 b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.i&lt;b.i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line"></span><br><span class="line">    sbt=<span class="number">0</span>,sbttail=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;d[i].l,&amp;d[i].r,&amp;d[i].k);</span><br><span class="line">        d[i].i=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(&amp;d[<span class="number">1</span>],&amp;d[m+<span class="number">1</span>],op);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (r&lt;d[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            sbt=<span class="number">0</span>;</span><br><span class="line">            sbttail=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=d[i].l;j&lt;=d[i].r;j++) insert(sbt,a[j]);</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=l;j&lt;d[i].l;j++) del(sbt,a[j]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=r+<span class="number">1</span>;j&lt;=d[i].r;j++) insert(sbt,a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        l=d[i].l;</span><br><span class="line">        r=d[i].r;</span><br><span class="line">        <span class="keyword">int</span> temp=select(sbt,d[i].k);</span><br><span class="line">        </span><br><span class="line">        out[i].i=d[i].i;</span><br><span class="line">        out[i].ans=data[temp];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(&amp;out[<span class="number">1</span>],&amp;out[m+<span class="number">1</span>],op1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,out[i].ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解法二、划分树">解法二、划分树</h3><p>划分树是一种类似快排的数据结构，可以快速在O（logn）的时间内直接求出某个区间内的k值。</p>
<p>然后本题就是……一棵裸的划分树，直接套即可</p>
<p>。。。。。。最后的结果是，不知道为什么比SBT要慢很多，直观的感觉上划分树没有多余的删除操作，应该会快很多的</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : VIJOS1081_SortTree</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAXN],dp[<span class="number">20</span>][MAXN],tree[<span class="number">20</span>][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maketree</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>,ls=l,rs=mid+<span class="number">1</span>,num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=mid;i&gt;=l&amp;&amp;a[i]==a[mid];i--) num++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i==l) dp[c][i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> dp[c][i]=dp[c][i-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tree[c][i]&lt;a[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[c][i]++;</span><br><span class="line">            tree[c+<span class="number">1</span>][ls]=tree[c][i];</span><br><span class="line">            ls++;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">if</span> (tree[c][i]&gt;a[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            tree[c+<span class="number">1</span>][rs]=tree[c][i];</span><br><span class="line">            rs++;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (num)</span><br><span class="line">            &#123;</span><br><span class="line">                num--;</span><br><span class="line">                dp[c][i]++;</span><br><span class="line">                tree[c+<span class="number">1</span>][ls]=tree[c][i];</span><br><span class="line">                ls++;</span><br><span class="line">            &#125; <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                tree[c+<span class="number">1</span>][rs]=tree[c][i];</span><br><span class="line">                rs++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</span><br><span class="line">    maketree(c+<span class="number">1</span>,l,mid);</span><br><span class="line">    maketree(c+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> tree[c][l];</span><br><span class="line">    <span class="keyword">int</span> s,ss,mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l==ql)</span><br><span class="line">    &#123;</span><br><span class="line">        s=<span class="number">0</span>;</span><br><span class="line">        ss=dp[c][qr];</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        s=dp[c][ql-<span class="number">1</span>];</span><br><span class="line">        ss=dp[c][qr]-s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=ss) <span class="keyword">return</span> query(c+<span class="number">1</span>,l,mid,l+s,l+s+ss-<span class="number">1</span>,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(c+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid-l+<span class="number">1</span>+ql-s,mid-l+<span class="number">1</span>+qr-s-ss,k-ss);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("zoo8.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("1.out","w",stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        tree[<span class="number">0</span>][i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(&amp;a[<span class="number">1</span>],&amp;a[n+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    maketree(<span class="number">0</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l,r,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">0</span>,<span class="number">1</span>,n,l,r,k));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="野生动物园">野生动物园</h1><h2 id="描述">描述</h2><p>cjBBteam拥有一个很大的野生动物园。这个动物园坐落在一个狭长的山谷内，这个区域从南到北被划分成N个区域，每个区域都饲养着一头狮子。这些狮子从北到南编号为1,2,3,…,N。每头狮子都有一个觅食能力值Ai，Ai越小觅食能力越强。饲养员cmdButtons决定对狮子进行M次投喂，每次投喂都选择一个区间[I,J]，从中选取觅食能力值第K强的狮子进行投喂。值得注意的是，cmdButtons不愿意对某些区域进行过多的投喂，他认为这样有悖公平。因此cmdButtons的投喂区间是互不包含的。你的任务就是算出每次投喂后，食物被哪头狮子吃掉了。</p>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="划分树" scheme="http://jcf94.github.io/tags/%E5%88%92%E5%88%86%E6%A0%91/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VIJOS P1647 不差钱 SBT]]></title>
    <link href="http://jcf94.github.io/2015/03/15/2015-03-15-vijos-p1647/"/>
    <id>http://jcf94.github.io/2015/03/15/2015-03-15-vijos-p1647/</id>
    <published>2015-03-15T08:03:37.000Z</published>
    <updated>2015-06-19T06:13:21.183Z</updated>
    <content type="html"><![CDATA[<h1 id="不差钱">不差钱</h1><h2 id="描述">描述</h2><p>同学们一起看了小品《不差钱》，LX神突发奇想，想刁难一下十八居士，他让十八居士模拟一下点菜的过程。</p>
<h2 id="输入格式">输入格式</h2><p>输入第一行为一个数price，表示价钱大于price的菜赵本山都不要。</p>
<p>以下几行表示点菜的过程，每行两个整数p，n</p>
<a id="more"></a>
<p>p=1 表示在菜谱中添加一个价格为n的菜,这是第i个1号命令，这个菜的编号就是i，</p>
<p>p=2 表示菜谱中第n号菜已卖完（但不代表菜谱中没有了这种菜），</p>
<p>p=3 表示赵本山点第n贵的菜。</p>
<p>输入文件以0结束。</p>
<p>菜的价格0&lt;n&lt;=10^6。</p>
<p>3种命令， 30%数据命令最多300次， 60%数据命令最多3000次， 100%数据命令最多100000次。</p>
<h2 id="输出格式">输出格式</h2><p>对于每个p=3， 如果第n贵的菜价格高于price，则输出“Dui bu qi,Mei you.”。</p>
<p>如果第n贵的菜价格不高于price，且没有卖完，则输出“You.”然后输出价格” m Yuan.”；</p>
<p>如果已卖完，则输出“Mei you. Zhe ge ke yi you. Zhe ge zhen mei you!”</p>
<h2 id="输入样例">输入样例</h2><blockquote>
<p>40<br>1 41<br>1 39<br>1 100<br>1 204<br>1 1<br>1 27<br>1 18<br>1 79<br>3 1<br>3 2<br>3 5<br>2 5<br>3 8<br>2 7<br>3 7<br>1 10<br>3 8<br>0</p>
</blockquote>
<h2 id="输出样例">输出样例</h2><blockquote>
<p>Dui bu qi,Mei you.<br>Dui bu qi,Mei you.<br>You. 39 Yuan.<br>Mei you. Zhe ge ke yi you. Zhe ge zhen mei you!<br>Mei you. Zhe ge ke yi you. Zhe ge zhen mei you!<br>You. 10 Yuan.</p>
</blockquote>
<h2 id="分析">分析</h2><p>题目意思表达得比较明确，本题也很适合作为SBT的模板题。</p>
<p>菜的编号就是存在SBT静态数组中的下标，只要加一个是否empty的标记即可。</p>
<p>唯一稍微可能有点问题的是出现多个相同菜价的菜时的选择问题，一开始按照普通二叉树的写法写SBT的前趋后继，后来发现这样做其实是不严谨的，因为左右旋操作的存在，虽然一开始相等的数是插入到右边去，但是不能保证不会因为左旋而把父节点旋到左子树去了，所以最后只能保证左子树的值不大于根，右子树的值不小于根，相等值是完全没办法判断的。</p>
<p>可能还是我的SBT写法不够严谨</p>
<p>……最后只好继续查找第n-1大、n-2大…第n+1大、第n+2大…直到找到不相等为止，O（k*logn）遍历一遍相等的数。</p>
<p>好在测试时间上好像还不错，不知道又没有更好的办法？</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : VIJOS1647</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> sbtnod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> key,left,right,size;</span><br><span class="line">    <span class="keyword">bool</span> empty;</span><br><span class="line">&#125; sbtnode;</span><br><span class="line"><span class="keyword">int</span> sbttail,sbt;</span><br><span class="line"></span><br><span class="line">sbtnode tree[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rrotate</span><span class="params">(<span class="keyword">int</span>&amp; t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=tree[t].left;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    tree[t].left=tree[k].right;</span><br><span class="line">    tree[k].right=t;</span><br><span class="line">    tree[k].size=tree[t].size;</span><br><span class="line">    tree[t].size=tree[tree[t].left].size+tree[tree[t].right].size+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lrotate</span><span class="params">(<span class="keyword">int</span>&amp; t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=tree[t].right;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    tree[t].right=tree[k].left;</span><br><span class="line">    tree[k].left=t;</span><br><span class="line">    tree[k].size=tree[t].size;</span><br><span class="line">    tree[t].size=tree[tree[t].left].size+tree[tree[t].right].size+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="keyword">if</span> (tree[tree[tree[t].left].left].size&gt;tree[tree[t].right].size) rrotate(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tree[tree[tree[t].left].right].size&gt;tree[tree[t].right].size) </span><br><span class="line">        &#123;</span><br><span class="line">            lrotate(tree[t].left);</span><br><span class="line">            rrotate(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (tree[tree[tree[t].right].right].size&gt;tree[tree[t].left].size) lrotate(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tree[tree[tree[t].right].left].size&gt;tree[tree[t].left].size)</span><br><span class="line">        &#123;</span><br><span class="line">            rrotate(tree[t].right);</span><br><span class="line">            lrotate(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    maintain(tree[t].left,<span class="keyword">false</span>);</span><br><span class="line">    maintain(tree[t].right,<span class="keyword">true</span>);</span><br><span class="line">    maintain(t,<span class="keyword">false</span>);</span><br><span class="line">    maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t)</span><br><span class="line">    &#123;</span><br><span class="line">        sbttail++;</span><br><span class="line">        tree[sbttail].key=v;</span><br><span class="line">        tree[sbttail].size=<span class="number">1</span>;</span><br><span class="line">        tree[sbttail].empty=<span class="keyword">false</span>;</span><br><span class="line">        t=sbttail;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        tree[t].size++;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;tree[t].key) insert(tree[t].left,v);</span><br><span class="line">        <span class="keyword">else</span> insert(tree[t].right,v);</span><br><span class="line">        maintain(t,v&gt;=tree[t].key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==tree[tree[t].left].size+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=tree[tree[t].left].size) <span class="keyword">return</span> select(tree[t].left,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> select(tree[t].right,k-<span class="number">1</span>-tree[tree[t].left].size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pri;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pri);</span><br><span class="line"></span><br><span class="line">    sbt=<span class="number">0</span>;</span><br><span class="line">    sbttail=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> p,n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p,&amp;n)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                insert(sbt,n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                tree[n].empty=<span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                n=sbttail-n+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> temp=select(sbt,n);</span><br><span class="line">                <span class="keyword">if</span> (tree[temp].key&gt;pri) <span class="built_in">printf</span>(<span class="string">"Dui bu qi,Mei you.\n"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">bool</span> done=<span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!tree[temp].empty) </span><br><span class="line">                    &#123;</span><br><span class="line">                        done=<span class="keyword">true</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"You. %d Yuan.\n"</span>,tree[temp].key);</span><br><span class="line">                    &#125; <span class="keyword">else</span> </span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">int</span> pre,p=n;</span><br><span class="line">                        <span class="keyword">while</span>(p&gt;<span class="number">1</span>&amp;&amp;(!done))</span><br><span class="line">                        &#123;</span><br><span class="line">                            p--;</span><br><span class="line">                            pre=select(sbt,p);</span><br><span class="line">                            <span class="keyword">if</span> (tree[pre].key&lt;tree[temp].key) <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">if</span> (!tree[pre].empty)</span><br><span class="line">                            &#123;</span><br><span class="line">                                done=<span class="keyword">true</span>;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"You. %d Yuan.\n"</span>,tree[temp].key);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">int</span> suc,s=n;</span><br><span class="line">                        <span class="keyword">while</span>(s&lt;n&amp;&amp;(!done))</span><br><span class="line">                        &#123;</span><br><span class="line">                            s++;</span><br><span class="line">                            suc=select(sbt,s);</span><br><span class="line">                            <span class="keyword">if</span> (tree[suc].key&gt;tree[temp].key) <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">if</span> (!tree[suc].empty)</span><br><span class="line">                            &#123;</span><br><span class="line">                                done=<span class="keyword">true</span>;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"You. %d Yuan.\n"</span>,tree[temp].key);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!done) <span class="built_in">printf</span>(<span class="string">"Mei you. Zhe ge ke yi you. Zhe ge zhen mei you!\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="不差钱">不差钱</h1><h2 id="描述">描述</h2><p>同学们一起看了小品《不差钱》，LX神突发奇想，想刁难一下十八居士，他让十八居士模拟一下点菜的过程。</p>
<h2 id="输入格式">输入格式</h2><p>输入第一行为一个数price，表示价钱大于price的菜赵本山都不要。</p>
<p>以下几行表示点菜的过程，每行两个整数p，n</p>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 4006 The kth great number 优先队列、平衡树模板题（SBT）]]></title>
    <link href="http://jcf94.github.io/2015/03/08/2015-03-08-HDU-4006-The-kth-great-number/"/>
    <id>http://jcf94.github.io/2015/03/08/2015-03-08-HDU-4006-The-kth-great-number/</id>
    <published>2015-03-08T12:27:54.000Z</published>
    <updated>2015-06-19T06:13:41.748Z</updated>
    <content type="html"><![CDATA[<h1 id="The_kth_great_number">The kth great number</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65768/65768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>Xiao  Ming  and  Xiao  Bao  are  playing  a  simple  Numbers  game.  In  a  round  Xiao  Ming  can choose  to  write  down  a  number,  or  ask  Xiao  Bao  what  the  kth  great  number  is.  Because  the number written by Xiao Ming is too much, Xiao Bao is feeling giddy. Now, try to help Xiao Bao.</p>
<a id="more"></a>
<h2 id="Input">Input</h2><p>There are several test cases. For each test case, the first line of input contains two positive integer n, k. Then n lines follow. If Xiao Ming choose to write down a number, there will be an “ I” followed by a number that Xiao Ming will write down. If Xiao Ming choose to ask Xiao Bao, there will be a “Q”, then you need to output the kth great number.</p>
<h2 id="Output">Output</h2><p>The output consists of one integer representing the largest number of islands that all lie on one line.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>3<br>I 1<br>I 2<br>I 3<br>Q<br>I 5<br>Q<br>I 4<br>Q</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>1<br>2<br>3</p>
</blockquote>
<h2 id="Hint">Hint</h2><p>Xiao Ming won’t ask Xiao Bao the kth great number when the number of the written number is smaller than k. (1=&lt;k&lt;=n&lt;=1000000).</p>
<h2 id="题意">题意</h2><p>给出一系列操作：</p>
<p>1.记录一个数；2.求第k小的数</p>
<h2 id="分析">分析</h2><h3 id="解法一、优先队列">解法一、优先队列</h3><p>题目每次询问的只是其中的一个数，这种情况下用一个堆来维护所有数的集合即可。</p>
<p>而且本题的k是一个固定值，因此只需要一个小根堆即可；若k不是一个固定值，则需要一个小根堆配合大根堆共同完成。</p>
<p>堆可以用STL中的优先队列来代替。</p>
<p>创建一个小根堆并向其加入数据，若堆中的数量大于k则弹出堆顶元素，始终保持整个堆中只有k个元素。遇到询问时，读取堆顶元素。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : HDU4006</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> cmp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("std.txt","w",stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp&gt;q;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c=getchar();</span><br><span class="line">            <span class="keyword">while</span>(c!=<span class="string">'I'</span>&amp;&amp;c!=<span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                c=getchar();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c==<span class="string">'I'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> now;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;now);</span><br><span class="line">                q.push(now);</span><br><span class="line">                <span class="keyword">if</span> (q.size()&gt;k) q.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,q.top());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解法二、平衡树">解法二、平衡树</h3><p>本题可作为平衡树模板题，虽然因为有点大材小用内存占用比较大，而且时间上并没有太大优势。</p>
<p>动态维护一棵平衡树，求k大值。</p>
<p>以下采用Size Balanced Tree完成：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : HDU4006_SBT</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 1000010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> sbtnod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> key,left,right,size;</span><br><span class="line">&#125; sbtnode;</span><br><span class="line"><span class="keyword">int</span> sbttail,sbt;</span><br><span class="line"></span><br><span class="line">sbtnode tree[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rrotate</span><span class="params">(<span class="keyword">int</span>&amp; t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=tree[t].left;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    tree[t].left=tree[k].right;</span><br><span class="line">    tree[k].right=t;</span><br><span class="line">    tree[k].size=tree[t].size;</span><br><span class="line">    tree[t].size=tree[tree[t].left].size+tree[tree[t].right].size+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lrotate</span><span class="params">(<span class="keyword">int</span>&amp; t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=tree[t].right;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    tree[t].right=tree[k].left;</span><br><span class="line">    tree[k].left=t;</span><br><span class="line">    tree[k].size=tree[t].size;</span><br><span class="line">    tree[t].size=tree[tree[t].left].size+tree[tree[t].right].size+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="keyword">if</span> (tree[tree[tree[t].left].left].size&gt;tree[tree[t].right].size) rrotate(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tree[tree[tree[t].left].right].size&gt;tree[tree[t].right].size) </span><br><span class="line">        &#123;</span><br><span class="line">            lrotate(tree[t].left);</span><br><span class="line">            rrotate(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (tree[tree[tree[t].right].right].size&gt;tree[tree[t].left].size) lrotate(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tree[tree[tree[t].right].left].size&gt;tree[tree[t].left].size)</span><br><span class="line">        &#123;</span><br><span class="line">            rrotate(tree[t].right);</span><br><span class="line">            lrotate(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    maintain(tree[t].left,<span class="keyword">false</span>);</span><br><span class="line">    maintain(tree[t].right,<span class="keyword">true</span>);</span><br><span class="line">    maintain(t,<span class="keyword">false</span>);</span><br><span class="line">    maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t)</span><br><span class="line">    &#123;</span><br><span class="line">        sbttail++;</span><br><span class="line">        tree[sbttail].key=v;</span><br><span class="line">        tree[sbttail].size=<span class="number">1</span>;</span><br><span class="line">        t=sbttail;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        tree[t].size++;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;tree[t].key) insert(tree[t].left,v);</span><br><span class="line">        <span class="keyword">else</span> insert(tree[t].right,v);</span><br><span class="line">        maintain(t,v&gt;=tree[t].key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    tree[t].size--;</span><br><span class="line">    <span class="keyword">if</span> (v==tree[t].key||(v&lt;tree[t].key&amp;&amp;tree[t].left==<span class="number">0</span>)||(v&gt;tree[t].key&amp;&amp;tree[t].right==<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ret=tree[t].key;</span><br><span class="line">        <span class="keyword">if</span> (tree[t].left==<span class="number">0</span>||tree[t].right==<span class="number">0</span>) t=tree[t].left+tree[t].right;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">else</span> tree[t].key=del(tree[t].left,tree[t].key+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;tree[t].key) ret=del(tree[t].left,v);</span><br><span class="line">        <span class="keyword">else</span> ret=del(tree[t].right,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==tree[tree[t].left].size+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=tree[tree[t].left].size) <span class="keyword">return</span> select(tree[t].left,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> select(tree[t].right,k-<span class="number">1</span>-tree[tree[t].left].size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("st.txt","w",stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));</span><br><span class="line">        sbttail=<span class="number">0</span>;</span><br><span class="line">        sbt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c=getchar();</span><br><span class="line">            <span class="keyword">while</span>(c!=<span class="string">'I'</span>&amp;&amp;c!=<span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                c=getchar();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> now;</span><br><span class="line">            <span class="keyword">if</span> (c==<span class="string">'I'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;now);</span><br><span class="line">                insert(sbt,now);</span><br><span class="line">            &#125; <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                now=select(sbt,sbttail-k+<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tree[now].key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="The_kth_great_number">The kth great number</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65768/65768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>Xiao  Ming  and  Xiao  Bao  are  playing  a  simple  Numbers  game.  In  a  round  Xiao  Ming  can choose  to  write  down  a  number,  or  ask  Xiao  Bao  what  the  kth  great  number  is.  Because  the number written by Xiao Ming is too much, Xiao Bao is feeling giddy. Now, try to help Xiao Bao.</p>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="优先队列" scheme="http://jcf94.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 1068 Girls and Boys 二分图最大独立集（最大二分匹配）]]></title>
    <link href="http://jcf94.github.io/2014/09/12/2014-09-12-HDU-1068-Girls-and-Boys/"/>
    <id>http://jcf94.github.io/2014/09/12/2014-09-12-HDU-1068-Girls-and-Boys/</id>
    <published>2014-09-12T13:30:27.000Z</published>
    <updated>2015-06-19T07:58:03.283Z</updated>
    <content type="html"><![CDATA[<h1 id="Girls_and_Boys">Girls and Boys</h1><p>Time Limit: 20000/10000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>the second year of the university somebody started a study on the romantic relations between the students. The relation “romantically involved” is defined between one girl and one boy. For the study reasons it is necessary to find out the maximum set satisfying the condition: there are no two students in the set who have been “romantically involved”. The result of the program is the number of students in such a set.</p>
<a id="more"></a>
<p>The input contains several data sets in text format. Each data set represents one set of subjects of the study, with the following description:</p>
<p>the number of students<br>the description of each student, in the following format<br>student_identifier:(number_of_romantic_relations) student_identifier1 student_identifier2 student_identifier3 …<br>or<br>student_identifier:(0)</p>
<p>The student_identifier is an integer number between 0 and n-1, for n subjects.<br>For each given data set, the program should write to standard output a line containing the result.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>7<br>0: (3) 4 5 6<br>1: (2) 4 6<br>2: (0)<br>3: (0)<br>4: (2) 0 1<br>5: (1) 0<br>6: (2) 0 1<br>3<br>0: (2) 1 2<br>1: (1) 0<br>2: (1) 0</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>5<br>2</p>
</blockquote>
<h2 id="题意">题意</h2><p>题目给定一些男女生之间相互的romantic关系，要求找出一个最大的集合，使得该集合中的所有男女生之间都不存在romantic关系。</p>
<h2 id="分析">分析</h2><p>一个二分图的最大独立集点数与最大二分匹配个数有直接的关系：</p>
<p>最大独立集点数 = 顶点数 - 最大二分匹配对数</p>
<p>故本题直接转化为求最大二分匹配即可，需要注意的是，题中给出的条件是1指向2，2也会指向1，所以最终算出来的匹配数其实是实际对数的两倍，最终被顶点数减去之前首先需要折半。</p>
<p>基础二分匹配练手题。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">ID:   Chen Fan</span><br><span class="line">PROG: hdu1068</span><br><span class="line">LANG: G++</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">&#125; node;</span><br><span class="line">node a[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> result[<span class="number">1000</span>],start[<span class="number">1000</span>],num[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.a==b.a) <span class="keyword">return</span> a.b&lt;b.b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.a&lt;b.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> s)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num[s];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=a[start[s]+i].b;</span><br><span class="line">        <span class="keyword">if</span> (!flag[now])</span><br><span class="line">        &#123;</span><br><span class="line">            flag[now]=<span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (result[now]==-<span class="number">1</span>||find(result[now]))</span><br><span class="line">            &#123;</span><br><span class="line">                result[now]=s;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,p;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d: (%d"</span>,&amp;x,&amp;p);</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> y;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y);</span><br><span class="line">                tail++;</span><br><span class="line">                a[tail].a=x;</span><br><span class="line">                a[tail].b=y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(&amp;a[<span class="number">1</span>],&amp;a[tail+<span class="number">1</span>],op);</span><br><span class="line">        <span class="keyword">int</span> o=-<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (o!=a[i].a)</span><br><span class="line">            &#123;</span><br><span class="line">                o=a[i].a;</span><br><span class="line">                start[o]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            num[o]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(result,-<span class="number">1</span>,<span class="keyword">sizeof</span>(result));</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">            <span class="keyword">if</span> (find(i)) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-ans/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Girls_and_Boys">Girls and Boys</h1><p>Time Limit: 20000/10000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>the second year of the university somebody started a study on the romantic relations between the students. The relation “romantically involved” is defined between one girl and one boy. For the study reasons it is necessary to find out the maximum set satisfying the condition: there are no two students in the set who have been “romantically involved”. The result of the program is the number of students in such a set.</p>]]>
    
    </summary>
    
      <category term="二分图匹配" scheme="http://jcf94.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 3367 Pseudoforest 最大生成树]]></title>
    <link href="http://jcf94.github.io/2014/09/09/2014-09-09-HDU-3367-Pseudoforest/"/>
    <id>http://jcf94.github.io/2014/09/09/2014-09-09-HDU-3367-Pseudoforest/</id>
    <published>2014-09-09T11:13:35.000Z</published>
    <updated>2015-06-19T07:37:15.777Z</updated>
    <content type="html"><![CDATA[<h1 id="Pseudoforest">Pseudoforest</h1><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>In graph theory, a pseudoforest is an undirected graph in which every connected component has at most one cycle. The maximal pseudoforests of G are the pseudoforest subgraphs of G that are not contained within any larger pseudoforest of G. A pesudoforest is larger than another if and only if the total value of the edges is greater than another one’s.</p>
<a id="more"></a>
<h2 id="Input">Input</h2><p>The input consists of multiple test cases. The first line of each test case contains two integers, n(0 &lt; n &lt;= 10000), m(0 &lt;= m &lt;= 100000), which are the number of the vertexes and the number of the edges. The next m lines, each line consists of three integers, u, v, c, which means there is an edge with value c (0 &lt; c &lt;= 10000) between u and v. You can assume that there are no loop and no multiple edges. The last test case is followed by a line containing two zeros, which means the end of the input.</p>
<h2 id="Output">Output</h2><p>Output the sum of the value of the edges of the maximum pesudoforest.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>3 3<br>0 1 1<br>1 2 1<br>2 0 1<br>4 5<br>0 1 1<br>1 2 1<br>2 3 1<br>3 0 1<br>0 2 2<br>0 0</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>3<br>5</p>
</blockquote>
<h2 id="题意">题意</h2><p>给出一张图，求最大生成树。要求每一个连通块上只能有一个环。</p>
<h2 id="分析">分析</h2><p>对于Kruskal来说，最小/最大生成树只是改变一下排序顺序即可。这里需要另外注意添加的就是对环的判断了：</p>
<p>如果两个节点不在同一棵树内，且分别不成环，则可合并；</p>
<p>如果两个节点在同一棵树内，但是未成环，则加上这条边之后将成环；</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,c;</span><br><span class="line">&#125; node;</span><br><span class="line">node a[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.c&gt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_father</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) father[i]=i;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x]!=x) father[x]=getfather(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    father[getfather(x)]=getfather(y);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a[i].x,&amp;a[i].y,&amp;a[i].c);</span><br><span class="line">        sort(&amp;a[<span class="number">1</span>],&amp;a[m+<span class="number">1</span>],op);</span><br><span class="line">        </span><br><span class="line">        clean_father(n);</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (getfather(a[i].x)!=getfather(a[i].y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(flag[getfather(a[i].x)]&amp;&amp;flag[getfather(a[i].y)]))</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (flag[getfather(a[i].x)]||flag[getfather(a[i].y)])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag[getfather(a[i].x)]=<span class="keyword">true</span>;</span><br><span class="line">                    flag[getfather(a[i].y)]=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                link(a[i].x,a[i].y);</span><br><span class="line">                ans+=a[i].c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">if</span> (!flag[getfather(a[i].x)])</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=a[i].c;</span><br><span class="line">            flag[getfather(a[i].x)]=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Pseudoforest">Pseudoforest</h1><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>In graph theory, a pseudoforest is an undirected graph in which every connected component has at most one cycle. The maximal pseudoforests of G are the pseudoforest subgraphs of G that are not contained within any larger pseudoforest of G. A pesudoforest is larger than another if and only if the total value of the edges is greater than another one’s.</p>]]>
    
    </summary>
    
      <category term="最小生成树" scheme="http://jcf94.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The 2014 ACM-ICPC Asia Mudanjiang Regional First Round]]></title>
    <link href="http://jcf94.github.io/2014/09/08/2014-09-08-The-2014-ACM-ICPC-Asia-Mudanjiang-Regional-First-Round/"/>
    <id>http://jcf94.github.io/2014/09/08/2014-09-08-The-2014-ACM-ICPC-Asia-Mudanjiang-Regional-First-Round/</id>
    <published>2014-09-08T03:24:57.000Z</published>
    <updated>2015-06-19T07:32:49.457Z</updated>
    <content type="html"><![CDATA[<p><del>【A】签到题</del></p>
<p><del>【B】构造</del></p>
<p><del>【C】遍历+floodfill染色或并查集</del></p>
<p>【D】DP（背包）+状态压缩 （感觉可出）</p>
<p>【E】线段树</p>
<p>【F】图形题 搜索+状态压缩</p>
<p>【G】数论，某种不定方程……ZOJ上到现在只过了4个人，还找不到题解-_-///</p>
<p><del>【H】回文数变种+dfs枚举构造</del> 又是构造-_-///</p>
<p>【I】字符串哈希+DP或者暴力</p>
<p><del>【J】直接模拟，字符串细节操作</del></p>
<a id="more"></a>
<hr>
<h1 id="A、The_Himalayas">A、The Himalayas</h1><p>Time Limit:  2 Seconds<br>Memory Limit:  65536 KB</p>
<h2 id="Description">Description</h2><p>As an artist, Bob usually need to travel around the world. He made a lot of sketch of scenery on his journey. A famous spot he have visited recently is the Himalayas. The Himalayas is a mountain range in South Asia separating the plains of the Indian subcontinent from the Qinghai-Tibet Plateau. The Himalayas include over a hundred mountains exceeding 7,200 meters in elevation.</p>
<p>One day, Bob came up with an strange idea. He wanted to know the number of mountain peaks in his paintings. As his best friend, he turned to you for help. You are given a list of N height sampling values Hi. You should determine how many peaks are there. For all i which satisfies 2 &lt;= i &lt;= N - 1, Hi is defined as a peak if and only if Hi-1 &lt; Hi &gt; Hi+1.</p>
<h2 id="Input">Input</h2><p>There are multiple test cases. The first line of input contains an integer T indicating the number of test cases. For each test case:</p>
<p>The first line contains one integer N (1 &lt;= N &lt;= 50). The next line contains N integers Hi (1 &lt;= Hi &lt;= 8844). It is guaranteed that any two adjacent height sampling values will be different.</p>
<h2 id="Output">Output</h2><p>For each test case, output the number of peaks.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>2<br>9<br>1 3 2 4 6 3 2 3 1<br>5<br>1 2 3 4 5</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>3<br>0</p>
</blockquote>
<h2 id="题意">题意</h2><p>给出一系列地形的高度，要求找到山峰的个数</p>
<h2 id="分析">分析</h2><p>稍微判断一下即可。</p>
<hr>
<h1 id="B、A_Volcanic_Island">B、A Volcanic Island</h1><p>Time Limit: 2 Seconds<br>Memory Limit: 65536 KB<br>Special Judge</p>
<h2 id="Description-1">Description</h2><p>An underwater volcano has erupted massively in somewhere of the deep Atlantis Ocean. This large eruption led to the birth of a new volcanic island, which had a shape of square. Near the island, there are N countries. All of them have claimed the sovereignty over the island.</p>
<p>After a lot of multilateral negotiation and occasional armed conflicts, the N countries decided to divide the square volcanic island equally. They partitioned the island into N x N small equal-sized square chunks. Each country could get a connected region consists of exact N chunks.</p>
<p>Two chunks A and B are called “connected” if they share an edge, or there exists another chunk C connected with both A and B. A group of chunks are called “connected region” if any two of these chunks are connected.</p>
<p>Every country want a unique region. It means the N regions should be different with each other. Two regions are considered as the same if and only if one can transform into the other by an isometry (a combination of rigid motions, including translation, rotation and reflection).</p>
<p>In a nutshell, your task is to divide a square island with N x N chunks into N connected regions with different shape. You also need to draw a map to color the regions of the map so that no two edge-adjacent regions have the same color. Most of the people in these countries believed that four different colors are enough. So you can mark these regions with at most four colors, red, green, blue and yellow.</p>
<h2 id="Input-1">Input</h2><p>There are multiple test cases. The first line of input contains an integer T indicating the number of test cases. For each test case:</p>
<p>There is only an integer N (1 &lt;= N &lt;= 100).</p>
<h2 id="Output-1">Output</h2><p>For each test case, output a valid map described above. If there is no solution, output “No solution!” instead. Please note that only four colors (‘R’, ‘G’, ‘B’ and ‘Y’) can be used to drawing the map.</p>
<h2 id="Sample_Input-1">Sample Input</h2><blockquote>
<p>2<br>2<br>5</p>
</blockquote>
<h2 id="Sample_Output-1">Sample Output</h2><blockquote>
<p>No solution!<br>YYYGR<br>YGGGR<br>YGYYR<br>BYYYR<br>BBBBR</p>
</blockquote>
<h2 id="题意-1">题意</h2><p>给出一张n*n的图，要求用4种颜色去染色，染色之后将图分成n个总数为n的颜色块。另外的一个重要要求就是这n个色块的形状不能出现重复。</p>
<h2 id="分析-1">分析</h2><p>本题采用的是special judge，所以需要自己构造出一种方案来对其进行染色。</p>
<p>赛后参考其他大神的想法，构造方案如下：</p>
<p>以7和8为例：</p>
<p>首先将其中的最后一列全部记为一种颜色，剩下的n*(n-1)部分用另外3种颜色去染：</p>
<p>前n/2种区块蛇形染色：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">n=7</span><br><span class="line">-------</span></span><br><span class="line">1111110</span><br><span class="line">2222210</span><br><span class="line">2233330</span><br><span class="line">xxx3330</span><br><span class="line">xxxxxx0</span><br><span class="line">xxxxxx0</span><br><span class="line"><span class="header">xxxxxx0</span><br><span class="line">-------</span></span><br><span class="line"><span class="header">n=8</span><br><span class="line">--------</span></span><br><span class="line">11111110</span><br><span class="line">22222210</span><br><span class="line">22333330</span><br><span class="line">44443330</span><br><span class="line">4444xxx0</span><br><span class="line">xxxxxxx0</span><br><span class="line">xxxxxxx0</span><br><span class="line"><span class="header">xxxxxxx0</span><br><span class="line">--------</span></span><br></pre></td></tr></table></figure>
<p>后n/2块一行一行从左向右将剩下部分填满:</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">n=7</span><br><span class="line">-------</span></span><br><span class="line">111111 0</span><br><span class="line">222221 0</span><br><span class="line">223333 0</span><br><span class="line"><span class="code">   333 0</span></span><br><span class="line">444</span><br><span class="line">554444 0</span><br><span class="line">655555 0</span><br><span class="line"><span class="header">666666 0</span><br><span class="line">-------</span></span><br><span class="line"><span class="header">n=8</span><br><span class="line">--------</span></span><br><span class="line">1111111 0</span><br><span class="line">2222221 0</span><br><span class="line">2233333 0</span><br><span class="line">4444333 0</span><br><span class="line">4444</span><br><span class="line"><span class="code">    555 0</span></span><br><span class="line">5555566 0</span><br><span class="line">6666667 0</span><br><span class="line"><span class="header">7777777 0</span><br><span class="line">--------</span></span><br></pre></td></tr></table></figure>
<p>以上n=7和n=8时最后对齐的方向与第一部分最后一行染色的方向相同。</p>
<p>接下来需要注意的就是第一块与最后一块的形状相同，于是作一下微调把它们变得不一样即可：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">n=7</span><br><span class="line">-------</span></span><br><span class="line">1111110</span><br><span class="line">2222210</span><br><span class="line">2233330</span><br><span class="line">4443330</span><br><span class="line">6544440</span><br><span class="line">6555550</span><br><span class="line"><span class="header">6666650</span><br><span class="line">-------</span></span><br><span class="line"><span class="header">n=8</span><br><span class="line">--------</span></span><br><span class="line">11111110</span><br><span class="line">22222210</span><br><span class="line">22333330</span><br><span class="line">44443330</span><br><span class="line">44445550</span><br><span class="line">55555670</span><br><span class="line">66666670</span><br><span class="line">67777770</span><br></pre></td></tr></table></figure>
<p>我的做法是把最后一块色块在最后一行的其中一块与最后第二块色块在n-2行的其中一块进行互换，保证相同颜色这时候还是连在一起的就行。</p>
<p>测试时，发现n等于5和6时，用这种调整方案是不行的，因为格子数太少，会出现第一块与最后一块颜色相同然后重叠到一起的情况。对包括这个在内的几种情况进行一下特判即可。</p>
<h2 id="赛后启发">赛后启发</h2><p>以后碰到这种需要自己进行构造的题目不要直接就放弃，感觉稍微花点时间还真是能想出来的，，，这种纠结程度就跟贪心似地，，，如果没别的题能做了，至少随便构造一个交一下看看呗。 </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : ZOJ3810</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">    1111110</span><br><span class="line">    2222210</span><br><span class="line">    2233330</span><br><span class="line">    4443330</span><br><span class="line">    6544440</span><br><span class="line">    6555550</span><br><span class="line">    6666650</span><br><span class="line"></span><br><span class="line">    11111110</span><br><span class="line">    22222210</span><br><span class="line">    22333330</span><br><span class="line">    44443330</span><br><span class="line">    44445550</span><br><span class="line">    55555670</span><br><span class="line">    66666670</span><br><span class="line">    67777770</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"Y\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">2</span>||n==<span class="number">3</span>||n==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"No solution!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">"YYYGR\nYGGGR\nYGYYR\nBYYYR\nBBBBR\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">"RRRRRY\nRGGGGY\nGGRRRY\nRRRGBY\nGGGGBY\nGBBBBY\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">1</span>,y=<span class="number">1</span>,fx=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[x][y]=i;</span><br><span class="line">                y+=fx;</span><br><span class="line">                <span class="keyword">if</span> ((y==n&amp;&amp;fx==<span class="number">1</span>)||(y==<span class="number">0</span>&amp;&amp;fx==-<span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    x++;</span><br><span class="line">                    fx=-fx;</span><br><span class="line">                    y+=fx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=n/<span class="number">2</span>+<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[x][y]=i;</span><br><span class="line">                y+=fx;</span><br><span class="line">                <span class="keyword">if</span> ((y==n&amp;&amp;fx==<span class="number">1</span>)||(y==<span class="number">0</span>&amp;&amp;fx==-<span class="number">1</span>)) </span><br><span class="line">                &#123;</span><br><span class="line">                    x++;</span><br><span class="line">                    y=n-y+fx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fx==-<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[n-<span class="number">2</span>][<span class="number">1</span>]=n-<span class="number">1</span>;</span><br><span class="line">                a[n][n-<span class="number">1</span>]=n-<span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                a[n-<span class="number">2</span>][n-<span class="number">1</span>]=n-<span class="number">1</span>;</span><br><span class="line">                a[n][<span class="number">1</span>]=n-<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> words[]=&#123;<span class="string">'R'</span>,<span class="string">'G'</span>,<span class="string">'B'</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span> (a[i][j]==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Y"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,words[a[i][j]%<span class="number">3</span>]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="C、Untrusted_Patrol">C、Untrusted Patrol</h1><p>Time Limit:  3 Seconds<br>Memory Limit:  65536 KB</p>
<h2 id="Description-2">Description</h2><p>Edward is a rich man. He owns a large factory for health drink production. As a matter of course, there is a large warehouse in the factory.</p>
<p>To ensure the safety of drinks, Edward hired a security man to patrol the warehouse. The warehouse has N piles of drinks and M passageways connected them (warehouse is not big enough). When the evening comes, the security man will start to patrol the warehouse following a path to check all piles of drinks.</p>
<p>Unfortunately, Edward is a suspicious man, so he sets sensors on K piles of the drinks. When the security man comes to check the drinks, the sensor will record a message. Because of the memory limit, the sensors can only record for the first time of the security man’s visit.</p>
<p>After a peaceful evening, Edward gathered all messages ordered by recording time. He wants to know whether is possible that the security man has checked all piles of drinks. Can you help him?</p>
<p>The security man may start to patrol at any piles of drinks. It is guaranteed that the sensors work properly. However, Edward thinks the security man may not works as expected. For example, he may digs through walls, climb over piles, use some black magic to teleport to anywhere and so on. </p>
<h2 id="Input-2">Input</h2><p>There are multiple test cases. The first line of input is an integer T indicates the number of test cases. For each test case:</p>
<p>The first line contains three integers N (1 &lt;= N &lt;= 100000), M (1 &lt;= M &lt;= 200000) and K (1 &lt;= K &lt;= N).</p>
<p>The next line contains K distinct integers indicating the indexes of piles (1-based) that have sensors installed. The following M lines, each line contains two integers Ai and Bi (1 &lt;= Ai, Bi &lt;= N) which indicates a bidirectional passageway connects piles Ai and Bi.</p>
<p>Then, there is an integer L (1 &lt;= L &lt;= K) indicating the number of messages gathered from all sensors. The next line contains L distinct integers. These are the indexes of piles where the messages came from (each is among the K integers above), ordered by recording time.</p>
<h2 id="Output-2">Output</h2><p>For each test case, output “Yes” if the security man worked normally and has checked all piles of drinks, or “No” if not.</p>
<h2 id="Sample_Input-2">Sample Input</h2><blockquote>
<p>2<br>5 5 3<br>1 2 4<br>1 2<br>2 3<br>3 1<br>1 4<br>4 5<br>3<br>4 2 1<br>5 5 3<br>1 2 4<br>1 2<br>2 3<br>3 1<br>1 4<br>4 5<br>3<br>4 1 2</p>
</blockquote>
<h2 id="Sample_Output-2">Sample Output</h2><blockquote>
<p>No<br>Yes</p>
</blockquote>
<h2 id="题意-2">题意</h2><p>给出一张图，图中的某些结点上装着传感器，访问到装着传感器的节点时，就会被记录下来。现在给出一串传感器记录下来的时间访问序列，询问一个人是否能够按照序列的顺序遍历完整张图。</p>
<h2 id="分析-2">分析</h2><h3 id="1-floodfill染色：">1.floodfill染色：</h3><p>当时看到这道题想到的只有暴力DFS，写出来之后发现由于floodfill染色的性质，每个点只是访问一次就够了，效率还是很优的。</p>
<p>基本想法是从时间序列第一个点开始，按时间顺序扩展每一个点，所有标记着传感器的点不可达。扩展完第一个点之后，判断一下下一个点是否能够到达，若不能到达即说明按顺序遍历不可能；否则继续扩展下一个点。</p>
<p>对每一个结点设置四种标记：无标记、已访问、不可访问、能够访问；</p>
<p>普通点在到达之前无标记，到达之后标记为已访问；传感器结点在到达之前标记为不可访问，到达之后标记为能够访问，搜过之后标记为已访问；</p>
<p>一、直接搜索L个传感器的序列，首先将所有拥有传感器的序列全部标记为不可访问；</p>
<p>二、从第一个开始，扩展遍历所有能到达的点，遍历时的点有两种状态：无标记（普通点）和不可/能够访问（带有传感器的点）。无标记点可以直接改为已访问，不可访问的点则标记为能够访问。遍历完之后将该传感器点标为已访问；</p>
<p>三、判断下一个传感器点的状况是不是能够访问，若是则表示可以从之前的传感器点不经过任何序列后面的点而到达，若标记是不可访问则表示不可能从之前的传感器点到达这里，那就直接输出NO了。</p>
<p>四、之后重复二、三过程，直到搜完所有L个点，判断整张图的连通性，即是不是所有点都能到达。</p>
<p>对于K和L，个人觉得描述的最后一句是有用的，就是L只会小于等于K，不一定要等于K。然后第一次没有加这个特判，结果WA了……加上之后AC，-_-////真的是我想多了吗</p>
<p>然后就是前向星存储。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : ZOJ3811</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125; node;</span><br><span class="line">node a[<span class="number">400010</span>];</span><br><span class="line"><span class="keyword">int</span> start[<span class="number">100010</span>],num[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> flag[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sen[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    flag[s]=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num[s];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> next=a[start[s]+i].y;</span><br><span class="line">        <span class="keyword">if</span> (flag[next]==<span class="number">0</span>) dfs(next);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag[next]==<span class="number">1</span>) flag[next]=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sen[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            a[i*<span class="number">2</span>].x=x;</span><br><span class="line">            a[i*<span class="number">2</span>].y=y;</span><br><span class="line">            a[i*<span class="number">2</span>-<span class="number">1</span>].x=y;</span><br><span class="line">            a[i*<span class="number">2</span>-<span class="number">1</span>].y=x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sen[i]);</span><br><span class="line">            flag[sen[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (l&lt;k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        m*=<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">memset</span>(start,<span class="number">0</span>,<span class="keyword">sizeof</span>(start));</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        sort(&amp;a[<span class="number">1</span>],&amp;a[m+<span class="number">1</span>],op);</span><br><span class="line">        <span class="keyword">int</span> o=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (o!=a[i].x) </span><br><span class="line">            &#123;</span><br><span class="line">                o=a[i].x;</span><br><span class="line">                start[o]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            num[o]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        flag[sen[<span class="number">1</span>]]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">bool</span> outp=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">        <span class="keyword">if</span> (flag[sen[i]]==<span class="number">2</span>) dfs(sen[i]);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            outp=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (outp)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        <span class="keyword">if</span> (flag[i]!=<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            outp=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (outp) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-并查集">2.并查集</h3><p>大体思路与上面类似，把1中的染色部分改成扩展一个可以任意到达的无限集即可。</p>
<h2 id="启发">启发</h2><p>题目中给出了明显的顺序的话，可以作为一个突破点。</p>
<hr>
<h1 id="H、Generalized_Palindromic_Number">H、Generalized Palindromic Number</h1><p>Time Limit: 2 Seconds<br>Memory Limit: 65536 KB</p>
<h2 id="Description-3">Description</h2><p>A number that will be the same when it is written forwards or backwards is known as a palindromic number. For example, 1234321 is a palindromic number.</p>
<p>We call a number generalized palindromic number, if after merging all the consecutive same digits, the resulting number is a palindromic number. For example, 122111 is a generalized palindromic number. Because after merging, 122111 turns into 121 which is a palindromic number.</p>
<p>Now you are given a positive integer N, please find the largest generalized palindromic number less than N.</p>
<h2 id="Input-3">Input</h2><p>There are multiple test cases. The first line of input contains an integer T (about 5000) indicating the number of test cases. For each test case:</p>
<p>There is only one integer N (1 &lt;= N &lt;= 1018).</p>
<h2 id="Output-3">Output</h2><p>For each test case, output the largest generalized palindromic number less than N.</p>
<h2 id="Sample_Input-3">Sample Input</h2><blockquote>
<p>4<br>12<br>123<br>1224<br>1122</p>
</blockquote>
<h2 id="Sample_Output-3">Sample Output</h2><blockquote>
<p>11<br>121<br>1221<br>1121</p>
</blockquote>
<h2 id="题意-3">题意</h2><p>如果一个数把相邻数位相同的部分都合并之后它还是一个回文数，那就称其为广义回文数。现在给出一个n，要求找到小于n的最大的广义回文数。</p>
<h2 id="分析-3">分析</h2><p>开始时想从某种贪心的方法出发手动构造这样一个数出来，很可惜失败了，这里每次摆数字的判断有些麻烦。</p>
<p>赛后尝试用DFS进行构造：</p>
<p>每次从前后同时向中间构造，保证回文性。构造时先在高位摆上一个值，然后从低位向中间摆相同的数，中间注意剪枝判断。</p>
<p>注意摆值的时候上限与更高一位是不是与n相应位相同有关。如果前一位与原数不同，则可以从9开始摆，否则不能比原数大。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : ZOJ3816</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tail,nn[<span class="number">30</span>],num[<span class="number">30</span>],ans[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=r;i&gt;=l;i--) </span><br><span class="line">    <span class="keyword">if</span> (a[i]!=b[i]) <span class="keyword">return</span> a[i]&gt;b[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> high,<span class="keyword">int</span> low,<span class="keyword">bool</span> flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (high&lt;low)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(nn,num,<span class="number">1</span>,tail)&amp;&amp;check(num,ans,<span class="number">1</span>,tail))</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++) ans[i]=num[i];</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        <span class="keyword">if</span> (flag) end=nn[high];</span><br><span class="line">        <span class="keyword">else</span> end=<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=end;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now=low;</span><br><span class="line">            <span class="keyword">if</span> (check(ans,num,high+<span class="number">1</span>,tail)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            num[high]=i;</span><br><span class="line">            <span class="keyword">if</span> (num[high]!=num[high+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (now&lt;=high)</span><br><span class="line">                &#123;</span><br><span class="line">                    num[now]=num[high];</span><br><span class="line">                    now++;</span><br><span class="line">                    dfs(high-<span class="number">1</span>,now,flag&amp;&amp;i==end);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> dfs(high-<span class="number">1</span>,low,flag&amp;&amp;i==end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%llu"</span>,&amp;n);</span><br><span class="line">        </span><br><span class="line">        tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            tail++;</span><br><span class="line">            nn[tail]=n%<span class="number">10</span>;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">        dfs(tail,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=tail;i&gt;=<span class="number">1</span>;i--) <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="启发-1">启发</h2><p>实在不行可以暴搜啊！！！！！</p>
<hr>
<h1 id="J、Pretty_Poem">J、Pretty Poem</h1><p>Time Limit:  2 Seconds<br>Memory Limit:  65536 KB</p>
<h2 id="Description-4">Description</h2><p>Poetry is a form of literature that uses aesthetic and rhythmic qualities of language. There are many famous poets in the contemporary era. It is said that a few ACM-ICPC contestants can even write poetic code. Some poems has a strict rhyme scheme like “ABABA” or “ABABCAB”. For example, “niconiconi” is composed of a rhyme scheme “ABABA” with A = “ni” and B = “co”.</p>
<p>More technically, we call a poem pretty if it can be decomposed into one of the following rhyme scheme: “ABABA” or “ABABCAB”. The symbol A, B and C are different continuous non-empty substrings of the poem. By the way, punctuation characters should be ignored when considering the rhyme scheme.</p>
<p>You are given a line of poem, please determine whether it is pretty or not.</p>
<h2 id="Input-4">Input</h2><p>There are multiple test cases. The first line of input contains an integer T indicating the number of test cases. For each test case:</p>
<p>There is a line of poem S (1 &lt;= length(S) &lt;= 50). S will only contains alphabet characters or punctuation characters.</p>
<h2 id="Output-4">Output</h2><p>For each test case, output “Yes” if the poem is pretty, or “No” if not.</p>
<h2 id="Sample_Input-4">Sample Input</h2><blockquote>
<p>3<br>niconiconi~<br>pettan,pettan,tsurupettan<br>wafuwafu</p>
</blockquote>
<h2 id="Sample_Output-4">Sample Output</h2><blockquote>
<p>Yes<br>Yes<br>No</p>
</blockquote>
<h2 id="分析-4">分析</h2><p>由于本题数据量最大只有50个字符，可以直接模拟枚举。</p>
<p>首先枚举AB，满足AB匹配之后，再判断AB长度的三倍与总长度之间的关系，分类讨论。</p>
<p>算法就是这么个算法，但是实现起来超容易出错……</p>
<p>附上一组处理得比较全面的测试数据</p>
<blockquote>
<p>8<br>xyxyxxy<br>xyxyyxy<br>xxxxyxx<br>xxxxx<br>xyxyx<br>xxxxxxxx<br>xxxxxxxxxxxxx<br>xyzzxyzxyzzxyzxyzxyzzxyz</p>
</blockquote>
<h2 id="启发-2">启发</h2><p>题目数据量才这么点。。。果断应该直接上的</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><del>【A】签到题</del></p>
<p><del>【B】构造</del></p>
<p><del>【C】遍历+floodfill染色或并查集</del></p>
<p>【D】DP（背包）+状态压缩 （感觉可出）</p>
<p>【E】线段树</p>
<p>【F】图形题 搜索+状态压缩</p>
<p>【G】数论，某种不定方程……ZOJ上到现在只过了4个人，还找不到题解-_-///</p>
<p><del>【H】回文数变种+dfs枚举构造</del> 又是构造-_-///</p>
<p>【I】字符串哈希+DP或者暴力</p>
<p><del>【J】直接模拟，字符串细节操作</del></p>]]>
    
    </summary>
    
      <category term="ACM-ICPC" scheme="http://jcf94.github.io/tags/ACM-ICPC/"/>
    
      <category term="ACM_比赛" scheme="http://jcf94.github.io/categories/ACM-%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 1811 Rank of Tetris 拓扑排序+并查集]]></title>
    <link href="http://jcf94.github.io/2014/09/07/2014-09-07-HDU-1811-Rank-of-Tetris/"/>
    <id>http://jcf94.github.io/2014/09/07/2014-09-07-HDU-1811-Rank-of-Tetris/</id>
    <published>2014-09-07T08:03:38.000Z</published>
    <updated>2015-06-19T07:05:17.665Z</updated>
    <content type="html"><![CDATA[<h1 id="Rank_of_Tetris">Rank of Tetris</h1><p>Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>自从Lele开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。</p>
<p>为了更好的符合那些爱好者的喜好，Lele又想了一个新点子：他将制作一个全球Tetris高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。</p>
<p>终于，Lele要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1,并且编号越大，RP就越高。 同时Lele从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有三种情况，分别是”A &gt; B”,”A = B”,”A &lt; B”，分别表示A的Rating高于B,等于B,小于B。</p>
<a id="more"></a>
<p>现在Lele并不是让你来帮他制作这个高手榜，他只是想知道，根据这些信息是否能够确定出这个高手榜，是的话就输出”OK”。否则就请你判断出错的原因，到底是因为信息不完全（输出”UNCERTAIN”），还是因为这些信息中包含冲突（输出”CONFLICT”）。</p>
<p>注意，如果信息中同时包含冲突且信息不完全，就输出”CONFLICT”。</p>
<h2 id="Input">Input</h2><p>本题目包含多组测试，请处理到文件结束。</p>
<p>每组测试第一行包含两个整数N,M(0&lt;=N&lt;=10000,0&lt;=M&lt;=20000),分别表示要排名的人数以及得到的关系数。 接下来有M行，分别表示这些关系</p>
<h2 id="Output">Output</h2><p>对于每组测试，在一行里按题目要求输出</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>3<br>> 1<br>&lt; 2<br>> 2<br>4<br>= 2<br>> 3<br>> 0<br>> 1<br>3<br>> 0<br>> 2<br>&lt; 1</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>OK<br>CONFLICT<br>UNCERTAIN</p>
</blockquote>
<h2 id="题意">题意</h2><p>给定一些点对之间的关系（大于小于相等），判断是否发生冲突。</p>
<h2 id="分析">分析</h2><p>对于冲突判断，直观的想法就是拓扑排序。以大于号或者小于号方向作为拓扑序的方向，如果处理时出现违反拓扑序列的情况则可判断为冲突。</p>
<p>然后这道题还有另外一个问题就是相等情况的处理，如果直接按照拓扑排序对其进行分析，则可能发生错误。为了解决这个问题，可以用并查集进行预处理，将所有相等的点缩成1个点，然后进行后序的拓扑排序。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">10001</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_father</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) father[i]=i;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x]!=x) father[x]=getfather(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    father[getfather(x)]=getfather(y);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x[<span class="number">20001</span>],y[<span class="number">20001</span>],rd[<span class="number">10001</span>],num[<span class="number">10001</span>],start[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">char</span> z[<span class="number">20001</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">&#125; node;</span><br><span class="line">node a[<span class="number">20001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.a&lt;b.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        clean_father(n);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %c %d"</span>,&amp;x[i],&amp;z[i],&amp;y[i]);</span><br><span class="line">            <span class="keyword">if</span> (z[i]==<span class="string">'='</span>) link(x[i],y[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) rd[i]=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">        &#123;</span><br><span class="line">            rd[getfather(i)]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (rd[i]==<span class="number">0</span>) tot++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">switch</span>(z[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">                tail++;</span><br><span class="line">                a[tail].a=getfather(x[i]);</span><br><span class="line">                a[tail].b=getfather(y[i]);</span><br><span class="line">                rd[getfather(y[i])]++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                tail++;</span><br><span class="line">                a[tail].a=getfather(y[i]);</span><br><span class="line">                a[tail].b=getfather(x[i]);</span><br><span class="line">                rd[getfather(x[i])]++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(&amp;a[<span class="number">1</span>],&amp;a[tail+<span class="number">1</span>],op);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> o=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) num[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].a!=o)</span><br><span class="line">            &#123;</span><br><span class="line">                o=a[i].a;</span><br><span class="line">                start[o]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            num[o]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span> (rd[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            top++;</span><br><span class="line">            <span class="built_in">stack</span>[top]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (top==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"CONFLICT\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="keyword">false</span>,done=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (top&gt;<span class="number">0</span>&amp;&amp;(!done))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (top&gt;<span class="number">1</span>) flag=<span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> now=<span class="built_in">stack</span>[top];</span><br><span class="line">            top--;tot--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num[now];i++)</span><br><span class="line">            &#123;</span><br><span class="line">                rd[a[start[now]+i].b]--;</span><br><span class="line">                <span class="keyword">if</span> (rd[a[start[now]+i].b]==<span class="number">0</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    top++;</span><br><span class="line">                    <span class="built_in">stack</span>[top]=a[start[now]+i].b;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (rd[a[start[now]+i].b]&lt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    done=<span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num[now]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tot&gt;<span class="number">0</span>||done) <span class="built_in">printf</span>(<span class="string">"CONFLICT\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag) <span class="built_in">printf</span>(<span class="string">"UNCERTAIN\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Rank_of_Tetris">Rank of Tetris</h1><p>Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>自从Lele开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。</p>
<p>为了更好的符合那些爱好者的喜好，Lele又想了一个新点子：他将制作一个全球Tetris高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。</p>
<p>终于，Lele要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1,并且编号越大，RP就越高。 同时Lele从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有三种情况，分别是”A &gt; B”,”A = B”,”A &lt; B”，分别表示A的Rating高于B,等于B,小于B。</p>]]>
    
    </summary>
    
      <category term="并查集" scheme="http://jcf94.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="拓扑排序" scheme="http://jcf94.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
</feed>