<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Chenfan's blog]]></title>
  <subtitle><![CDATA[It's the way I choose.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jcf94.github.io/"/>
  <updated>2015-05-31T03:59:51.840Z</updated>
  <id>http://jcf94.github.io/</id>
  
  <author>
    <name><![CDATA[jcf94]]></name>
    <email><![CDATA[jcf94@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[数字视频图像处理复习笔记]]></title>
    <link href="http://jcf94.github.io/2015/05/30/2015-05-30-shuzishipin/"/>
    <id>http://jcf94.github.io/2015/05/30/2015-05-30-shuzishipin/</id>
    <published>2015-05-30T13:42:29.000Z</published>
    <updated>2015-05-31T03:59:51.840Z</updated>
    <content type="html"><![CDATA[<h2 id="第一章_绪论">第一章 绪论</h2><h3 id="视频图像处理的概念">视频图像处理的概念</h3><p>视频是一组图像在<strong>时间轴</strong>上的<strong>有序排列</strong>，是二维图像在一维时间轴上构成的<strong>图像序列</strong>，又称<strong>动态图像、活动图像、运动图像</strong>。不止包含了静止图像的内容，还包含了目标的<strong>运动信息</strong>和<strong>客观世界随时间变化的信息</strong>。</p>
<p>序列&gt;帧&gt;像素</p>
<h3 id="视频图像处理系统的组成">视频图像处理系统的组成</h3><ol>
<li>图像<strong>采集</strong></li>
<li>图像<strong>显示</strong></li>
<li>图像<strong>存储</strong></li>
<li>图像<strong>通信</strong></li>
<li>图像<strong>处理和分析</strong></li>
</ol>
<a id="more"></a>
<p>图像处理和分析：</p>
<ol>
<li>图像变换</li>
<li>图像编码压缩</li>
<li>图像增强复原</li>
<li>图像分割</li>
<li>图像理解和识别</li>
</ol>
<hr>
<h2 id="第二章_视频图象的表示">第二章 视频图象的表示</h2><h3 id="图像的基本概念">图像的基本概念</h3><ol>
<li>光通量：光源辐射出来的光功率，单位流明（lm）</li>
<li>照度：单位面积上的光通量，单位勒克斯（lx，$1ls=1lm/m^2$）</li>
<li>亮度：观察者感觉光的量度，有主观性，又称辉度</li>
<li>视敏度：人眼对不同波长可见光的敏感程度</li>
<li>亮度适应级：一定条件下，人眼的亮度适应区间</li>
</ol>
<h3 id="分辨率">分辨率</h3><ol>
<li>图像分辨率<br>图像中存储的信息，单位像素/英寸（pixel per inch, ppi）</li>
<li>显示分辨率<br>构成画面像素点的多少，用宽高像素*像素表示</li>
<li>打印分辨率<br>又叫输出分辨率，决定打印机打印的惊喜程度，单位点/英寸（dot per inch, dpi）</li>
</ol>
<h3 id="人眼的视觉特性">人眼的视觉特性</h3><table>
<thead>
<tr>
<th></th>
<th>锥状细胞</th>
<th>柱状细胞</th>
</tr>
</thead>
<tbody>
<tr>
<td>结构</td>
<td>一个细胞连一个神经末梢</td>
<td>几个细胞连一个神经末梢</td>
</tr>
<tr>
<td>功能</td>
<td>感光/感色，区分细节</td>
<td>感光，提供整体形象</td>
</tr>
<tr>
<td>作用时间</td>
<td>强光下、白天</td>
<td>弱光下、黑夜</td>
</tr>
<tr>
<td>视觉</td>
<td>亮视觉</td>
<td>暗视觉</td>
</tr>
</tbody>
</table>
<p>锥状细胞分为<strong>红敏、绿敏、蓝敏</strong>。</p>
<p>三基色原理。</p>
<p>影响人眼分辨力的因素：<strong>环境照度、景物相对对比度、被观察物体的距离和运动状态</strong></p>
<ol>
<li>人眼对亮度响应有<strong>非线性特性，对灰度误差不敏感</strong></li>
<li>人眼对<strong>亮度</strong>信号的空间分辨率大于对色度信号的空间分辨率</li>
<li>人眼容易感觉到<strong>边缘位置</strong>的变化，而对于边缘部分的灰度误差不敏感</li>
<li>时间域的<strong>掩蔽效应</strong>，当视频图像序列中相邻画面的变化剧烈（如场景切换）时，人眼的分辨率会突然剧烈的下降</li>
<li><strong>视觉惰性</strong>，人眼的亮度感觉总是滞后于实际亮度，<strong>视觉暂留</strong></li>
<li><strong>闪烁感觉</strong>，周期性光脉冲频率高到一定程度后人眼无法区分</li>
</ol>
<h3 id="颜色模型">颜色模型</h3><table>
<thead>
<tr>
<th></th>
<th>RGB</th>
<th>HSI</th>
<th>YUV</th>
</tr>
</thead>
<tbody>
<tr>
<td>主要用于</td>
<td>计算机显示器</td>
<td>描述人眼的视觉特性</td>
<td>电视信号，彩色兼容黑白</td>
</tr>
<tr>
<td>说明</td>
<td>分别表示红绿蓝三色的分解采样量</td>
<td>色调H，饱和度S，密度I（对应亮度和灰度）</td>
<td>亮度Y，色度U、V</td>
</tr>
</tbody>
</table>
<p><strong>真彩色</strong>：每个像素值都用三基色分量描述</p>
<p><strong>伪彩色</strong>：每个像素颜色采用颜色查找表表现</p>
<p><strong>直接色</strong>：每个像素点的RGB值分别用查找表表现</p>
<h3 id="图像的数字化">图像的数字化</h3><p>视频图象数字化两种方法：</p>
<ol>
<li>复合编码：先数字化再分离<br>先用高速模/数转换器对模拟视频（彩色全电视信号）进行数字化，再在数字域中分离</li>
<li>分量编码：先分离再数字化<br>从模拟视频（彩色电视信号）中分离出彩色分量的亮度和色度，得到YUV或YIQ分量，再用3个模/数转换器对3个分量分别数字化</li>
</ol>
<p>采样方式：隔行采样</p>
<h3 id="图像量化">图像量化</h3><ol>
<li>有记忆量化和无记忆量化：取样点是否独立</li>
<li>均匀量化和非均匀量化：量化步长是否一致</li>
<li>标量量化和矢量量化：<br>标量量化：一维量化，所有取样使用同一个量化器进行量化，每个取样的量化都和其他所有取样无关(无记忆量化)，常用均方误差量化器<br>矢量量化：多维量化，先将K个取样值序列形成K维空间中的一个矢量,然后将此矢量进行量化</li>
</ol>
<p>非均匀量化：</p>
<ol>
<li>基于人的视觉特性特点，对于亮度值急剧变化的部分，粗量化；对亮度值变化比较平缓的部分，细量化。</li>
<li>计算所有可能的亮度值出现的概率分布，对于出现概率大的那些亮度值，细量化；对于出现概率小的那些亮度值，粗量化</li>
</ol>
<p>非均匀采样：在细节多区域采样密，在平滑区域采样少</p>
<p>空间分辨率：图像的大小，空间分辨率=最大行数*每行的最大像素数。</p>
<p>灰度分辨率：一个像素值单位幅度上包含的灰度级，用一个字节存储一个像素值，则灰度级数为256</p>
<h3 id="图像格式">图像格式</h3><table>
<thead>
<tr>
<th></th>
<th>矢量图形</th>
<th>位图图像</th>
</tr>
</thead>
<tbody>
<tr>
<td>定义</td>
<td>图形，指用一组绘图指令描述和记录的各种图形，包括直线、弧线、圆、矩形的大小形状等</td>
<td>图像，由一组计算机内存位组成，这些位定义了图像中每个像素点的亮度和颜色</td>
</tr>
<tr>
<td>文件内容</td>
<td>图形指令</td>
<td>图像点阵数据</td>
</tr>
<tr>
<td>生成</td>
<td>相应软件生成</td>
<td>用绘图软件生成；用彩色扫描仪扫描二维图片；用摄像机以及帧捕获设备获得数字化画面</td>
</tr>
<tr>
<td>所需磁盘空间</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>常用格式</td>
<td>WHF、DRW、CDR、DXF、EPS、FLI、FLC、CGM等</td>
<td>BMP、PCX、GIF、TIFF</td>
</tr>
</tbody>
</table>
<h2 id="第三章_图像变换">第三章 图像变换</h2><h2 id="第六章_视频图像分割">第六章 视频图像分割</h2><h2 id="第九章_视频跟踪">第九章 视频跟踪</h2><h2 id="第十章_视频压缩编码">第十章 视频压缩编码</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="第一章_绪论">第一章 绪论</h2><h3 id="视频图像处理的概念">视频图像处理的概念</h3><p>视频是一组图像在<strong>时间轴</strong>上的<strong>有序排列</strong>，是二维图像在一维时间轴上构成的<strong>图像序列</strong>，又称<strong>动态图像、活动图像、运动图像</strong>。不止包含了静止图像的内容，还包含了目标的<strong>运动信息</strong>和<strong>客观世界随时间变化的信息</strong>。</p>
<p>序列&gt;帧&gt;像素</p>
<h3 id="视频图像处理系统的组成">视频图像处理系统的组成</h3><ol>
<li>图像<strong>采集</strong></li>
<li>图像<strong>显示</strong></li>
<li>图像<strong>存储</strong></li>
<li>图像<strong>通信</strong></li>
<li>图像<strong>处理和分析</strong></li>
</ol>]]>
    
    </summary>
    
      <category term="复习笔记" scheme="http://jcf94.github.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="我的大学" scheme="http://jcf94.github.io/categories/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[现代交换原理复习笔记]]></title>
    <link href="http://jcf94.github.io/2015/05/28/2015-05-28-xiandaijiaohuan/"/>
    <id>http://jcf94.github.io/2015/05/28/2015-05-28-xiandaijiaohuan/</id>
    <published>2015-05-28T15:56:10.000Z</published>
    <updated>2015-05-31T04:00:08.574Z</updated>
    <content type="html"><![CDATA[<p>感觉我也是醉醉的，人比较懒，愿意打字都不愿意动笔了……</p>
<p>发现markdown用来写笔记真心好用，顺手发出来好了，如果未来有学弟学妹们能发现这个…</p>
<p>那就算你们太走运啦！！！</p>
<p>倾情打造！！！复习笔记！！！</p>
<hr>
<h2 id="第1章_绪论">第1章 绪论</h2><h3 id="交换">交换</h3><p>所谓交换，就是在通信网上，负责在通信的源和目的终端之间建立通信信道，传送通信信息的机制，也就是根据目的地，在源和目的终端之间传送通信信息。网内的任一个用户可以按着自己的要求与网内的其他用户进行信息交换</p>
<a id="more"></a>
<ul>
<li><p>交换式通信网通信过程</p>
<blockquote>
<ol>
<li>呼叫建立阶段</li>
<li>消息传输阶段</li>
<li>释放阶段</li>
</ol>
</blockquote>
</li>
<li><p>交换方式</p>
<blockquote>
<p>电路交换 CS （Circuit Switch）<br>报文交换 MS （Message Switch）<br>分组交换 PS （Package Switch）</p>
<blockquote>
<p>数据报 Datagram<br>虚电路 VC (Virtual Circuit)</p>
<blockquote>
<p>交换虚电路 SVC （Switching Virtual Circuit）<br>永久虚电路 PVC （Permanent Virtual Circuit）</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th>分类</th>
<th>电路交换</th>
<th>报文交换</th>
<th>分组交换</th>
</tr>
</thead>
<tbody>
<tr>
<td>方式</td>
<td>通信之前先建立通路，通信时通路独占，通信结束，通路释放</td>
<td>无需建立通路（无连接）</td>
<td>将报文分成若干个报文组（packet)，每个报文组要加上地址、编号、校验码，然后以报文组为存储转发单位逐节点转发，到达目的地再按编号组装成原报文</td>
</tr>
<tr>
<td>接续时间</td>
<td>较长</td>
<td>较短</td>
<td>较短</td>
</tr>
<tr>
<td>传输时延</td>
<td>短</td>
<td>长，偏差很大</td>
<td>较短</td>
</tr>
<tr>
<td>数据可靠性</td>
<td>一般</td>
<td>较高</td>
<td>高</td>
</tr>
<tr>
<td>对业务过载的反应</td>
<td>拒绝接收呼叫</td>
<td>信息存储在交换机中，传输时延加大</td>
<td>减小用户输入信息流量（流量控制），时延加大</td>
</tr>
<tr>
<td>异种终端之间的相互通信</td>
<td>不可</td>
<td>可</td>
<td>可</td>
</tr>
<tr>
<td>电路利用率</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>交换机成本</td>
<td>较低</td>
<td>较高</td>
<td>较高</td>
</tr>
<tr>
<td>实时会话业务</td>
<td>适用</td>
<td>不适用</td>
<td>轻负载下适用</td>
</tr>
</tbody>
</table>
<ul>
<li>分组交换<blockquote>
<p>基于<strong>统计时分复用</strong>，实时性较好，线路利用率高。</p>
<ol>
<li>数据报方式:以分组为基本单位逐节点转发，且不同节点可沿不同的路径传输，类似报文交换。</li>
<li>虚电路:首先网络在通信两端建立逻辑连接，然后用户数据以分组为单位沿该路径顺序传送到达终点（逐节点转发）。类似于电路交换，但通路不是一直占用。</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="程控交换机">程控交换机</h3><ul>
<li><p>交换机网络接续方式</p>
<blockquote>
<ol>
<li>空分</li>
<li>时分</li>
</ol>
</blockquote>
</li>
<li><p>控制方式</p>
<blockquote>
<ol>
<li>集中控制</li>
<li>分级控制</li>
<li>全分散控制</li>
</ol>
</blockquote>
</li>
<li><p>五级长途电话网</p>
<blockquote>
<ol>
<li>省间中心 C1</li>
<li>省中心 C2</li>
<li>地区中心 C3</li>
<li>县中心 C4</li>
<li>本地端局 C5</li>
</ol>
</blockquote>
</li>
<li><p>三级国际电话网</p>
<blockquote>
<ol>
<li>国际中心局 CT1：各CT1之间均有直达链路</li>
<li>CT2</li>
<li>接口局 CT3</li>
</ol>
</blockquote>
</li>
<li><p>路由分类</p>
<blockquote>
<ol>
<li>基干路由：一部分是C1级交换中心之间的低呼损电路群；另一部分是同一交换区内相邻级之间的低呼损电路群。基干路由上的话务量不允许溢出</li>
<li>直达路由：先选择高效直达路由。当高效直达路由忙时，选择迂回路由。选择的顺序是“由远而近”，即先在被叫端“自下而上”选择。然后在主叫端“自上而下”选择。最后选择最终路由。</li>
</ol>
</blockquote>
</li>
<li><p>本地电话网</p>
<blockquote>
<ol>
<li>去话汇接</li>
<li>来话汇接</li>
<li>来去话汇接</li>
<li>集中汇接</li>
<li>主辅汇接</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="第2章_交换机理论基础">第2章 交换机理论基础</h2><ul>
<li>话务量<br>考察时间内各次服务时间总和<br>Y表示话务量，T表示时间总和，<br>$$A= {Y\over T}=n{S\over T}=λS$$<br>$$λ={n\over T}$$</li>
</ul>
<h2 id="第3章_信令系统">第3章 信令系统</h2><h3 id="概述">概述</h3><ul>
<li><p>信令<br>信令是各交换局在完成呼叫接续中使用的一种通信语言，它是控制交换机产生动作的命令。</p>
</li>
<li><p>信令的分类</p>
<blockquote>
<ol>
<li>按工作区域分<br>1) 用户线信令<br>2) 局间信令<br>3) 交换机内部信令</li>
<li>按传送方向分<br>1) 前向信令<br>2) 后向信令</li>
<li>按功能分<br>1) 监视信令（线路信令）：用来监视或改变线路上的呼叫状态或条件<br>2) 选择信令（记发器信令）：由主叫用户发出的数字信号（电话号码），即被叫用户的地址信息<br>3) 操作信令（管理信令）</li>
<li>按传播途径分<br>1) <strong>随路信令（带内信令）</strong>：通过话路传送的信令<br>2) <strong>公共信道信令（带外信令）</strong>：信令传送和话路分开的信令</li>
</ol>
</blockquote>
</li>
<li><p>信令的传送方式</p>
<blockquote>
<ol>
<li>端到端：对电路质量要求较高</li>
<li>逐段转发：对线路要求较低</li>
<li>混合方式：中国1号记发器信令在劣质电路中使用逐段转发方式，在优质电路中使用端到端方式，No.7信令通常使用逐段转发方式但也可提供端到端信令。</li>
</ol>
</blockquote>
</li>
<li><p>控制方式</p>
<blockquote>
<ol>
<li>非互控（脉冲方式）：设备简单，但可靠性差</li>
<li>半互控方式：发端每发送一组信令之后必须受到确认后才能再发</li>
<li>全互控方式：连续发送，不中断，直到受到证实之后才停止。抗干扰能力强，可靠性好，但发码速度慢<br>中国1号记发器信令使用<strong>全互控方式</strong>，保证可靠性，但影响了速度；No.7信令使用非互控方式，速度快，同时采用一些措施来保证可靠性。</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="中国No-1信令">中国No.1信令</h3><p>中国1号信令是一种<strong>随路信令</strong>。<br>方式分为线路信令和记发器信令。<br>数据类型分为模拟型线路信令（直流型线路信令、带内单频信令）和数字型线路信令。 </p>
<ul>
<li><p>带内单频线路信令<br><strong>单频2600Hz</strong>，基本脉冲为<strong>长脉冲600ms</strong>，<strong>短脉冲150ms</strong>，两信令<strong>最小标称间隔300ms</strong>。</p>
</li>
<li><p>局间数字型线路信令<br>一个复帧由<strong>16</strong>个子帧组成，记为<strong>F0~F15</strong><br>每一个子帧有<strong>32</strong>个时隙，<strong>256bit</strong>，<strong>T=125us</strong>，记为<strong>TS0~TS31</strong><br>每一个时隙包含<strong>8bit</strong>二进制码字<br><strong>TS0</strong>用于收发端同步，称为帧同步时隙，也称为帧定位码组<br><strong>TS1~TS15以及TS17~TS31</strong>是话音时隙<br><strong>TS16</strong>用来传送复帧同步及数字型线路信令，称为信令时隙。一路话音信号的线路信令只需要<strong>4bit</strong>，即一个<strong>TS16</strong>时隙可以传送两路。</p>
</li>
<li><p>No.1记发器信令 RS（Resister Signal）<br><strong>多频互控方式信令，MFC（Multiple Frequency Control）</strong>，传送方式为<strong>端到端</strong>，劣质电路上也可采用<strong>逐段转发</strong>方式，控制方式为<strong>全互控</strong>。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>组别</th>
<th>名称</th>
<th>基本含义</th>
<th>容量</th>
</tr>
</thead>
<tbody>
<tr>
<td>I</td>
<td>KA</td>
<td>主叫用户类别</td>
<td>15</td>
</tr>
<tr>
<td>I</td>
<td>KC</td>
<td>长途接续类别</td>
<td>5</td>
</tr>
<tr>
<td>I</td>
<td>KE</td>
<td>市内接续类别</td>
<td>5</td>
</tr>
<tr>
<td>I</td>
<td>数字信令</td>
<td>0~9</td>
<td>10</td>
</tr>
<tr>
<td>II</td>
<td>KD</td>
<td>发端呼叫类别</td>
<td>6</td>
</tr>
<tr>
<td>A</td>
<td>A</td>
<td>收号状态和接续状态</td>
<td>6</td>
</tr>
<tr>
<td>B</td>
<td>KB</td>
<td>被叫用户状态</td>
<td>6</td>
</tr>
</tbody>
</table>
<ul>
<li>前向I组和后向A组互控，前向II组和后向B组互控</li>
</ul>
<h3 id="No-7_信令">No.7 信令</h3><p>局间的NO.7信令链路是由两端的信令终端设备和它们之间的数据链路组成。<br>最适合采用64kbit/s的数字信道，也适合模拟信道和较低速率下的工作，适合由数字程控交换机和数字传输设备所组成的综合数字网。<br>高可靠性。<br><strong>公共信道信令</strong>。<br>用于支持<strong>蜂窝移动通信</strong>、<strong>PCN</strong>、<strong>ATM</strong>等，用于支持国际网和国内网。</p>
<hr>
<ul>
<li>No.7信令网的基本组成部件有<strong>信令点SP</strong>、<strong>信令转接点STP</strong>和<strong>信令链路SL</strong></li>
</ul>
<hr>
<ul>
<li>SP是处理控制消息的节点，产生消息的信令点为该消息的起源点，消息到达的信令点为该消息的目的地节点。<br>信令点编码有两种：<br><strong>14位（国际）</strong>：3位大区、8位区域网、3位信号点<br><strong>24位（国内）</strong>：8位主信令区、8位分信令区、8位信令点<br>源信令点编码<strong>OPC(Origin Point Code)</strong>，目的信令点编码记为<strong>DPC(Destination Point Code)</strong>。</li>
</ul>
<hr>
<ul>
<li><strong>信令转接点STP</strong>分为综合型和独立型两种。独立型STP是只具有<strong>消息传递部分MTP</strong>和<strong>信令连接控制部分SCCP</strong>功能的信令转接点设备；综合型STP是除了具有消息传递部分MTP和信令连接控制部分SCCP的功能外，还具有<strong>用户部分</strong>功能(例如TUP/ISUP、TCAP、INAP)的信令转接点设备。</li>
</ul>
<hr>
<ul>
<li><strong>信令链路SL</strong>连接各个信令点或信令转接点<br>在两个相邻信令点之间传送信令消息的链路称为信令链路。<br>相同属性的信令链路组成一组链路集。<br>到同一局向的所有链路可属一个链路集，也可属多个链路集；但两个相邻的信令点之间的信令链路只能属于一个链路集。<br>对于相邻两个信令点之间的所有链路，都有一个统一编号，称为<strong>信令链路编码SLC(Signalling Link Code)</strong>。</li>
</ul>
<hr>
<ul>
<li>信令链路的连接方式<br>根据通话电路和信令链路的关系，可采用三种工作方式：</li>
</ul>
<ol>
<li><strong>直连工作方式</strong>：信令链路直接连接两个SP，信令消息直达。</li>
<li><strong>准直联工作方式</strong>：信令消息可能会通过STP转接，路径是<strong>预先设定好</strong>的。</li>
<li><strong>完全分离工作方式</strong>：可能会有多条转接路径，而路由是<strong>动态分配</strong>的。</li>
</ol>
<hr>
<ul>
<li>协议集<br>No.7信令的基本功能结构由<strong>消息传递部分(MTP)（底层）</strong>和<strong>用户部分(UP)（高层）</strong>组成。</li>
</ul>
<hr>
<ul>
<li>消息传递部分 MTP<br>主要是在信令网中提供<strong>可靠的</strong>信令消息传递，并在系统和信令网故障情况下，具有为保证可靠的信息传送而作出响应并采取必要措施的能力。<br>它由三个功能级组成：</li>
</ul>
<ol>
<li><strong>信令数据链路功能(MTP1)</strong>：相当于<strong>物理层</strong>，定义了数字信令链路的物理、电气及功能特性</li>
<li><strong>信令链路控制功能(MTP2)</strong>：相当于<strong>数据链路层</strong>，提供<strong>流量控制</strong>、<strong>消息顺序确认</strong>及<strong>检错重传</strong>功能</li>
<li><strong>信令网络功能(MTP3)</strong>：相当于<strong>网络层</strong>，提供<strong>路由功能</strong></li>
</ol>
<hr>
<ul>
<li>用户部分 UP<br>定义了通信网的各类用户(业务)所需要的信令及其编码，规定用户部分(UP)与消息传递部分（MTP）之间的信号传输关系。控制各种基本呼叫的建立和释放。</li>
</ul>
<ol>
<li><strong>ISDN用户部分ISUP、电话用户部分TUP、数据用户部分DUP</strong>：一般都用ISUP替代全部。</li>
<li><strong>信令连接控制部分SCCP</strong>：本身相当于<strong>传输层</strong>，但是与<strong>MTP-3共同组成网络层</strong>，<strong>与MTP共同组成网络业务部分NSP</strong>。加强消息传递功能。</li>
<li><strong>事务处理能力应用部分TCAP</strong>：提供节点之间的传递信息的手段以及对相互独立的各种应用提供通用的业务</li>
<li><strong>TC用户</strong>：指各种应用，目前有智能网应用部分(INAP)、移动应用部分(MAP)、运行维护管理应用部分(OMAP)</li>
</ol>
<hr>
<ul>
<li>CCS7信令单元格式<br>信令消息是以<strong>信号单元</strong>的方式传送，而<br>且采用<strong>不等长信号单元</strong>。以<strong>8bit</strong>为长度单位<br>它有三种信号单元：</li>
</ul>
<ol>
<li><strong>消息信令单元MSU</strong>：用来传送<strong>第三级以上</strong>的各层发送的信息。</li>
<li><strong>链路状态信令单元LSSU</strong>：用来传送信令链路状态</li>
<li><strong>填充信令单元FISU</strong>：是在信令链路上没有消息要传送时，向对端发送的空信号，用来维持信令链路的通信状态，同时可证实对端发来的信令单元。</li>
</ol>
<ul>
<li><p><strong>信令信息字段 SIF(Signalling Information Field)</strong>是MSU特有的，长度为<strong>2~272个8位组</strong>，包含路由标记和信令数据，就是实际发送的消息。</p>
</li>
<li><p>LSSU和FISU都由信令链路功能级生成及处理。</p>
</li>
</ul>
<hr>
<ul>
<li>电话用户部分TUP<br>电话用户消息的内容是在消息信令单元MSU中的<strong>信令信息字段SIF</strong>中传送的。由<strong>标记、标题码和信令信息</strong>三部分组成。</li>
</ul>
<ol>
<li>初始地址消息<strong>IAM（无附加）</strong>或<strong>IAI（附加信息）</strong>：含有下一个交换局为建立呼叫、确定路由所需的有关信息。初始地址消息蕴含了占用电路的功能</li>
<li>后序地址消息<strong>SAM（一次传多位）</strong>和<strong>SAO（一次传一位）</strong>：传送剩余的被叫号码。</li>
<li>地址全消息<strong>ACM</strong></li>
<li>地址不全消息<strong>ADI</strong></li>
<li>被叫用户状态：用户市忙<strong>SLB</strong>、用户长忙<strong>STB</strong>、线路不工作<strong>LOS</strong>、空号<strong>UNN</strong>和发送专用信息音<strong>SST</strong></li>
<li>应答信号<strong>ANC（计费）</strong>、<strong>ANN（免费）</strong></li>
<li>后向拆线信号<strong>CBK</strong>、前向拆线信号<strong>CLF</strong></li>
</ol>
<p>首先发送：</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>空</th>
<th>CIC</th>
<th>OPC</th>
<th>DPC</th>
</tr>
</thead>
<tbody>
<tr>
<td>长度</td>
<td>4</td>
<td>12</td>
<td>24</td>
<td>24</td>
</tr>
</tbody>
</table>
<ul>
<li>话音电路标识CIC</li>
</ul>
<hr>
<ul>
<li>ISDN用户部分ISUP<br>ISUP可以全面支持ISDN用户的基本承载业务和补充业务，而且可以<strong>完全实现TUP（电话用户部分）和DUP（数据用户部分）</strong>的功能</li>
</ul>
<p>首先发送：</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>空</th>
<th>SLS</th>
<th>OPC</th>
<th>DPC</th>
</tr>
</thead>
<tbody>
<tr>
<td>长度</td>
<td>4</td>
<td>12</td>
<td>24</td>
<td>24</td>
</tr>
</tbody>
</table>
<ul>
<li>信令链路选择SLS</li>
</ul>
<hr>
<ol>
<li>初始地址消息<strong>IAM（无附加）</strong>或<strong>IAI（附加信息）</strong>：含有下一个交换局为建立呼叫、确定路由所需的有关信息。初始地址消息蕴含了占用电路的功能</li>
<li>后序地址消息<strong>SAM（一次传多位）</strong>和<strong>SAO（一次传一位）</strong>：传送剩余的被叫号码。</li>
<li>地址全消息<strong>ACM</strong></li>
<li>地址不全消息<strong>ADI</strong></li>
<li>被叫用户状态：用户市忙<strong>SLB</strong>、用户长忙<strong>STB</strong>、线路不工作<strong>LOS</strong>、空号<strong>UNN</strong>和发送专用信息音<strong>SST</strong></li>
<li>应答信号<strong>ANC（计费）</strong>、<strong>ANN（免费）</strong></li>
<li>后向拆线信号<strong>CBK</strong>、前向拆线信号<strong>CLF</strong></li>
</ol>
<table>
<thead>
<tr>
<th>—-</th>
<th>ISUP</th>
<th>TUP</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始地址消息</td>
<td>IAM</td>
<td>IAM/IAI</td>
</tr>
<tr>
<td>后序地址消息（重叠发送时）</td>
<td></td>
<td>SAM/SAO</td>
</tr>
<tr>
<td>地址全消息</td>
<td>ACM</td>
<td>ACM</td>
</tr>
<tr>
<td>地址不全消息</td>
<td>ADI</td>
<td>ADI</td>
</tr>
<tr>
<td>应答信号</td>
<td>ANM</td>
<td>ANC/ANN</td>
</tr>
<tr>
<td>故障信号</td>
<td>包含在REL中</td>
<td>SLB/STB/LOS/UNN</td>
</tr>
<tr>
<td>挂机信号</td>
<td></td>
<td>CBK（后向）</td>
</tr>
<tr>
<td>拆线信号</td>
<td>REL（链路清除）</td>
<td>CLF（前向）</td>
</tr>
<tr>
<td>拆线证实</td>
<td>RLC</td>
<td>RLG</td>
</tr>
</tbody>
</table>
<h2 id="第4章_数字程控交换原理与技术">第4章 数字程控交换原理与技术</h2><ul>
<li>交换机的基本组成</li>
</ul>
<ol>
<li>话路部分<br>用户电路<br>中继器<br>交换网络<br>信令设备</li>
<li>控制系统</li>
</ol>
<hr>
<ul>
<li>控制方式</li>
</ul>
<ol>
<li>集中控制</li>
<li>分散控制：资源分散，控制功能集中<br>1) 分级控制：上下级结构、每个层次的处理机处理一部分内容<br>2) 全分散控制：平行结构、将系统划分为几个模块，每个模块相互通信，相互配合<br>3) 基于容量分担的全分散控制：综合上两个、在平行结构中分层<br>容量分担：资源分散、功能集中<br>功能分担：资源集中、功能分散<br>话务分担：<br>容量分担：</li>
</ol>
<table>
<thead>
<tr>
<th>—-</th>
<th>集中控制</th>
<th>分散控制</th>
</tr>
</thead>
<tbody>
<tr>
<td>优点</td>
<td>处理机能够及时掌握、了解整个系统的运行状态，使用和管理系统的全部资源，不会出现资源争夺的冲突</td>
<td>任何一个模块故障，整体仍然能够运行，扩容方便，灵活</td>
</tr>
<tr>
<td>缺点</td>
<td>灵活性差，经济性差（处理级复杂、昂贵），软件庞大，维护困难</td>
<td>各部分独立，可能会出现资源冲突，公共资源难以共享，单独模块的容量过小</td>
</tr>
<tr>
<td>适合</td>
<td>小容量交换机</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li>处理机的冗余配置</li>
</ul>
<ol>
<li>重要的进行1+1配置</li>
<li>不重要的进行n+1配置</li>
</ol>
<ul>
<li>1+1的三种方式</li>
</ul>
<table>
<thead>
<tr>
<th>—-</th>
<th>同步双工</th>
<th>双机互助（话务分担）</th>
<th>主/备用</th>
</tr>
</thead>
<tbody>
<tr>
<td>特点</td>
<td>两机同步工作，比较执行结果</td>
<td>各自独立工作，一旦一台出错，另一台承担全部工作</td>
<td>一台联机一台备用，一旦出故障则主/备用切换</td>
</tr>
<tr>
<td>优点</td>
<td>对硬件故障反应快</td>
<td>过负荷能力强，对软件故障有容错能力，可一台服务一台调试升级</td>
<td>实现简单，热备用时备用机保存主机的相关数据，可以随时接替工作</td>
</tr>
<tr>
<td>缺点</td>
<td>对软件无容错能力，需要不停复核，降低了效率</td>
<td>为避免双机争抢资源，双机通信频繁，软件复杂，对硬件故障反应速度不如同步双工</td>
<td>冷备用切换时会产生延误或者连接中断等</td>
</tr>
</tbody>
</table>
<hr>
<p>4.3.1</p>
<hr>
<ul>
<li><p>程控交换机的硬件结构<br>程控交换机的硬件包括<strong>话路系统</strong>、<strong>中央处理系统（控制系统）</strong>，<strong>维护与操作系统</strong>三部分</p>
</li>
<li><p>用户电路的七大功能，被称为：BORSCHT</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>B</th>
<th>Battery Feed</th>
<th>馈电</th>
</tr>
</thead>
<tbody>
<tr>
<td>O</td>
<td>Overvoltage</td>
<td>过压保护</td>
</tr>
<tr>
<td>R</td>
<td>Ring</td>
<td>振铃</td>
</tr>
<tr>
<td>S</td>
<td>Supervision</td>
<td>监视</td>
</tr>
<tr>
<td>C</td>
<td>CODEC&amp;filter</td>
<td>编解码和滤波</td>
</tr>
<tr>
<td>H</td>
<td>Hybrid</td>
<td>混合</td>
</tr>
<tr>
<td>T</td>
<td>Test</td>
<td>测试</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li><p>交换网络结构<br>交换网络是由若干个交换单元按照一定的<strong>拓扑结构</strong>和<strong>控制方式</strong>构成的网络</p>
</li>
<li><p>交换网络的<strong>三个基本要素</strong><br>交换单元、不同交换单元间的拓扑连接和控制方式</p>
</li>
<li><p>多级交换网络的拓扑结构可用三个参数来说明：</p>
</li>
</ul>
<ol>
<li>每个交换单元的容量。</li>
<li>交换单元的级数。</li>
<li>交换单元间的连接通路(链路)</li>
</ol>
<ul>
<li><p>内部阻塞<br>从交换网络不同输入端来的信息在交换网络中交换时发生的对同一公共资源发生争抢的情况。在竞争资源时失败的信息会被阻塞，直到公共资源被释放。</p>
</li>
<li><p>内部阻塞概率</p>
</li>
</ul>
<p>$$a={A \over n*m}$$</p>
<ul>
<li>无阻塞网络 <strong>Clos网络</strong> 输入m*n 输出 j*k</li>
</ul>
<table>
<thead>
<tr>
<th>—-</th>
<th>第一级</th>
<th>第二级</th>
<th>第三级</th>
</tr>
</thead>
<tbody>
<tr>
<td>个数</td>
<td>m</td>
<td>n+j-1</td>
<td>k</td>
</tr>
<tr>
<td>入线数</td>
<td>n</td>
<td>m</td>
<td>n+j-1</td>
</tr>
<tr>
<td>出线数</td>
<td>n+j-1</td>
<td>k</td>
<td>j</td>
</tr>
</tbody>
</table>
<ul>
<li>中间一级可以继续拆分</li>
</ul>
<hr>
<ul>
<li><p>空分交换机/空间接线器<br>用来实现多个输入复用线与多个输出复用线之间的空间交换，而不改变其时隙位置</p>
</li>
<li><p>基本结构</p>
</li>
</ul>
<ol>
<li>交叉点矩阵：开关阵列</li>
<li>控制存储器</li>
</ol>
<ul>
<li>时分交换机<br>共享存储器型的交换单元</li>
</ul>
<ol>
<li>话音存储器SM：用于存储话音信号</li>
<li>控制存储器CM：用于存储控制命令字</li>
</ol>
<ul>
<li>TST网络<br>TST网络是在电路交换系统中经常使用的一种交换网<br>络，它是三级交换网络，两侧为T接线器，中间一级为S接线<br>器，S级的出入线数决定于两侧T接线器的数量。</li>
</ul>
<ol>
<li>第1级，T接线器：负责输入母线的时隙交换。</li>
<li>S接线器：负责母线之间的空间交换。</li>
<li>第2级，T接线器：负责输出母线的时隙交换</li>
</ol>
<ul>
<li>常用的有<br>$TS^nT$、$ST^nS$、T/结合、TTT等</li>
</ul>
<hr>
<ul>
<li>交换软件中使用的语言</li>
</ul>
<ol>
<li>规范描述语言SDL：用于系统设计阶段，用来说明对程控交换机的各种功能要求和技术规范，并描述功能和状态的变化情况；</li>
<li>高级语言和汇编语言：用来编写软件程序；</li>
<li>人机对话语言MML：主要用于人机对话，在软件测试和运行维护阶段使用</li>
</ol>
<hr>
<ul>
<li>局数据</li>
</ul>
<ol>
<li>配置数据</li>
<li>路由和中继规则</li>
<li>No.7信令数据</li>
<li>计费数据</li>
<li>新业务提供情况</li>
</ol>
<ul>
<li>用户数据</li>
</ul>
<ol>
<li>用户电话号码、用户设备号码</li>
<li>用户线类别</li>
<li>话机类别</li>
<li>用户的服务等级</li>
<li>用户对新业务的使用权及已经登记的新业务</li>
<li>用户计费数据</li>
</ol>
<hr>
<ul>
<li>程控交换机中操作系统主要功能是：</li>
</ul>
<ol>
<li>任务调度</li>
<li>存储器管理</li>
<li>进程之间的通信、处理机之间通信</li>
<li>定时管理</li>
<li>系统监督和恢复</li>
<li>I／O设备管理、文件管理等</li>
</ol>
<ul>
<li><p>优先级<br>按照对实时性要求的不同，程序的优先级大致可分为<strong>中断级、时钟级和基本级</strong></p>
</li>
<li><p>比特型时间表<br>一个时间表所能调度的程序数等于该时间表的列数，时间表能够支持的不同周期数等于时间表行数n的不同因子数</p>
</li>
</ul>
<hr>
<ul>
<li>呼叫处理的过程</li>
</ul>
<ol>
<li>输入处理：负责采集话路设备的状态信息的变化和有关信息，只负责检测事件而不进行处理。本质上是软件和硬件之间的接口程序，和硬件设备直接联系，通过周期性的扫描程序实现状态信息的采集。</li>
<li>内部处理：主要任务是分析收集的信息和各类发生的事件，分配资源，并根据所发生的时间及与该事件有关进程的当前状态决定下一步的动作。由于对时间没有严格要求，一般情况下，采用队列方式来完成。</li>
<li>输出处理：依据内部分析的结果完成对话路设备的驱动。如交换网络的接续、向用户发生各种信令音等</li>
</ol>
<h2 id="第5章_分组交换原理与技术">第5章 分组交换原理与技术</h2><h2 id="第6章_ATM原理与技术">第6章 ATM原理与技术</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>感觉我也是醉醉的，人比较懒，愿意打字都不愿意动笔了……</p>
<p>发现markdown用来写笔记真心好用，顺手发出来好了，如果未来有学弟学妹们能发现这个…</p>
<p>那就算你们太走运啦！！！</p>
<p>倾情打造！！！复习笔记！！！</p>
<hr>
<h2 id="第1章_绪论">第1章 绪论</h2><h3 id="交换">交换</h3><p>所谓交换，就是在通信网上，负责在通信的源和目的终端之间建立通信信道，传送通信信息的机制，也就是根据目的地，在源和目的终端之间传送通信信息。网内的任一个用户可以按着自己的要求与网内的其他用户进行信息交换</p>]]>
    
    </summary>
    
      <category term="复习笔记" scheme="http://jcf94.github.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="我的大学" scheme="http://jcf94.github.io/categories/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通宵那些事]]></title>
    <link href="http://jcf94.github.io/2015/05/28/2015-05-28-diary/"/>
    <id>http://jcf94.github.io/2015/05/28/2015-05-28-diary/</id>
    <published>2015-05-28T12:14:10.000Z</published>
    <updated>2015-05-28T12:33:39.826Z</updated>
    <content type="html"><![CDATA[<p>已经快要忘了上一次通宵是在什么时候了，曾经做数学建模的时候是通过的，最后应该也是在期末的某次，一边要弄课设，一边又有考试，然后想着通宵赶紧把课设做做完，留出白天的时间来好好复习。</p>
<p>说起来还是自己平时的执行效率太低，总是没有办法全心全意地复习，拖啊拖啊拖啊的，就拖成了现在这个样子。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>已经快要忘了上一次通宵是在什么时候了，曾经做数学建模的时候是通过的，最后应该也是在期末的某次，一边要弄课设，一边又有考试，然后想着通宵赶紧把课设做做完，留出白天的时间来好好复习。</p>
<p>说起来还是自己平时的执行效率太低，总是没有办法全心全意地复习，拖啊拖啊拖啊的，就]]>
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始使用Github]]></title>
    <link href="http://jcf94.github.io/2015/05/26/2015-05-26-start/"/>
    <id>http://jcf94.github.io/2015/05/26/2015-05-26-start/</id>
    <published>2015-05-26T07:34:31.000Z</published>
    <updated>2015-05-27T04:54:28.317Z</updated>
    <content type="html"><![CDATA[<p>之前的博客都是写在博客园上的，现在转移至github。</p>
<p>第一次用Markdown这种语法，真心简洁明了，短小精悍啊~ 各种格式也是帅爆</p>
<p>算是从5月26号正式开始跑这个博客吧，27号最后换了个比较喜欢的主题，然后开始慢慢改自己的东西，估计以后一段时间用的都是这个样式了。</p>
<p>然后有空会开始把博客园的东西一篇一篇移回到这里来。</p>
<hr>
<p>最近一周各种考试+实验+写报告，满满的都是事情…</p>
<p>然而这么忙，我发现我还是控制不住自己啊啊…就开始折腾这个博客了…这种自己都觉得坑爹啊的奇怪习惯真得改改了啊啊啊（捂脸）</p>
<p>好好复习去了……</p>
<p>最后吐槽一句，这学期的考试真的好难啊啊啊啊啊啊啊~~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前的博客都是写在博客园上的，现在转移至github。</p>
<p>第一次用Markdown这种语法，真心简洁明了，短小精悍啊~ 各种格式也是帅爆</p>
<p>算是从5月26号正式开始跑这个博客吧，27号最后换了个比较喜欢的主题，然后开始慢慢改自己的东西，估计以后一段时]]>
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[test]]></title>
    <link href="http://jcf94.github.io/2015/05/26/2015-05-26-test/"/>
    <id>http://jcf94.github.io/2015/05/26/2015-05-26-test/</id>
    <published>2015-05-26T05:07:16.000Z</published>
    <updated>2015-05-27T06:26:02.204Z</updated>
    <content type="html"><![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><pre><code>这是一段不加格式的代码
<span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span>
<span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span>

<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>
</span>{
    <span class="built_in">printf</span>(<span class="string">"Helloworld\n"</span>);

    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><h3 id="三级标题">三级标题</h3><a id="more"></a>
<h4 id="四级标题">四级标题</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段正常的代码</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Helloworld\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$$这是一串数学公式$$<br>$$e=mc^2$$</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>又名块注释</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p><em>这是一句斜体</em></p>
<p><em>这也是一句斜体</em></p>
<p><strong>这是一句加粗</strong></p>
<p><strong>这也是一句加粗</strong></p>
<ul>
<li>这是无序列表</li>
</ul>
<ul>
<li>这也是无序列表</li>
</ul>
<ul>
<li>这还是无序列表</li>
</ul>
<ol>
<li>这是有序列表</li>
<li>这也是有序列表</li>
</ol>
<p>这是一个<a href="http://baidu.com" target="_blank" rel="external">链接</a></p>
<p>这是一堆链接<a href="http://google.com" target="_blank" rel="external">Google</a>，<a href="http://baidu.com" target="_blank" rel="external">baidu</a></p>
<blockquote>
<p>下面来测试一下带图</p>
</blockquote>
<p><img src="/images/photo.jpg" alt="alt text" title="图片测试"></p>
<p><del>删除线</del></p>
<table>
<thead>
<tr>
<th style="text-align:left">这是一个</th>
<th style="text-align:center">表格</th>
<th style="text-align:right">OK</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">左对齐</td>
<td style="text-align:center">居中</td>
<td style="text-align:right">右对齐</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><pre><code>这是一段不加格式的代码
<span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span>
<span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span>

<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>
</span>{
    <span class="built_in">printf</span>(<span class="string">"Helloworld\n"</span>);

    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><h3 id="三级标题">三级标题</h3>]]>
    
    </summary>
    
      <category term="测试" scheme="http://jcf94.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jcf94.github.io/2015/05/26/2015-05-26-hello-world/"/>
    <id>http://jcf94.github.io/2015/05/26/2015-05-26-hello-world/</id>
    <published>2015-05-26T02:00:00.000Z</published>
    <updated>2015-05-26T05:58:19.609Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="测试" scheme="http://jcf94.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 2489 Minimal Ratio Tree 最小生成树+DFS]]></title>
    <link href="http://jcf94.github.io/2014/09/06/2014-09-06-HDU-2489-Minimal-Ratio-Tree/"/>
    <id>http://jcf94.github.io/2014/09/06/2014-09-06-HDU-2489-Minimal-Ratio-Tree/</id>
    <published>2014-09-06T12:57:00.000Z</published>
    <updated>2015-05-27T03:48:56.936Z</updated>
    <content type="html"><![CDATA[<h1 id="Minimal_Ratio_Tree">Minimal Ratio Tree</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)</p>
<h2 id="【Problem_Description】">【Problem Description】</h2><p>For a tree, which nodes and edges are all weighted, the ratio of it is calculated according to the following equation.</p>
<p>Given a complete graph of n nodes with all nodes and edges weighted, your task is to find a tree, which is a sub-graph of the original graph, with m nodes and whose ratio is the smallest among all the trees of m nodes in the graph.</p>
<a id="more"></a>
<h2 id="【Input】">【Input】</h2><p>Input contains multiple test cases. The first line of each test case contains two integers n (2&lt;=n&lt;=15) and m (2&lt;=m&lt;=n), which stands for the number of nodes in the graph and the number of nodes in the minimal ratio tree. Two zeros end the input. The next line contains n numbers which stand for the weight of each node. The following n lines contain a diagonally symmetrical n×n connectivity matrix with each element shows the weight of the edge connecting one node with another. Of course, the diagonal will be all 0, since there is no edge connecting a node with itself.</p>
<p>All the weights of both nodes and edges (except for the ones on the diagonal of the matrix) are integers and in the range of [1, 100].<br>The figure below illustrates the first test case in sample input. Node 1 and Node 3 form the minimal ratio tree.</p>
<h2 id="【Output】">【Output】</h2><p>For each test case output one line contains a sequence of the m nodes which constructs the minimal ratio tree. Nodes should be arranged in ascending order. If there are several such sequences, pick the one which has the smallest node number; if there’s a tie, look at the second smallest node number, etc. Please note that the nodes are numbered from 1 . </p>
<h2 id="【Sample_Input】">【Sample Input】</h2><blockquote>
<p>3 2<br>30 20 10<br>0 6 2<br>6 0 3<br>2 3 0<br>2 2<br>1 1<br>0 2<br>2 0<br>0 0</p>
</blockquote>
<h2 id="【Sample_Output】">【Sample Output】</h2><blockquote>
<p>1 3<br>1 2</p>
</blockquote>
<h2 id="【题意】">【题意】</h2><p>给出一张n个点的图，图中的每一个结点以及每一条边都有其权值，要求从中选出m个点，找到m-1条边将其连接，使得边权值与点权值的比值达到最小。</p>
<h2 id="【分析】">【分析】</h2><p>要使得比值最小，则点权值和尽可能地大同时边权值和尽可能地小。直接上考虑，边权值和尽可能小即对这m个点作最小生成树。</p>
<p>而题目给定的n不大，故可以用DFS搜出需要的m个点，然后对m个点进行最小生成树，中间注意判断和保存即可。</p>
<p>我用了一个dijkstra+优先队列的prim去找MST，这也是我第一次尝试使用STL的优先队列。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">16</span>],outp[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,node[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> ma[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">double</span> mi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> heaptyp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> num,key;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (heaptyp a,heaptyp b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.num&gt;b.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; heaptype;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> tot)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,now,ans;</span><br><span class="line">    <span class="keyword">bool</span> fla[<span class="number">16</span>];</span><br><span class="line">    priority_queue&lt;heaptype&gt;heap;</span><br><span class="line">    heaptype aaa;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(fla,<span class="number">0</span>,<span class="keyword">sizeof</span>(fla));</span><br><span class="line">    fla[s]=<span class="keyword">true</span>;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">    <span class="keyword">if</span> (flag[i]&amp;&amp;ma[s][i])</span><br><span class="line">    &#123;</span><br><span class="line">        heaptype temp;</span><br><span class="line">        temp.num=ma[s][i];</span><br><span class="line">        temp.key=i;</span><br><span class="line">        heap.push(temp);</span><br><span class="line">        aaa=heap.top();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        heaptype h=heap.top();</span><br><span class="line">        heap.pop();</span><br><span class="line">        aaa=heap.top();</span><br><span class="line">        <span class="keyword">while</span> (fla[h.key])</span><br><span class="line">        &#123;</span><br><span class="line">            h=heap.top();</span><br><span class="line">            heap.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        now=h.key;</span><br><span class="line">        fla[now]=<span class="keyword">true</span>;</span><br><span class="line">        ans+=h.num;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (flag[i]&amp;&amp;ma[now][i])</span><br><span class="line">        <span class="keyword">if</span> (!fla[i])</span><br><span class="line">        &#123;</span><br><span class="line">            heaptype temp;</span><br><span class="line">            temp.num=ma[now][i];</span><br><span class="line">            temp.key=i;</span><br><span class="line">            heap.push(temp);</span><br><span class="line">            aaa=heap.top();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> rat=(<span class="keyword">double</span>)ans/tot;</span><br><span class="line">    <span class="keyword">if</span> (mi-rat&gt;<span class="number">0.0000001</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mi=rat;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) outp[i]=fla[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last,<span class="keyword">int</span> tot)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (now==m)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">int</span> i;</span><br><span class="line">         <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">         <span class="keyword">if</span> (flag[i]) <span class="keyword">break</span>;</span><br><span class="line">         prim(i,tot);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> </span><br><span class="line">     &#123;</span><br><span class="line">         now++;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i=last+<span class="number">1</span>;i&lt;=n-m+now;i++)</span><br><span class="line">         &#123;</span><br><span class="line">             flag[i]=<span class="keyword">true</span>;</span><br><span class="line">             dfs(now,i,tot+node[i]);</span><br><span class="line">             flag[i]=<span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">while</span> (!(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;node[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ma[i][j]);</span><br><span class="line">        </span><br><span class="line">        mi=<span class="number">2147483647</span>;</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-m+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            flag[i]=<span class="keyword">true</span>;</span><br><span class="line">            dfs(<span class="number">1</span>,i,node[i]);</span><br><span class="line">            flag[i]=<span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        <span class="keyword">if</span> (outp[i]) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        <span class="keyword">if</span> (outp[j]) <span class="built_in">printf</span>(<span class="string">" %d"</span>,j);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Minimal_Ratio_Tree">Minimal Ratio Tree</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)</p>
<h2 id="【Problem_Description】">【Problem Description】</h2><p>For a tree, which nodes and edges are all weighted, the ratio of it is calculated according to the following equation.</p>
<p>Given a complete graph of n nodes with all nodes and edges weighted, your task is to find a tree, which is a sub-graph of the original graph, with m nodes and whose ratio is the smallest among all the trees of m nodes in the graph.</p>]]>
    
    </summary>
    
      <category term="最小生成树" scheme="http://jcf94.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="ACM" scheme="http://jcf94.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈我院学术氛围之我见]]></title>
    <link href="http://jcf94.github.io/2014/08/13/2014-08-13-xueshu/"/>
    <id>http://jcf94.github.io/2014/08/13/2014-08-13-xueshu/</id>
    <published>2014-08-13T04:02:47.000Z</published>
    <updated>2015-05-31T04:23:25.813Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>你的未来会是一张白纸，你想要变成什么样子呢？<br>写在 长安大学ACM协会 成立之日<br></blockquote>

<p>很高兴默默奋斗这么多年，我们学校自己的ACM组织终于成立了。</p>
<p>关于ACM学习的事情，其他几位ACM校队成员都给大家讲过不少了。我找了一下自己上学期写的一篇关于学校学术氛围的，算是在长大几年的心得体会吧，这个时候给刚进校的你们作为忠告好了，也是希望你们能在以后的学习生活中能够做得更好。有些事情对我们来说已经晚了，但是你们还能在问题出现之前提前警醒。</p>
<p>去年寒假的时候，有一位同学跟我闲聊，聊到我们学校缺少学术氛围的事，中间有不少比较尖锐的现实，然而我说我觉得他说的很对，别的学院我不知道，也不敢妄加品论，就光说我们自己的学院好了：</p>
<a id="more"></a>
<p>曾经，在来大学之前，我幻想的信息专业是这样的：学校里面有很多大神，各路大神都有自己擅长的方面，论坛上能有很多人讨论专业内容，几个学校的计算机系相互网络入侵对方……慢慢熟悉学校之后，我发现这一切确实都跟我原来幻想的<strong>很不一样</strong>。选择信息的，如果不是被调剂或者听别人介绍过来的，无论懂不懂电脑，至少都会对信息相关的内容很感兴趣。每个人都很想学新东西，然而我们学校目前的状况是高年级的大神不多，新进校的大一同学空有满腔热情，却苦于没有地方能够学习。久而久之，当初的兴趣也慢慢被磨蚀掉了。于是进入下一轮循环，等下一届新生到来之后，他们也没有办法再带什么，于是新老交替、最后状况却仍旧没有改变。</p>
<p>那位同学跟我聊到说，他曾经对一些能够自己在网上实现的小东西很感兴趣，关注过一些小比赛，例如微信开放平台等等。参赛者能看到西交、西电的，但是陕西省其他的学校几乎就没有人报过。其实在我们国家这样的教育体制下，每个学校所开的课程大致相似，在教学方面，每个学校所收的教师也都是硕博教授吧？可能名校师资力量确实要强很多，但从学习上来说，课堂教学又能相差多少呢？（课堂这块继续略过，里面水也很深。。。-_-///）</p>
<p>那么强校跟弱校的差距到底在哪？我想，或许还真就是一个学术氛围的事。</p>
<p>环境不同，学生的思想也不同。因为没有他们那样的<strong>学术环境</strong>，所以我们把学习都<strong>局限在课堂上、课本上</strong>，大多数同学想要学东西，但是苦于没有人教，然后又<strong>没有自己学习的意识</strong>。但是恰恰是光靠课堂上学的那些，我们什么都做不了。人家大一大二就能自己做电赛、写手机软件、做微信平台，我们可能到大四毕业都做不了这些事。他们有活跃的社团，有专门研究软件开发的、有研究电竞的、有学做flash做游戏的、有研究网络攻防的、有研究无线加密的……只可惜很遗憾，在我们学校能看到的大部分社团都是<strong>人文类</strong>的。仅有的几个专业性社团最后也是因为人数太少，活动参与不积极，最终走向结束。我们学校计算机协会的前主席是我舍友，对于我所见到的现状，他也有过很多的思考，曾经也是想过希望能在他们协会内部多开点交流学习的版块，最后也是限于我们学校的各种因素而不了了之了。</p>
<p>大一刚入校的时候，对于学校组织的选择，我选择的是我们学院院科协的技术服务部。当初就是因为觉得只有在那里才算是能有个跟别人交流技术、学习技术的地方，才抛开了好多学长让我加学生会的建议。那一届科协的主席和部长的能力都很强，我大学三年过来所见到的科协也就是那时候才是巅峰。只可惜当时的主席、部长确实是有这方面的想法，最终也还是失败了。我们内部做过挺多次技术交流会，最终想要推广到全院、全校的时候，却还是遭遇了很大的困难。</p>
<p>这里再提到我们学院的几位辅导员，然而他们都并不是信息相关专业毕业出来的，对于如何管理学生，他们很有经验，但是对于我们信息学院学生真正需要的，他们却可能不是太了解。很遗憾我们学院每次在学校里面得的奖都是军训歌咏比赛、广播操比赛等等这类，而且辅导员看重、或者说他们有能力去促进的也只有这些，真正在信息相关的领域里却是做不出什么成就来。</p>
<hr>
<p>我希望看到这里的同学都能够好好想想下面这个问题，既然我们现在跟大家上的都是<strong>一样的课</strong>，学的都是<strong>一样的东西</strong>，那么<strong>是什么能够让我们自己与众不同</strong>呢？</p>
<p>剩下的还是留给大家自己思考吧。。。</p>
<p>我们在学校推广ACM，其实也是希望能够有更多的同学能够参与到自己思考、自己学习的道路上来。</p>
<p>确实很高兴看到我们学校的ACM社团终于要成立了，我校在ACM方面起步较晚，前面几届也是由老师和几个队员坚持下来的，三无组织维持了这么多年，今天终于有个像样的实体了。之后相信一定会越办越好！！！！！！！！！</p>
<p>希望日后有一天，我曾经幻想过百花齐放的场景能在我们学院出现。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>你的未来会是一张白纸，你想要变成什么样子呢？<br>写在 长安大学ACM协会 成立之日<br></blockquote>

<p>很高兴默默奋斗这么多年，我们学校自己的ACM组织终于成立了。</p>
<p>关于ACM学习的事情，其他几位ACM校队成员都给大家讲过不少了。我找了一下自己上学期写的一篇关于学校学术氛围的，算是在长大几年的心得体会吧，这个时候给刚进校的你们作为忠告好了，也是希望你们能在以后的学习生活中能够做得更好。有些事情对我们来说已经晚了，但是你们还能在问题出现之前提前警醒。</p>
<p>去年寒假的时候，有一位同学跟我闲聊，聊到我们学校缺少学术氛围的事，中间有不少比较尖锐的现实，然而我说我觉得他说的很对，别的学院我不知道，也不敢妄加品论，就光说我们自己的学院好了：</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="我的大学" scheme="http://jcf94.github.io/categories/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
</feed>