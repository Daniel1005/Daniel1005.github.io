<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Chenfan Blog]]></title>
  <subtitle><![CDATA[It's the way I choose.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jcf94.github.io/"/>
  <updated>2015-09-13T08:17:17.718Z</updated>
  <id>http://jcf94.github.io/</id>
  
  <author>
    <name><![CDATA[Jcf94]]></name>
    <email><![CDATA[jcf94@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[The 2015 ACM-ICPC Asia Regional Changchun Online]]></title>
    <link href="http://jcf94.github.io/2015/09/13/2015-09-13-Changchun-Online/"/>
    <id>http://jcf94.github.io/2015/09/13/2015-09-13-Changchun-Online/</id>
    <published>2015-09-13T07:09:34.000Z</published>
    <updated>2015-09-13T08:17:17.718Z</updated>
    <content type="html"><![CDATA[<p><del>【A】Alisha’s Party 堆模拟</del><br>【B】Ponds<br>【C】Aggregated Counting<br>【D】Clock Adjusting<br><del>【E】Travel 并查集</del><br>【F】Favorite Donut<br>【G】The Water Problem<br>【H】Elven Postman<br>【I】Food Problem<br>【J】Unknown Treasure<br>【K】Good Numbers<br>【L】Marisa’s Cake<br>【M】Robot Dog</p>
<a id="more"></a>
<h1 id="【A】HDU_5437_Alisha’s_Party">【A】HDU 5437 Alisha’s Party</h1><p>Time Limit: 3000/2000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>Princess Alisha invites her friends to come to her birthday party. Each of her friends will bring a gift of some value v, and all of them will come at a different time. Because the lobby is not large enough, Alisha can only let a few people in at a time. She decides to let the person whose gift has the highest value enter first.</p>
<p>Each time when Alisha opens the door, she can decide to let p people enter her castle. If there are less than p people in the lobby, then all of them would enter. And after all of her friends has arrived, Alisha will open the door again and this time every friend who has not entered yet would enter.</p>
<p>If there are two friends who bring gifts of the same value, then the one who comes first should enter first. Given a query n Please tell Alisha who the n−th person to enter her castle is.</p>
<h2 id="Input">Input</h2><p>The first line of the input gives the number of test cases, T , where 1≤T≤15.</p>
<p>In each test case, the first line contains three numbers k,m and q separated by blanks. k is the number of her friends invited where 1≤k≤150,000. The door would open m times before all Alisha’s friends arrive where 0≤m≤k. Alisha will have q queries where 1≤q≤100.</p>
<p>The i−th of the following k lines gives a string Bi, which consists of no more than 200 English characters, and an integer vi, 1≤vi≤10^8, separated by a blank. Bi is the name of the i−th person coming to Alisha’s party and Bi brings a gift of value vi.</p>
<p>Each of the following m lines contains two integers t(1≤t≤k) and p(0≤p≤k) separated by a blank. The door will open right after the t−th person arrives, and Alisha will let p friends enter her castle.</p>
<p>The last line of each test case will contain q numbers n1,…,nq separated by a space, which means Alisha wants to know who are the n1−th,…,nq−th friends to enter her castle.</p>
<p>Note: there will be at most two test cases containing n&gt;10000.</p>
<h2 id="Output">Output</h2><p>For each test case, output the corresponding name of Alisha’s query, separated by a space.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>1<br>5 2 3<br>Sorey 3<br>Rose 3<br>Maltran  3<br>Lailah 5<br>Mikleo  6<br>1 1<br>4 2<br>1 2 3</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>Sorey Lailah Rose</p>
</blockquote>
<h2 id="题意">题意</h2><p>所有的人按照一个队列的顺序到达，但是门只有在特定的时间才打开，且每次打开只能有前p个值最大的才能进入。要求输出第n个进门者的名字。</p>
<h2 id="分析">分析</h2><p>刚拿到题就觉得这个按照题意要求直接模拟即可。</p>
<p>然而priority_queue打上去TLE了…</p>
<p>刚分析觉着是不是一个一个从队列里面删掉太慢了，改用splay这样旋转到位一次性全删掉应该会更快点…然后就听旁边另一队手打堆过了。</p>
<p>那么事实证明STL的优先队列效率并没有这么高咯。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID	: Chen Fan</span><br><span class="line">LANG	: G++</span><br><span class="line">PROG	: 1001</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> fri</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">250</span>];</span><br><span class="line">	<span class="keyword">int</span> time,value;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (fri a,fri b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a.value==b.value) <span class="keyword">return</span> a.time&gt;b.time;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> a.value&lt;b.value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; friends;</span><br><span class="line"></span><br><span class="line">friends a[<span class="number">150010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> ti</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> t,p;</span><br><span class="line">&#125; tim;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op_ti</span><span class="params">(tim a,tim b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.t&lt;b.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tim b[<span class="number">150010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c,outlist[<span class="number">150010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> heaptyp</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> num,key;</span><br><span class="line">&#125; heaptype;</span><br><span class="line">heaptype heap[<span class="number">150010</span>];</span><br><span class="line"><span class="keyword">int</span> heaptail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapadd</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	heaptail++;</span><br><span class="line">	heap[heaptail].num=s;</span><br><span class="line">	heap[heaptail].key=t;</span><br><span class="line">	i=heaptail;</span><br><span class="line">	j=i&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i&gt;<span class="number">1</span>&amp;&amp;(heap[i].num&gt;heap[j].num||(heap[i].num==heap[j].num&amp;&amp;heap[i].key&lt;heap[j].key)))</span><br><span class="line">	&#123;</span><br><span class="line">		swap(heap[i],heap[j]);</span><br><span class="line">		i=j;</span><br><span class="line">		j=i&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">heaptype <span class="title">heappop</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	heaptype x,y;</span><br><span class="line">	y=heap[<span class="number">1</span>];</span><br><span class="line">	x=heap[heaptail];</span><br><span class="line">	heaptail--;</span><br><span class="line">	i=<span class="number">1</span>;</span><br><span class="line">	j=i&lt;&lt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (j&lt;=heaptail)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (j&lt;heaptail&amp;&amp;(heap[j].num&lt;heap[j+<span class="number">1</span>].num||(heap[j].num==heap[j+<span class="number">1</span>].num&amp;&amp;heap[j].key&gt;heap[j+<span class="number">1</span>].key))) j++;</span><br><span class="line">		<span class="keyword">if</span> (x.num&lt;heap[j].num||(x.num==heap[j].num&amp;&amp;(x.key&gt;heap[j].key)))</span><br><span class="line">		&#123;</span><br><span class="line">			heap[i]=heap[j];</span><br><span class="line">			i=j;</span><br><span class="line">			j=i&lt;&lt;<span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> j=heaptail+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[i]=x;</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("1001.txt","r",stdin);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> k,m,q;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;k,&amp;m,&amp;q);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,&amp;a[i].name,&amp;a[i].value);</span><br><span class="line">			a[i].time=i;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;b[i].t,&amp;b[i].p);</span><br><span class="line">		b[m+<span class="number">1</span>].t=k;</span><br><span class="line">		b[m+<span class="number">1</span>].p=k;</span><br><span class="line"></span><br><span class="line">		sort(&amp;b[<span class="number">1</span>],&amp;b[m+<span class="number">2</span>],<span class="keyword">op_t</span>i);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> tail=<span class="number">0</span>;</span><br><span class="line">		heaptail=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=b[i].t+<span class="number">1</span>;j&lt;=b[i+<span class="number">1</span>].t;j++) </span><br><span class="line">			&#123;</span><br><span class="line">				heapadd(a[j].value,a[j].time);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (heaptail&amp;&amp;temp&lt;b[i+<span class="number">1</span>].p)</span><br><span class="line">			&#123;</span><br><span class="line">				heaptype now=heappop();</span><br><span class="line">				tail++;</span><br><span class="line">				temp++;</span><br><span class="line">				outlist[tail]=now.key;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>,a[outlist[c]].name);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" %s"</span>,a[outlist[c]].name);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="【E】HDU_5441_Travel">【E】HDU 5441 Travel</h1><p>Time Limit: 1500/1000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)</p>
<h2 id="Problem_Description-1">Problem Description</h2><p>Jack likes to travel around the world, but he doesn’t like to wait. Now, he is traveling in the Undirected Kingdom. There are n cities and m bidirectional roads connecting the cities. Jack hates waiting too long on the bus, but he can rest at every city. Jack can only stand staying on the bus for a limited time and will go berserk after that. Assuming you know the time it takes to go from one city to another and that the time Jack can stand staying on a bus is x minutes, how many pairs of city (a,b) are there that Jack can travel from city a to b without going berserk?</p>
<h2 id="Input-1">Input</h2><p>The first line contains one integer T,T≤5, which represents the number of test case.</p>
<p>For each test case, the first line consists of three integers n,m and q where n≤20000,m≤100000,q≤5000. The Undirected Kingdom has n cities and m bidirectional roads, and there are q queries.</p>
<p>Each of the following m lines consists of three integers a,b and d where a,b∈{1,…,n} and d≤100000. It takes Jack d minutes to travel from city a to city b and vice versa.</p>
<p>Then q lines follow. Each of them is a query consisting of an integer x where x is the time limit before Jack goes berserk.</p>
<h2 id="Output-1">Output</h2><p>You should print q lines for each test case. Each of them contains one integer as the number of pair of cities (a,b) which Jack may travel from a to b within the time limit x.</p>
<p>Note that (a,b) and (b,a) are counted as different pairs and a and b must be different cities.</p>
<h2 id="Sample_Input-1">Sample Input</h2><blockquote>
<p>1<br>5 5 3<br>2 3 6334<br>1 5 15724<br>3 5 5705<br>4 3 12382<br>1 3 21726<br>6000<br>10000<br>13000</p>
</blockquote>
<h2 id="Sample_Output-1">Sample Output</h2><blockquote>
<p>2<br>6<br>12</p>
</blockquote>
<h2 id="题意-1">题意</h2><p>给了一个无向图。给出一个x作为两点间每一段路径的上限。求从a到b上所有的路径长度都不超过x的（a，b）的点对总数。</p>
<h2 id="分析-1">分析</h2><p>这样的并查集其实做过很多次了已经。</p>
<p>对所有边按照长度排序，询问也是按照长度先排序，然后从小到大进行。边长满足条件的两端并进一同一个集中，每合并两个集合，总点对数都增加 $左集合的点数<em>右集合的点数</em>2$ （a,b和b,a算两个不同点对）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID	: Chen Fan</span><br><span class="line">LANG	: G++</span><br><span class="line">PROG	: 1005</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">20010</span>],ran[<span class="number">20010</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_father</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		father[i]=i;</span><br><span class="line">		ran[i]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (father[x]!=x) father[x]=getfather(father[x]);</span><br><span class="line">	<span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link_ran</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> xx=getfather(x),yy=getfather(y);</span><br><span class="line">	<span class="keyword">if</span> (ran[xx]&gt;ran[yy]) </span><br><span class="line">	&#123;</span><br><span class="line">		father[yy]=xx;</span><br><span class="line">		ran[xx]+=ran[yy];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		father[xx]=yy;</span><br><span class="line">		ran[yy]+=ran[xx];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c;</span><br><span class="line">&#125; node ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node a[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod1</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> limit,no;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line">&#125; node1 ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op1</span><span class="params">(node1 a,node1 b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.limit&lt;b.limit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op2</span><span class="params">(node1 a,node1 b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.no&lt;b.no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node1 b[<span class="number">5010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">20010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("1005.txt","r",stdin);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m,q;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line"></span><br><span class="line">		clean_father(n);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a[i].a,&amp;a[i].b,&amp;a[i].c);</span><br><span class="line"></span><br><span class="line">		sort(&amp;a[<span class="number">1</span>],&amp;a[m+<span class="number">1</span>],op);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i].limit);</span><br><span class="line">			b[i].no=i;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sort(&amp;b[<span class="number">1</span>],&amp;b[q+<span class="number">1</span>],op1);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (;j&lt;=m;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (a[j].c&gt;b[i].limit) <span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span> (getfather(a[j].a)!=getfather(a[j].b))</span><br><span class="line">				&#123;</span><br><span class="line">					ans+=ran[getfather(a[j].a)]*ran[getfather(a[j].b)]*<span class="number">2</span>;</span><br><span class="line">					link_ran(a[j].a,a[j].b);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			b[i].ans=ans;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sort(&amp;b[<span class="number">1</span>],&amp;b[q+<span class="number">1</span>],op2);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,b[i].ans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><del>【A】Alisha’s Party 堆模拟</del><br>【B】Ponds<br>【C】Aggregated Counting<br>【D】Clock Adjusting<br><del>【E】Travel 并查集</del><br>【F】Favorite Donut<br>【G】The Water Problem<br>【H】Elven Postman<br>【I】Food Problem<br>【J】Unknown Treasure<br>【K】Good Numbers<br>【L】Marisa’s Cake<br>【M】Robot Dog</p>]]>
    
    </summary>
    
      <category term="ACM-ICPC" scheme="http://jcf94.github.io/tags/ACM-ICPC/"/>
    
      <category term="ACM" scheme="http://jcf94.github.io/categories/ACM/"/>
    
      <category term="比赛" scheme="http://jcf94.github.io/categories/ACM/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机组成与设计.硬件/软件接口]]></title>
    <link href="http://jcf94.github.io/2015/09/09/2015-09-09-cod/"/>
    <id>http://jcf94.github.io/2015/09/09/2015-09-09-cod/</id>
    <published>2015-09-09T02:56:01.000Z</published>
    <updated>2015-09-09T03:12:43.000Z</updated>
    <content type="html"><![CDATA[<p>《Computer Organization and Design, Hardware/Software Interface》以及《Computer Architecture: A Quantitative Approach》被誉为体系结构界的两本圣经。</p>
<p>最近除了编译原理外，还在补的就是《硬件/软件接口》这一本了。</p>
<p>这本书讲解得非常透彻。原本我只是对体系结构、CPU有个模糊的很难学的概念，，，书中由浅至深详细地解释了其中的工作原理，，，，真的好难啊Q_Q…</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>《Computer Organization and Design, Hardware/Software Interface》以及《Computer Architecture: A Quantitative Approach》被誉为体系结构界的两本圣经。</p>
<p>最近除了编译原理外，还在补的就是《硬件/软件接口》这一本了。</p>
<p>这本书讲解得非常透彻。原本我只是对体系结构、CPU有个模糊的很难学的概念，，，书中由浅至深详细地解释了其中的工作原理，，，，真的好难啊Q_Q…</p>]]>
    
    </summary>
    
      <category term="体系结构" scheme="http://jcf94.github.io/tags/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
      <category term="学习笔记" scheme="http://jcf94.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机系统结构" scheme="http://jcf94.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[杂记]]></title>
    <link href="http://jcf94.github.io/2015/09/07/2015-09-07-nothing/"/>
    <id>http://jcf94.github.io/2015/09/07/2015-09-07-nothing/</id>
    <published>2015-09-07T14:50:58.000Z</published>
    <updated>2015-09-07T15:14:52.000Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>我听过荒芜变成热闹<br>听过尘埃掩埋城堡<br>听过天空拒绝飞鸟<br>没听过你<br></blockquote>

<p>新生的军训喧闹过后，一切终于又步入正常的轨道。</p>
<p>一样上课，一样看书。</p>
<p>只是看着教室里的人越来越少，一开始是少掉十几个，然后少了一半，终于到了今天偌大的教室中只剩下十几个了。</p>
<p>宿舍里，两个早出晚归复习考研，只有饭后才能看到人；两个每天忙着投简历参加测试，最近还在准备去西电附近租个房子蹲点招聘会…-_-…</p>
<p>每个人都找到了自己的归宿，这样就很好。</p>
<a id="more"></a>
<hr>
<p>回校以后生物钟调得不错，已经习惯11点躺下，尽量在11点半前睡着了。</p>
<p>然后也开始试了一段日子的早起跑步</p>
<blockquote>
<p>你问我这是第几次试图坚持跑步了？</p>
</blockquote>
<p>嗯，好多次了。（笑）</p>
<hr>
<blockquote>
<p>为什么不试试更好的学校呢？</p>
<blockquote>
<p>大概是因为我懒吧。。。</p>
</blockquote>
</blockquote>
<p>很多人都说可以再试试的。</p>
<p>暑假到处跑的心累了，也真的是因为我懒吧。</p>
<p>曾经走过好多地方，也曾经在好多学校里留下过足迹。本来也曾有过要去到大洋彼岸的打算，最后…</p>
<p>这里真的已经没有什么可以挑剔的了。</p>
<p>现在也已经开始补导师上次提过的缺的科目了。</p>
<p>虽然《Compilers.Principles,Techniques,&amp;Tools》、《Computer.Organization.and.Design》这两本书看得真的挺头疼的。</p>
<hr>
<p>暑假实习的时候，跟带队去的老师聊了挺久。</p>
<p>老师说我是我们系这几年里面难得出的一个肯好好钻东西，有好好发展学术的潜力的学生。期望我要么硕博连读，要么读完研考博到国外去深造。</p>
<p>真是汗啊，老师~（哭笑不得脸）~我真的只是想认真读完硕士，然后赶紧出来工作，赶紧挣钱回家而已。</p>
<hr>
<p>明天中午开会讲大四之后各种要操心的事情，周末开始给学校拼今年下半年的现场赛名额。</p>
<p>等一切都尘埃落定了之后，这半年就差不多结束咯。</p>
<p>然后下学期估计待在学校的时间会很少了。</p>
<blockquote>
<p>我曾经说过我一定要离开西安。</p>
</blockquote>
<p>并不是觉得这个城市不好或是怎么样，只是单纯地不想留在这里。现在原本的愿望也要达成了。</p>
<hr>
<p>So，各位晚安咯~</p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29431066&auto=1&height=66"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>我听过荒芜变成热闹<br>听过尘埃掩埋城堡<br>听过天空拒绝飞鸟<br>没听过你<br></blockquote>

<p>新生的军训喧闹过后，一切终于又步入正常的轨道。</p>
<p>一样上课，一样看书。</p>
<p>只是看着教室里的人越来越少，一开始是少掉十几个，然后少了一半，终于到了今天偌大的教室中只剩下十几个了。</p>
<p>宿舍里，两个早出晚归复习考研，只有饭后才能看到人；两个每天忙着投简历参加测试，最近还在准备去西电附近租个房子蹲点招聘会…-_-…</p>
<p>每个人都找到了自己的归宿，这样就很好。</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ISCA 2014 会议论文整理]]></title>
    <link href="http://jcf94.github.io/2015/08/31/2015-08-31-isca2014/"/>
    <id>http://jcf94.github.io/2015/08/31/2015-08-31-isca2014/</id>
    <published>2015-08-31T14:34:15.000Z</published>
    <updated>2015-09-01T00:26:20.000Z</updated>
    <content type="html"><![CDATA[<p>即将踏入 Computer Architecture 领域，准备从今年下半年开始把这个方向相关的国际顶级会议论文都下过来看看。</p>
<p>从 ISCA 2014 开始：</p>
<p>ISCA 是由 ACM 与 IEEE 共同主办的体系结构领域顶级会议，全名是 International Symposium on Computer Architecture 。</p>
<blockquote>
<p>话说，学校买了 IEEE 的刊文版权就是好哇~~~数字图书馆登上去直接就能下了，怀抱这么一个大金库，真是爽啊！！</p>
</blockquote>
<a id="more"></a>
<h1 id="Session_1:_Machines_and_Prototypes">Session 1: Machines and Prototypes</h1><ul>
<li><p>[238] Unifying on-chip and inter-node switching within the Anton 2 network<br>使用Anton 2网络来统一片上和节点间切换</p>
</li>
<li><p>[195] A Reconfigurable Fabric for Accelerating Large-Scale Datacenter Services<br>一种用于加速大型数据中心服务的可重构组织结构</p>
</li>
<li><p>[232] SCORPIO: A 36-Core Research Chip Demonstrating Snoopy Coherence</p>
</li>
</ul>
<h1 id="Session_2A:_Resilience">Session 2A: Resilience</h1><ul>
<li><p>[200] Avoiding Core’s DUE &amp; SDC via Acoustic Wave Detectors and Tailored Error Containment and Recovery</p>
</li>
<li><p>[221] MemGuard: A Low Cost and Energy Efficient Design to Support and Enhance Memory System Reliability</p>
</li>
<li><p>[212] GangES: Gang Error Simulation for Hardware Resiliency Evaluation</p>
</li>
<li><p>[227] Real-World Design and Evaluation of Compiler-Managed GPU Redundant Multithreading</p>
</li>
</ul>
<h1 id="Session_2B:_Design_Space_Exploration">Session 2B: Design Space Exploration</h1><ul>
<li><p>[198] ArchRanker: A Ranking Approach to Design Space Exploration</p>
</li>
<li><p>[196] Aladdin: A Pre-RTL, Power-Performance Accelerator Simulator Enabling Large Design Space Exploration of Customized Architectures</p>
</li>
<li><p>[236] SynFull: Synthetic Traffic Models Capturing Cache Coherent Behaviour</p>
</li>
<li><p>[218] Harnessing ISA Diversity: Design of a Heterogeneous-ISA Chip Multiprocessor</p>
</li>
</ul>
<h1 id="Session_3A:_Caches">Session 3A: Caches</h1><ul>
<li><p>[203] The Direct-to-Data (D2D) Cache: Navigating the Cache Hierarchy with a Single Lookup</p>
</li>
<li><p>[231] SC^2: A Statistical Compression Cache Scheme</p>
</li>
<li><p>[204] The Dirty-Block Index</p>
</li>
<li><p>[214] Going Vertical in Memory Management: Handling Multiplicity by Multi-policy</p>
</li>
</ul>
<h1 id="Session_3B:_GPUs_and_Parallelism">Session 3B: GPUs and Parallelism</h1><ul>
<li><p>[209] Fine-grain Task Aggregation and Coordination on GPUs</p>
</li>
<li><p>[208] Enabling Preemptive Multiprogramming on GPUs</p>
</li>
<li><p>[234] Single-Graph Multiple Flows: Energy Efficient Design Alternative for GPGPUs</p>
</li>
<li><p>[215] HELIX-RC: An Architecture-Compiler Co-Design for Automatic Parallelization of Irregular Programs</p>
</li>
</ul>
<h1 id="Session_4:_Emerging_Technologies">Session 4: Emerging Technologies</h1><ul>
<li><p>[206] Efficient Digital Neurons for Large Scale Cortical Architectures</p>
</li>
<li><p>[197] An Examination of the Architecture and System-level Tradeoffs of Employing Steep Slope Devices in 3D CMPs</p>
</li>
<li><p>[233] STAG: Spintronic-Tape Architecture for GPGPU Cache Hierarchies</p>
</li>
</ul>
<h1 id="Session_5A:_NVRAM">Session 5A: NVRAM</h1><ul>
<li><p>[222] Memory Persistency</p>
</li>
<li><p>[228] Reducing Access Latency of MLC PCMs through Line Striping</p>
</li>
<li><p>[216] HIOS: A Host Interface 110 Scheduler for Solid State Disks</p>
</li>
</ul>
<h1 id="Session_5B:_Datacenters_and_Cloud">Session 5B: Datacenters and Cloud</h1><ul>
<li><p>[237] Towards Energy Proportionality for Large-Scale Latency-Critical Workloads</p>
</li>
<li><p>[235] SleepScale: Runtime Joint Speed Scaling and Sleep States Management for Power Efficient Data Centers</p>
</li>
<li><p>[224] Optimizing Virtual Machine Consolidation Performance on NUMA Server Architecture for Cloud Workloads</p>
</li>
</ul>
<h1 id="Session_6A:_DRAM">Session 6A: DRAM</h1><ul>
<li><p>[230] Row-Buffer Decoupling: A Case for Low-Latency DRAM Microarchitecture</p>
</li>
<li><p>[217] Half-DRAM: a High-bandwidth and Low-power DRAM Architecture from the Rethinking of Fine-grained Activation</p>
</li>
<li><p>[210] Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors</p>
</li>
</ul>
<h1 id="Session_6B:_Circuits_and_Architecture">Session 6B: Circuits and Architecture</h1><ul>
<li><p>[199] Architecture Implications of Pads as a Scarce Resource</p>
</li>
<li><p>[220] Increasing Off-Chip Bandwidth in Multi-Core Processors with Switchable Pins</p>
</li>
<li><p>[194] A Low Power and Reliable Charge Pump Design for Phase Change Memories</p>
</li>
</ul>
<h1 id="Session_7A:_Coherence_and_Replay">Session 7A: Coherence and Replay</h1><ul>
<li><p>[211] Fractal++: Closing the Performance Gap between Fractal and Conventional Coherence</p>
</li>
<li><p>[223] OmniOrder: Directory-Based Conflict Serialization of Transactions</p>
</li>
<li><p>[225] Pacifier: Record and Replay for Relaxed-Consistency Multiprocessors with Distributed Directory ProtocoL</p>
</li>
<li><p>[229] Replay Debugging: Leveraging Record and Replay for Program Debugging</p>
</li>
</ul>
<h1 id="Session_7B:_Security/OOO_Processors">Session 7B: Security/OOO Processors</h1><ul>
<li><p>[201] The CHERI capability model: Revisiting RISC in an age of risk</p>
</li>
<li><p>[202] CODOMs: Protecting Software with Code-centric Memory Domains</p>
</li>
<li><p>[205] EOLE: Paving the Way for an Effective Implementation of Value Prediction</p>
</li>
<li><p>[219] Improving the Energy Efficiency of Big Cores</p>
</li>
</ul>
<h1 id="Session_8:_Accelerators">Session 8: Accelerators</h1><ul>
<li><p>[213] General-Purpose Code Acceleration with Limited-Precision Analog Computation</p>
</li>
<li><p>[226] Race Logic: A Hardware Acceleration for Dynamic Programming Algorithms</p>
</li>
<li><p>[207] Eliminating Redundant Fragment Shader Executions on a Mobile GPU via Hardware Memoization</p>
</li>
<li><p>[239] WebCore: Architectural Support for Mobile Web Browsing</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>即将踏入 Computer Architecture 领域，准备从今年下半年开始把这个方向相关的国际顶级会议论文都下过来看看。</p>
<p>从 ISCA 2014 开始：</p>
<p>ISCA 是由 ACM 与 IEEE 共同主办的体系结构领域顶级会议，全名是 International Symposium on Computer Architecture 。</p>
<blockquote>
<p>话说，学校买了 IEEE 的刊文版权就是好哇~~~数字图书馆登上去直接就能下了，怀抱这么一个大金库，真是爽啊！！</p>
</blockquote>]]>
    
    </summary>
    
      <category term="IEEE" scheme="http://jcf94.github.io/tags/IEEE/"/>
    
      <category term="ISCA" scheme="http://jcf94.github.io/tags/ISCA/"/>
    
      <category term="论文" scheme="http://jcf94.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Manufactoria 一个好玩的自动机编程游戏]]></title>
    <link href="http://jcf94.github.io/2015/08/28/2015-08-28-manufactoria/"/>
    <id>http://jcf94.github.io/2015/08/28/2015-08-28-manufactoria/</id>
    <published>2015-08-28T11:25:48.000Z</published>
    <updated>2015-09-04T03:31:38.000Z</updated>
    <content type="html"><![CDATA[<p>自从在知乎上发现了这么个有意思的问题：</p>
<p><a href="http://www.zhihu.com/question/27535591" target="_blank" rel="external">有哪些很有「工程师情怀」的游戏？</a></p>
<p>，就时不时上去关注一下有没有新的回答。</p>
<p>原帖来自 <a href="http://www.matrix67.com/blog/archives/3306" target="_blank" rel="external">Matrix67</a> 当年刷NOIP的时候经常上的一个博客，好久没上了-_-///</p>
<p>引用下 Matrix67 的评价：</p>
<blockquote>
<p>这是我所见过的程序设计类 Puzzle 游戏中最好玩的一个。它是真正意义上的程序设计游戏，游戏不但提供了完备的读写和流程控制功能，甚至还引入了随机测试数据。游戏很快就会引入算法的思想，因为玩家渐渐会发现，这些谜题并不是单靠模拟就能解决的；后面的谜题则越发困难，需要相当有技巧性的算法设计，对脑力绝对是一个大挑战。如果你热爱算法与程序设计，你一定会爱上这个游戏的。</p>
</blockquote>
<a id="more"></a>
<hr>
<p>下面上游戏~这是个写得很简单的Flash游戏，整个swf就3M大小。</p>
<p>然后吐槽一下：谁说静态博客不好用的>_&lt;/ ！！！兼容html格式之后，音乐、视频、Flash游戏……啥都能给你插进来哈哈~~~</p>
<h1 id="游戏本体在此">游戏本体在此</h1><hr>
<object width="640" height="480" align="middle" id="flashobj" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"><param name="allowScriptAccess" value="sameDomain"><param name="allowFullScreen" value="false"><param name="movie" value="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-manufactoria.swf"><param name="quality" value="high"><embed name="flashcontent" width="640" height="480" align="middle" pluginspage="http://www.macromedia.com/go/getflashplayer" src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-manufactoria.swf" type="application/x-shockwave-flash" allowfullscreen="false" allowscriptaccess="sameDomain" quality="high"></object>

<ul>
<li><p>游戏来源：<a href="http://jayisgames.com/games/manufactoria/" target="_blank" rel="external">http://jayisgames.com/games/manufactoria/</a></p>
</li>
<li><p><a href="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-manufactoria.swf" target="_blank" rel="external">点此下载该游戏的swf文件</a></p>
</li>
</ul>
<hr>
<h1 id="我的游戏记录">我的游戏记录</h1><p>（话说不知道页面折叠这种东西能不能用html写出来…）</p>
<hr>
<h2 id="1-Robotoast！">1.Robotoast！</h2><p>就是从起点到终点。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-1.jpg" alt="1"></p>
<h2 id="2-Robocoffee！">2.Robocoffee！</h2><p>接收条件：起点是蓝色点。</p>
<p>一个Branch进行判断选择即可。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-2.jpg" alt="2"></p>
<h2 id="3-Robolamp！">3.Robolamp！</h2><p>接收条件：至少三个蓝色点。</p>
<p>这里我直接把Branch横着摆，红点则循环，蓝点通过，判断三次结束。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-3.jpg" alt="3"></p>
<h2 id="4-1-Robofish！">4.1.Robofish！</h2><p>接收条件：无红点。</p>
<p>遇到红点直接结束，蓝点循环即可。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-4.1.jpg" alt="4.1"></p>
<h2 id="5-1-Robobugs！">5.1.Robobugs！</h2><p>接收条件：必须是红蓝点交替。</p>
<p>正确的路径只有 红-&gt;蓝-&gt;红-&gt;循环 或者 蓝-&gt;红-&gt;蓝-&gt;循环，其他的都结束。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-5.1.jpg" alt="5.1"></p>
<h2 id="6-1-Robocats！">6.1.Robocats！</h2><p>接收条件：必须以两个蓝点结束。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-6.1.jpg" alt="6.1"></p>
<h2 id="4-2-RC_Cars！">4.2.RC Cars！</h2><p>从这里开始新增了一种设备：Writer。功能是能够在纸带上打印颜色点。</p>
<p>输出：把第一个点放在最后，输出整个序列。</p>
<p>只需处理第一个点，剩下的保持不变即可。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-4.2.jpg" alt="4.2"></p>
<h2 id="5-2-Robocars！">5.2.Robocars！</h2><p>输出：把蓝点替换成绿点，红点替换成黄点。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-5.2.jpg" alt="5.2"></p>
<h2 id="6-2-Robostilts！">6.2.Robostilts！</h2><p>输出：以绿点开始，黄点结束，中间是原始的输入序列。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-6.2.jpg" alt="6.2"></p>
<h2 id="7-1-Robobears！">7.1.Robobears！</h2><p>接收条件：起始点与结束点必须是相同颜色。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-7.1.jpg" alt="7.1"></p>
<h2 id="7-2-Milidogs！">7.2.Milidogs！</h2><p>接收条件：蓝点作为1，红点作为0，当纸袋表示的数字是奇数时才接收。</p>
<p>其实就是要求最后一个点是蓝点，思路与 6.1.Robocats！ 类似。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-7.2.jpg" alt="7.2"></p>
<h2 id="7-3-Androids!">7.3.Androids!</h2><p>接收条件：蓝点在前，后面要跟上相同数量的红点。</p>
<p>这一关真的是想了很久，受网上其他玩家的方案启发：</p>
<p>首先打上一个黄/绿点作为起始标记，然后对于序列中，第一个红/蓝点不打，其余打上相同颜色的点，然后循环。</p>
<p>简单地说就是每一轮减少一组红/蓝点，直到全部结束。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-7.3.png" alt="7.3"></p>
<h2 id="7-4-Roborockets！">7.4.Roborockets！</h2><p>输出：交换红/蓝点。</p>
<p>跟 5.2.Robocars！ 类似，也是替换点，这里只是加个起始的绿点标记即可。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-7.4.png" alt="7.4"></p>
<h2 id="7-5-Roboplanes!">7.5.Roboplanes!</h2><p>输出：输出全部蓝点，忽略红点。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-7.5.png" alt="7.5"></p>
<h2 id="7-6-Robomecha!">7.6.Robomecha!</h2><p>输出：把最后一个点放在最前面，输出原始序列。</p>
<p>与 4.2.RC Cars！ 相反。首先打上绿点标记，用于判断最后一个点，找到最后一个点以后剩下的就是原样输出了。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-7.6.png" alt="7.6"></p>
<h2 id="8-1-Soldiers！">8.1.Soldiers！</h2><p>输出：蓝点作为1，红点作为0，将序列代表的数字乘以8.</p>
<p>乘8就是左移3位，直接在末尾打上3个0即可。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-8.1.png" alt="8.1"></p>
<h2 id="8-2-Robotanks！">8.2.Robotanks！</h2><p>接收条件：蓝点作为1，红点作为0，当序列代表的数字大于15时接收。</p>
<p>15的二进制是1111，直接判断整个序列的数位是不是大于4即可。当然，一开始要先把先导0给消除掉。</p>
<p>用了最朴素的方法，因为判断太多导致摆放改了很久。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-8.2.png" alt="8.2"></p>
<h2 id="8-3-Robo-children！">8.3.Robo-children！</h2><p>接收条件：整个序列中蓝点的数量与红点的数量相同，顺序不限。</p>
<p>本题的思路与 7.3.Androids! 完全一致，没有顺序要求，只要把之前空着的另外一边补上即可。（话说当时做 7.3.Androids! 时就是先搭的一整个，最后发现有顺序要求才把左边的删掉的…）</p>
<h2 id=""><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-28-manufactoria-8.3.png" alt="8.3"></h2><p>未完待续</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自从在知乎上发现了这么个有意思的问题：</p>
<p><a href="http://www.zhihu.com/question/27535591">有哪些很有「工程师情怀」的游戏？</a></p>
<p>，就时不时上去关注一下有没有新的回答。</p>
<p>原帖来自 <a href="http://www.matrix67.com/blog/archives/3306">Matrix67</a> 当年刷NOIP的时候经常上的一个博客，好久没上了-_-///</p>
<p>引用下 Matrix67 的评价：</p>
<blockquote>
<p>这是我所见过的程序设计类 Puzzle 游戏中最好玩的一个。它是真正意义上的程序设计游戏，游戏不但提供了完备的读写和流程控制功能，甚至还引入了随机测试数据。游戏很快就会引入算法的思想，因为玩家渐渐会发现，这些谜题并不是单靠模拟就能解决的；后面的谜题则越发困难，需要相当有技巧性的算法设计，对脑力绝对是一个大挑战。如果你热爱算法与程序设计，你一定会爱上这个游戏的。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Flash" scheme="http://jcf94.github.io/tags/Flash/"/>
    
      <category term="自动机" scheme="http://jcf94.github.io/tags/%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="玩玩玩玩" scheme="http://jcf94.github.io/categories/%E7%8E%A9%E7%8E%A9%E7%8E%A9%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 多校联合集训 第一场]]></title>
    <link href="http://jcf94.github.io/2015/08/27/2015-08-27-multi1/"/>
    <id>http://jcf94.github.io/2015/08/27/2015-08-27-multi1/</id>
    <published>2015-08-27T13:12:43.000Z</published>
    <updated>2015-08-27T14:06:09.592Z</updated>
    <content type="html"><![CDATA[<p>暑假因为出去参加夏令营和各种事情，没有跟留在学校训练的小伙伴们一起打多校，想想还是挺惭愧的。</p>
<p>从大一进校开始，ACM已经打了快4年了，如果所有事情都弄完了，下半年可能还有机会最后收个尾…（咳咳，话说我退役贴都早写过了…）</p>
<p>试看了几题，发现这么长时间没有写题，思路都跟不上了。唉。</p>
<p>开始尝试补一下多校题吧。</p>
<a id="more"></a>
<h1 id="HDU_5289_1002_Assignment">HDU 5289 1002 Assignment</h1><p>Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>Tom owns a company and he is the boss. There are n staffs which are numbered from 1 to n in this company, and every staff has a ability. Now, Tom is going to assign a special task to some staffs who were in the same group. In a group, the difference of the ability of any two staff is less than k, and their numbers are continuous. Tom want to know the number of groups like this.</p>
<h2 id="Input">Input</h2><p>In the first line a number T indicates the number of test cases. Then for each case the first line contain 2 numbers n, k (1&lt;=n&lt;=100000, 0&lt;k&lt;=10^9),indicate the company has n persons, k means the maximum difference between abilities of staff in a group is less than k. The second line contains n integers:a[1],a[2],…,a<a href="0&lt;=a[i]&lt;=10^9">n</a>,indicate the i-th staff’s ability.</p>
<h2 id="Output">Output</h2><p>For each test，output the number of groups.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>2<br>4 2<br>3 1 2 4<br>10 5<br>0 3 4 5 2 1 6 7 8 9</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>5<br>28</p>
</blockquote>
<h2 id="Hint">Hint</h2><p>First Sample, the satisfied groups include:[1,1]、[2,2]、[3,3]、[4,4] 、[2,3]</p>
<h2 id="分析">分析</h2><p>真是落后了，看着题解还花了好长时间才想明白。。。</p>
<p>题目求的是<strong>连续的最大最小值之差不超过K的子序列的总个数</strong>。</p>
<p>因为要求子序列的连续性，本题可以使用单调队列的思想来解决。可以想象成一个滑动窗口从前面开始不断向后移动，需要维护的是两个指针：窗口的左端和右端。</p>
<ol>
<li>对于窗口的右端：<br>读入新的数据就可以看成是一个窗口右端不断右移的过程，我们需要做的就是对于每一个新加入的点，处理左端指针；</li>
<li>处理左端指针的过程，我们需要用到两个单调队列分别保存当前窗口的最大值和最小值：<br>当当前窗口中的最大值与最小值的差值大于等于K的时候，就是左端指针需要右移的时候。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID	: Chen Fan</span><br><span class="line">LANG	: G++</span><br><span class="line">PROG	: HDU 5289</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>],mi[<span class="number">100010</span>],ma[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> heada=<span class="number">1</span>,headi=<span class="number">1</span>,taila=<span class="number">0</span>,taili=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> front=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> (heada&lt;=taila&amp;&amp;a[ma[taila]]&lt;=a[i]) taila--;</span><br><span class="line">			<span class="keyword">while</span> (headi&lt;=taili&amp;&amp;a[mi[taili]]&gt;=a[i]) taili--;</span><br><span class="line"></span><br><span class="line">			taila++;</span><br><span class="line">			ma[taila]=i;</span><br><span class="line">			taili++;</span><br><span class="line">			mi[taili]=i;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> (a[ma[heada]]-a[mi[headi]]&gt;=k)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (front==ma[heada]) heada++;</span><br><span class="line">				<span class="keyword">if</span> (front==mi[headi]) headi++;</span><br><span class="line"></span><br><span class="line">				front++;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			ans+=i-front+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>暑假因为出去参加夏令营和各种事情，没有跟留在学校训练的小伙伴们一起打多校，想想还是挺惭愧的。</p>
<p>从大一进校开始，ACM已经打了快4年了，如果所有事情都弄完了，下半年可能还有机会最后收个尾…（咳咳，话说我退役贴都早写过了…）</p>
<p>试看了几题，发现这么长时间没有写题，思路都跟不上了。唉。</p>
<p>开始尝试补一下多校题吧。</p>]]>
    
    </summary>
    
      <category term="Multi-University-Training-Contest" scheme="http://jcf94.github.io/tags/Multi-University-Training-Contest/"/>
    
      <category term="ACM" scheme="http://jcf94.github.io/categories/ACM/"/>
    
      <category term="比赛" scheme="http://jcf94.github.io/categories/ACM/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Treap]]></title>
    <link href="http://jcf94.github.io/2015/08/23/2015-08-23-treap/"/>
    <id>http://jcf94.github.io/2015/08/23/2015-08-23-treap/</id>
    <published>2015-08-23T08:45:01.000Z</published>
    <updated>2015-08-23T12:51:03.556Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>据说平衡树界最经典的三大树是<br>SBT、Splay、Treap<br></blockquote>

<h1 id="从一道笔试题开始说起">从一道笔试题开始说起</h1><p>上午帮舍友助攻阿里笔试的时候，遇上这么一道题：</p>
<blockquote>
<p>输入是一些数对<code>&lt;a,b&gt;</code>，要求把它们用树结构存储下来，树的一个结点里面要同时保存a、b两个值，然后保证a是二叉搜索树性质，b是堆的性质。这样的树是唯一的。</p>
</blockquote>
<p>我心想…平衡树+堆…Tree+Heap…这不就是Treap嘛!!!</p>
<p>然而几大平衡树里面我学了SBT、Splay，没学Treap哇，当时就心凉了半截。</p>
<p>好在仔细看了看题，感觉实现起来不太难，于是试了下。</p>
<a id="more"></a>
<p>以下是上面这棵树的实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID	: Chen Fan</span><br><span class="line">LANG	: G++</span><br><span class="line">PROG	: tree</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> treenod</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> left,right,a,b;</span><br><span class="line">&#125; treenode;</span><br><span class="line"></span><br><span class="line">treenode tree[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> father[<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> treetail,root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rleft</span><span class="params">(<span class="keyword">int</span> now)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fa=father[now],ffa=father[fa];</span><br><span class="line">	</span><br><span class="line">	father[now]=ffa;</span><br><span class="line">	father[fa]=now;</span><br><span class="line">	tree[fa].right=tree[now].left;</span><br><span class="line">	tree[now].left=fa;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!ffa)</span><br><span class="line">	&#123;</span><br><span class="line">		father[now]=<span class="number">0</span>;</span><br><span class="line">		root=now;</span><br><span class="line">	&#125; <span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		father[now]=ffa;</span><br><span class="line">		<span class="keyword">if</span> (fa==tree[ffa].left)</span><br><span class="line">		&#123;</span><br><span class="line">			tree[ffa].left=now;</span><br><span class="line">		&#125; <span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			tree[ffa].right=now;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rright</span><span class="params">(<span class="keyword">int</span> now)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fa=father[now],ffa=father[fa];</span><br><span class="line">	</span><br><span class="line">	father[now]=ffa;</span><br><span class="line">	father[fa]=now;</span><br><span class="line">	tree[fa].left=tree[now].right;</span><br><span class="line">	tree[now].right=fa;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!ffa)</span><br><span class="line">	&#123;</span><br><span class="line">		father[now]=<span class="number">0</span>;</span><br><span class="line">		root=now;</span><br><span class="line">	&#125; <span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		father[now]=ffa;</span><br><span class="line">		<span class="keyword">if</span> (fa==tree[ffa].left)</span><br><span class="line">		&#123;</span><br><span class="line">			tree[ffa].left=now;</span><br><span class="line">		&#125; <span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			tree[ffa].right=now;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> now)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(father[now]&amp;&amp;tree[now].b&gt;tree[father[now]].b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (now==tree[father[now]].left) rright(now);</span><br><span class="line">		<span class="keyword">else</span> rleft(now);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!treetail)</span><br><span class="line">	&#123;</span><br><span class="line">		treetail++;</span><br><span class="line">		tree[<span class="number">1</span>].a=a;</span><br><span class="line">		tree[<span class="number">1</span>].b=b;</span><br><span class="line">	&#125; <span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a&lt;tree[r].a) </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!tree[r].left) </span><br><span class="line">			&#123;</span><br><span class="line">				treetail++;</span><br><span class="line">				tree[r].left=treetail;</span><br><span class="line">				father[treetail]=r;</span><br><span class="line">				tree[treetail].a=a;</span><br><span class="line">				tree[treetail].b=b;</span><br><span class="line">				check(treetail);</span><br><span class="line">			&#125; <span class="keyword">else</span> add(tree[r].left,a,b);</span><br><span class="line">		&#125; <span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!tree[r].right)</span><br><span class="line">			&#123;</span><br><span class="line">				treetail++;</span><br><span class="line">				tree[r].right=treetail;</span><br><span class="line">				father[treetail]=r;</span><br><span class="line">				tree[treetail].a=a;</span><br><span class="line">				tree[treetail].b=b;</span><br><span class="line">				check(treetail);</span><br><span class="line">			&#125; <span class="keyword">else</span> add(tree[r].right,a,b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outp</span><span class="params">(<span class="keyword">int</span> now)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"&lt;%d,%d&gt;"</span>,tree[now].a,tree[now].b);</span><br><span class="line">	<span class="keyword">if</span> (tree[now].left) outp(tree[now].left);</span><br><span class="line">	<span class="keyword">if</span> (tree[now].right) outp(tree[now].right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//init</span></span><br><span class="line">	<span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));</span><br><span class="line">	<span class="built_in">memset</span>(father,<span class="number">0</span>,<span class="keyword">sizeof</span>(father));</span><br><span class="line">	treetail=<span class="number">0</span>;</span><br><span class="line">	root=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//insert</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b)==<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		add(root,a,b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//output prefix</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,tree[root].a,tree[root].b);</span><br><span class="line">	outp(root);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先按照二叉搜索树的标准插入数据，然后进行堆结构调整。</p>
<p>正常的堆是满二叉树，直接使用子节点2倍和2倍+1的标号来维护，调整时是上下交换。而为了保证二叉搜索树的性质不被破坏，这里的调整需要用到子节点与父节点的左右旋来实现。</p>
<p>代码还是比较简单的。</p>
<p>然后既然今天开了这个头，下面顺手学习一下真正的Treap是怎么实现的。</p>
<h1 id="Treap">Treap</h1><hr>
<p>真正的Treap其实跟上面那个结构已经非常像了，主体是二叉搜索树，然后在一般的结点之外另外加一个<strong>优先级的域</strong>，并且使用<strong>堆</strong>来维护优先级。</p>
<h2 id="为什么要加个堆？">为什么要加个堆？</h2><p>我们知道平衡树的出现是为了解决二叉搜索树可能不平衡的问题，因此平衡树越稳定（越平衡），那么进行操作时的渐进复杂度越接近$O(logn)$</p>
<p>Treap通过堆来限定了整棵平衡树的结构：</p>
<p>对于一棵二叉搜索树来说，给定的输入顺序不同，最终生成得到的可能是不同的树结构，而加上堆限定之后，整棵树的形态就固定了。</p>
<p>也就是说：</p>
<blockquote>
<p>对于相同的一组数据，输入顺序并不改变Treap的最终形态；数据相同，则Treap的最终形态是唯一的</p>
</blockquote>
<p>那么另外一个问题来了，正常情况下我们只会得到a序列，b是哪里来的呢？</p>
<p>答案是<strong>随机数</strong>！</p>
<p>输入数据时，我们对于每一个a都给它生成一个随机数b，然后按照堆的性质去维护b。给a序列加了个b序列之后，剩下的部分就跟上面的笔试题一样了，实现起来也比较简单。</p>
<p>数学上可以证明，随机数+堆的限定可以保证Treap达到$O(logn)$的期望深度。</p>
<h1 id="后话">后话</h1><hr>
<p>网上找到的一些资料上说Treap可以完成Splay的所有操作，我还没找到详细的说明。暂时还没有想明白。</p>
<p>如果只是按照上面那种限定死了的树结构的话，完全不明白这货是怎么可能达到像Splay那样灵活的。</p>
<hr>
<p>上面的代码是上午临时打的，本来想好好改进下。</p>
<p>…</p>
<p>然后，网上搜了下别人的代码</p>
<p>…</p>
<p>找到一些版本的Treap是没有左右旋的！！</p>
<p>顿时就又吓到了！！</p>
<p>一个之前听说过，然而一直被吓到的新名词出现了：</p>
<p><strong>可持久化数据结构</strong>！</p>
<p><strong>可持久化Treap</strong>！</p>
<p>没有左右旋，而是使用切分和合并来完成整个结构的维护。</p>
<p>大概只有这种水平才能达到Splay的灵活性吧。</p>
<p>于是瞬间就不想改原来那个左右旋的代码了。待日后有兴趣了，再把可持久化这部分补上吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>据说平衡树界最经典的三大树是<br>SBT、Splay、Treap<br></blockquote>

<h1 id="从一道笔试题开始说起">从一道笔试题开始说起</h1><p>上午帮舍友助攻阿里笔试的时候，遇上这么一道题：</p>
<blockquote>
<p>输入是一些数对<code>&lt;a,b&gt;</code>，要求把它们用树结构存储下来，树的一个结点里面要同时保存a、b两个值，然后保证a是二叉搜索树性质，b是堆的性质。这样的树是唯一的。</p>
</blockquote>
<p>我心想…平衡树+堆…Tree+Heap…这不就是Treap嘛!!!</p>
<p>然而几大平衡树里面我学了SBT、Splay，没学Treap哇，当时就心凉了半截。</p>
<p>好在仔细看了看题，感觉实现起来不太难，于是试了下。</p>]]>
    
    </summary>
    
      <category term="Treap" scheme="http://jcf94.github.io/tags/Treap/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM" scheme="http://jcf94.github.io/categories/ACM/"/>
    
      <category term="算法学习" scheme="http://jcf94.github.io/categories/ACM/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网络流整理]]></title>
    <link href="http://jcf94.github.io/2015/08/22/2015-08-22-networkflow/"/>
    <id>http://jcf94.github.io/2015/08/22/2015-08-22-networkflow/</id>
    <published>2015-08-22T00:21:16.000Z</published>
    <updated>2015-08-22T02:10:31.341Z</updated>
    <content type="html"><![CDATA[<p>今天来整理一下网络流的相关内容。</p>
<p>首先贴一个博客：<a href="http://mindlee.com/2011/11/19/network-flow/" target="_blank" rel="external">网络流(Network Flow)</a></p>
<p>关于网络流的介绍，这里都讲得比较详细了。</p>
<a id="more"></a>
<p>然后是模板题：HDU 3549</p>
<h1 id="Flow_Problem">Flow Problem</h1><p>Time Limit: 5000/5000 MS (Java/Others)    Memory Limit: 65535/32768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>Network flow is a well-known difficult problem for ACMers. Given a graph, your task is to find out the maximum flow for the weighted directed graph.</p>
<h2 id="Input">Input</h2><p>The first line of input contains an integer T, denoting the number of test cases.</p>
<p>For each test case, the first line contains two integers N and M, denoting the number of vertexes and edges in the graph. (2 &lt;= N &lt;= 15, 0 &lt;= M &lt;= 1000)</p>
<p>Next M lines, each line contains three integers X, Y and C, there is an edge from X to Y and the capacity of it is C. (1 &lt;= X, Y &lt;= N, 1 &lt;= C &lt;= 1000)</p>
<h2 id="Output">Output</h2><p>For each test cases, you should output the maximum flow from source 1 to sink N.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>2<br>3 2<br>1 2 1<br>2 3 1<br>3 3<br>1 2 1<br>2 3 1<br>1 3 1</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>Case 1: 1<br>Case 2: 2</p>
</blockquote>
<h1 id="算法模板">算法模板</h1><h2 id="最基础的Edmonds-Karp（EK）算法">最基础的Edmonds-Karp（EK）算法</h2><p>每一次运行都是从源点到汇点，广搜找一遍增广路。如果能够找到，则反向推回去把流加上去，直到找不到任何其他增广路为止，则结束。</p>
<p>复杂度是$O(V*E^2)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID	: Chen Fan</span><br><span class="line">LANG	: G++</span><br><span class="line">PROG	: 3549_EK</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> start[<span class="number">100</span>],num[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod &#123;</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125; node;</span><br><span class="line">node edge[<span class="number">3000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tail,front[<span class="number">100</span>],minn,next;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">bool</span> flag[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">	<span class="keyword">int</span> outp[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">	q.push(<span class="number">1</span>);</span><br><span class="line">	front[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	outp[<span class="number">1</span>]=<span class="number">2147483647</span>;</span><br><span class="line">	flag[<span class="number">1</span>]=<span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> now=q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num[now];i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> next=edge[start[now]+i].y;</span><br><span class="line">			<span class="keyword">if</span> (!flag[next]&amp;&amp;c[now][next]&gt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				flag[next]=<span class="keyword">true</span>;</span><br><span class="line">				q.push(next);</span><br><span class="line">				front[next]=now;</span><br><span class="line">				outp[next]=min(outp[now],c[now][next]);</span><br><span class="line">				<span class="keyword">if</span> (next==n)</span><br><span class="line">				&#123;</span><br><span class="line">					minn=outp[next];</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">		tail=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> x,y,z;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">			<span class="keyword">if</span> (!(c[x][y]||c[y][x]))</span><br><span class="line">			&#123;</span><br><span class="line">				tail++;</span><br><span class="line">				edge[tail].x=x;</span><br><span class="line">				edge[tail].y=y;</span><br><span class="line">				tail++;</span><br><span class="line">				edge[tail].x=y;</span><br><span class="line">				edge[tail].y=x;</span><br><span class="line">			&#125;</span><br><span class="line">			c[x][y]+=z;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">		<span class="keyword">int</span> o=<span class="number">0</span>;</span><br><span class="line">		sort(&amp;edge[<span class="number">1</span>],&amp;edge[<span class="number">1</span>+tail],op);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (o!=edge[i].x)</span><br><span class="line">			&#123;</span><br><span class="line">				o=edge[i].x;</span><br><span class="line">				start[o]=i;</span><br><span class="line">			&#125;</span><br><span class="line">			num[o]++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (find(n))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> i=n,j=front[n];</span><br><span class="line">			<span class="keyword">while</span>(j)</span><br><span class="line">			&#123;</span><br><span class="line">				c[j][i]-=minn;</span><br><span class="line">				c[i][j]+=minn;</span><br><span class="line">				i=j;</span><br><span class="line">				j=front[i];</span><br><span class="line">			&#125;</span><br><span class="line">			ans+=minn;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,tt,ans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ISAP算法">ISAP算法</h2><p>引用一下 <a href="http://www.cnblogs.com/georgechen-ena/archive/2011/11/07/2240185.html" target="_blank" rel="external">网络流ISAP算法的简单介绍（zz）</a></p>
<blockquote>
<p>众所周知，在网络流的世界里，存在2类截然不同的求解思想，就是比较著名的预流推进与增广路，两者都需要反向边的小技巧。</p>
<p>其中预流推进的算法思想是以边为单元进行推流操作。具体流程如下:置初始点邻接边满流并用一次反向bfs对每个结点计算反向距离标号，定义除汇点外存量大于出量的结点为活动结点，每次对活动结点按允许边（u-&gt;v:d[u]=d[v]+1）进行推流操作，直到无法推流或者该点存量为0，若u点此时仍为活动结点，则进行重标号，使之等于原图中进行推操作后的邻接结点的最小标号+1，并将u点入队。当队列为空时，算法结束，只有s点和t点存量非0，网络中各顶点无存量，无法找到增广路继续增广，则t点存量为最大流。</p>
<p>而增广路的思想在于每次从源点搜索出一条前往汇点的增广路，并改变路上的边权，直到无法再进行增广，此时汇点的增广量即为最大流。两者最后的理论基础依然是增广路定理，而在理论复杂度上预流推进要显得比较优秀。其中的HLPP高标预流推进的理论复杂度已经达到了另人发指的$O（\sqrt{m}*n^2）$，但是其编程复杂度也是同样的令人发指</p>
<p>于是我们能否在编程复杂度和算法复杂度上找到一个平衡呢，答案是肯定的。我们使用增广路的思想，而且必须进行优化。因为原始的增广路算法（例如EK）是非常悲剧的。于是有人注意到了预流推进中的标号法，在增广路算法中引入允许弧概念，每次反搜残留网络得到结点标号，在正向增广中利用递归进行连续增广，于是产生了基于分层图的Dinic算法。一些人更不满足于常规Dinic所带来的提升，进而加入了多路分流增广的概念，即对同一顶点的流量，分多路同时推进，再加上比较复杂的手工递归，使得Dinic已经满足大部分题目的需要。</p>
<p>然而这样做就是增广路算法优化的极限么？答案永远是不。人们在Dinic中只类比了预流推进的标号技术，而重标号操作却没有发挥得淋漓尽致。于是人们在Dinic的基础上重新引入了重标号的概念，使得算法无须在每次增广后再进行BFS每个顶点进行距离标号，这种主动标号技术使得修正后算法的速度有了不少提高。但这点提高是不足称道的，人们又发现当某个标号的值没有对应的顶点后，即增广路被截断了，于是算法便可以提前结束，这种启发式的优化称为Gap优化。最后人们结合了<strong>连续增广，分层图，多路增广，Gap优化，主动标号</strong>等穷凶极恶的优化，更甚者在此之上狂搞个手动递归，于是产生了增广路算法的高效算法–ISAP算法。</p>
<p>虽然ISAP算法的理论复杂度仍然不可超越高标预流推进，但其编程复杂度已经简化到发指，如此优化，加上不逊于Dinic的速率（在效率上手工Dinic有时甚至不如递归ISAP），我们没有不选择它的理由。</p>
</blockquote>
<p>ISAP是将SAP的预处理广搜得到标号优化进了整个过程中，代码更简洁，而效率也是更快了。</p>
<p>以下还是上面这题的ISAP解法：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID	: Chen Fan</span><br><span class="line">LANG	: G++</span><br><span class="line">PROG	: 3549_ISAP</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> start[<span class="number">100</span>],num[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod &#123;</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125; node;</span><br><span class="line">node edge[<span class="number">3000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tail,front[<span class="number">100</span>],minn,next,gap[<span class="number">100</span>],h[<span class="number">100</span>],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> flow)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (now==n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> minh=n-<span class="number">1</span>,lv=flow,d;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num[now];j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> next=edge[start[now]+j].y;</span><br><span class="line">		<span class="keyword">if</span> (c[now][next]&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (h[next]+<span class="number">1</span>==h[now])</span><br><span class="line">			&#123;</span><br><span class="line">				d=min(lv,c[now][next]);</span><br><span class="line"></span><br><span class="line">				d=dfs(next,d);</span><br><span class="line"></span><br><span class="line">				c[now][next]-=d;</span><br><span class="line">				c[next][now]+=d;</span><br><span class="line"></span><br><span class="line">				lv-=d;</span><br><span class="line">				<span class="keyword">if</span> (h[<span class="number">1</span>]&gt;=n) <span class="keyword">return</span> flow-lv;</span><br><span class="line">				<span class="keyword">if</span> (lv==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (minh&gt;h[next]) minh=h[next];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (lv==flow)</span><br><span class="line">	&#123;</span><br><span class="line">		gap[h[now]]--;</span><br><span class="line">		<span class="keyword">if</span> (!gap[h[now]]) h[<span class="number">1</span>]=n;</span><br><span class="line">		h[now]=minh+<span class="number">1</span>;</span><br><span class="line">		gap[h[now]]++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> flow-lv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> m;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">		tail=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> x,y,z;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">			<span class="keyword">if</span> (!(c[x][y]||c[y][x]))</span><br><span class="line">			&#123;</span><br><span class="line">				tail++;</span><br><span class="line">				edge[tail].x=x;</span><br><span class="line">				edge[tail].y=y;</span><br><span class="line">				tail++;</span><br><span class="line">				edge[tail].x=y;</span><br><span class="line">				edge[tail].y=x;</span><br><span class="line">			&#125;</span><br><span class="line">			c[x][y]+=z;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">		<span class="keyword">int</span> o=<span class="number">0</span>;</span><br><span class="line">		sort(&amp;edge[<span class="number">1</span>],&amp;edge[<span class="number">1</span>+tail],op);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (o!=edge[i].x)</span><br><span class="line">			&#123;</span><br><span class="line">				o=edge[i].x;</span><br><span class="line">				start[o]=i;</span><br><span class="line">			&#125;</span><br><span class="line">			num[o]++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(gap,<span class="number">0</span>,<span class="keyword">sizeof</span>(gap));</span><br><span class="line">		<span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"></span><br><span class="line">		gap[<span class="number">1</span>]=n;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (h[<span class="number">1</span>]&lt;n)</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=dfs(<span class="number">1</span>,<span class="number">2147483647</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,tt,ans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天来整理一下网络流的相关内容。</p>
<p>首先贴一个博客：<a href="http://mindlee.com/2011/11/19/network-flow/">网络流(Network Flow)</a></p>
<p>关于网络流的介绍，这里都讲得比较详细了。</p>]]>
    
    </summary>
    
      <category term="网络流" scheme="http://jcf94.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="ACM" scheme="http://jcf94.github.io/categories/ACM/"/>
    
      <category term="算法学习" scheme="http://jcf94.github.io/categories/ACM/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BIOS内核载入的方式（引导实验）]]></title>
    <link href="http://jcf94.github.io/2015/08/19/2015-08-19-biosinit/"/>
    <id>http://jcf94.github.io/2015/08/19/2015-08-19-biosinit/</id>
    <published>2015-08-19T10:20:21.000Z</published>
    <updated>2015-09-09T03:10:13.000Z</updated>
    <content type="html"><![CDATA[<p>之前花了点时间稍微研究了下系统内核载入，重新翻出来整理一下：</p>
<h1 id="内核载入之前的工作">内核载入之前的工作</h1><hr>
<p>1981年IBM PC刚推出时，系统只带有640K的的RAM，内存寻址范围最大也只有1M。现如今基本的32位机都能寻址到4G，经过CPU的新特性更是可以支持到64G的物理内存。但是为了与原来的PC想兼容，系统1M一下物理内存使用分配上仍然保持与原来一致。ROM BIOS都在物理内存能寻址的最高端位置处，所以在大于1M内存的新计算机上，ROM BIOS最后会被映射到1M末尾的 Shadow 区域中。</p>
<a id="more"></a>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-19-biosinit-1.jpg" alt="内核"></p>
<p>计算机上电初始化时，物理内存被设置成从地址0开始的连续区域。除了地址从0xA0000~0xFFFFF（640K~1M）存放显存和ROM BIOS和0xFFFE0000~0xFFFFFFFF（4G的最后64K）存放ROM BIOS以外，其他部分都可以用作主要内存。</p>
<p>后续内核载入之后会重新分配，以后再研究。</p>
<p>x86体系的PC启动之后由BIOS完成自检，然后开始搜索外存上的引导信息，查找设备进行系统启动。BIOS会把硬盘等设备的头512字节数据复制到内存，检查这512字节是不是以16进制的0x55和0xaa结尾，这是启动引导程序的标记。</p>
<h1 id="用汇编写一个简易的引导程序">用汇编写一个简易的引导程序</h1><hr>
<p>下面是一个简单的程序：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.global start</span><br><span class="line">.code16</span><br><span class="line">.text</span><br><span class="line">start:</span><br><span class="line">        movw $<span class="number">0xb800</span>,%ax</span><br><span class="line">        movw %ax,%ds</span><br><span class="line">        movb $<span class="number">0x41</span>,(<span class="number">0</span>)</span><br><span class="line">        movb $<span class="number">0x1f</span>,(<span class="number">1</span>)</span><br><span class="line">hlt</span><br></pre></td></tr></table></figure>
<p><code>.global start</code> 这一句把start标签做全局符号导出，后面链接的时候会用到。</p>
<p>把代码保存为boot.s文件。然后用gas的as.exe和ld.exe两个程序真正把这段汇编代码处理成机器码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">as -o boot.o boot.s</span><br><span class="line"></span><br><span class="line">ld -Ttext <span class="number">0</span>x200 <span class="operator">-s</span> -o boot --entry start  boot.o</span><br></pre></td></tr></table></figure>
<p><code>-Ttext 0x200</code> 的作用是让输出的代码设置为从boot输出文件的0x200位置开头，否则我们就很难确定我们得到的boot文件从哪开始才是代码，一会写入的时候也从这里写就行。</p>
<p>ld 命令里的 <code>--entry start</code> 这段就是我们之前的汇编文件中需要写 <code>.global start</code> 这句声明的原因。指定入口。</p>
<p>在保护模式启动之前，微机处于实地址模式，这个时候需要先设定数据段段寄存器的地址，然后就可以用一个16位的地址来访问内存开头的1M空间了。</p>
<p><code>.code16</code> 这一句声明是为了让gas了解到这段程序是为实模式编写的，且限定为16位的汇编编译。</p>
<p>首先把数据段寄存器设置成0xb800，这样，地址0就会指向PC的CPU中用来显示屏幕的一段内存的开头。在这个CPU的最初的阶段，一般屏幕有80行，25列，而当我们把数据段寄存器赋予值0xb800，地址0所指向的字节就代表第一行第一个字符，这里是ascii码中的大写字母A，即0x41。地址1现在指向的字节代表了第一行第一个字符的字体颜色和背景颜色，格式与windows命令行的color命令一样。</p>
<p>详细如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">颜色设置</span><br><span class="line">颜色属性由两个十六进制数字指定 -- 第一个为背景，第二个则为前景。每个数字可以为以下任何值之一:</span><br><span class="line"><span class="constant">0</span> = 黑色</span><br><span class="line"><span class="constant">1</span> = 蓝色</span><br><span class="line"><span class="constant">2</span> = 绿色</span><br><span class="line"><span class="constant">3</span> = 浅绿色</span><br><span class="line"><span class="constant">4</span> = 红色</span><br><span class="line"><span class="constant">5</span> = 紫色</span><br><span class="line"><span class="constant">6</span> = 黄色</span><br><span class="line"><span class="constant">7</span> = 白色</span><br><span class="line"><span class="constant">8</span> = 灰色</span><br><span class="line"><span class="constant">9</span> = 淡蓝色</span><br><span class="line"><span class="constant">A</span> = 淡绿色</span><br><span class="line"><span class="constant">B</span> = 淡浅绿色</span><br><span class="line"><span class="constant">C</span> = 淡红色</span><br><span class="line"><span class="constant">D</span> = 淡紫色</span><br><span class="line"><span class="constant">E</span> = 淡黄色</span><br><span class="line"><span class="constant">F</span> = 亮白色</span><br></pre></td></tr></table></figure>
<p>如果把上面这段程序作为一个引导写进硬盘，则之后理论上将能够看到运行结果是屏幕上出现一个蓝底白字的A。</p>
<h1 id="准备写入存储设备，了解一下BIOS启动的流程，主要是MBR">准备写入存储设备，了解一下BIOS启动的流程，主要是MBR</h1><hr>
<p>完成编译之后需要把这块写入硬盘/U盘等存储设备。</p>
<p>刚开始我是拿U盘来试的，结果差点把我的U盘给毁了……汗……后来想到在VMware虚拟机里面直接新建一块硬盘来做。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-19-biosinit-2.jpg" alt="vmware1"></p>
<p>此时这块新建的磁盘里面什么都没有，但是用winhex打开磁盘1，看到的是这样的：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-19-biosinit-3.jpg" alt="vmware2"></p>
<p>winhex是一个16进制的编辑器，可以直接用来查看文件或者读取硬盘，免费版只能查看不能修改，不过这个对我们来说已经够了，因为之后的写硬盘操作我们要用C语言直接完成。</p>
<p>不管硬盘上设定的一扇区有多大，第一个扇区的引导都是固定512B，可以看到前512B的最后两个字节是 <code>55 AA</code>，即引导结束标志。然后开始部分是一些初始程序和找不到操作系统的提示信息。</p>
<p>这些东西都是在创建硬盘的时候里面默认写着的，如果对此块硬盘进行引导的话，将返回这些错误信息。</p>
<hr>
<p>下面解释一下MBR的相关知识：</p>
<p>MBR全称是Master Boot Record，硬盘主引导记录，它存在于硬盘的第一个物理扇区，也就是0面0磁道1扇区。</p>
<p>软盘上的引导扇区的作用是把软盘上存放的真正的操作系统内核读到内存中，然后跳到内核去执行。而MBR的作用却是找到硬盘上的活动分区，然后把活动分区上的引导记录读到内存中，然后再跳到此引导记录中去执行，后面的过程就与从软盘启动计算机一致了。</p>
<p>这里，可以把硬盘上的活动分区都看成一是个软盘。我们知道一个硬盘可以分成多个分区，也就是说一个硬盘可以视为由多个软盘组成，每一个分区都可以有自己的引导记录，这就如每个软盘上都有自己的引导记录一样。那么哪一个分区（软盘）用来真正引导计算机呢？这就由MBR来完成，MBR查看每个分区记录，当找到一个活动分区时，就把此活动分区的引导记录载入。</p>
<p>显然，必须有一个地方来存放硬盘的分区记录，这就是所谓的硬盘分区表。这个硬盘分区表也在MBR中，不过MBR只有一个扇区大小，既要有用来查找硬盘分区表的代码，还要包含硬盘分区表，所以这个硬盘分区表不可能很大。实际上，这个表只有四个表项，也就是说在一块硬盘里，最多有4个分区能用来引导电脑。</p>
<p>再来完整的看看<strong>MBR载入的流程</strong>，计算机启动的时候，MBR先把自己搬移到0x0600处，随后MBR开始查找内部的硬盘分区表表项，之后找到的引导程序会被BIOS载入到内存的0x7C00处，然后BIOS跳转到0x7C00处执行。</p>
<p>每个硬盘分区表表项的第一个字节只能是0x80或者0x00。如果是0×80表示这是一个活动分区，然后MBR再从这个表项中读出此分区在硬盘上的位置，将此分区的第一个扇区（含有此分区的引导记录）读入0x7C00处，然后跳到0x7C00处执行。如果表项的第一个字节是0x00，则查找下一个表项，直到四个表项都找完为止。如果此第一个字节既不是0x80又不是0x00，则打印一条错误信息。</p>
<p>MBR的整个结构，总长度上面说过了，一共512字节：</p>
<table>
<thead>
<tr>
<th>地址</th>
<th>说明</th>
<th>长度（Byte）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x000（0）</td>
<td>MBR中的执行代码</td>
<td>440</td>
</tr>
<tr>
<td>0x1B8（440）</td>
<td>磁盘商标（可选）</td>
<td>6</td>
</tr>
<tr>
<td>0X1BE（446）</td>
<td>分区表（共4项，每项16字节）</td>
<td>4*16=64</td>
</tr>
<tr>
<td>0X1FE（510）</td>
<td>引导记录标志（55AA）</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>分区表表项结构如图所示，总长度一共16字节：</p>
<table>
<thead>
<tr>
<th>地址偏移量</th>
<th>说明</th>
<th>长度（Byte）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x0</td>
<td>状态码，0x80表示为活动分区，0x00表示为非活动分区，其他值无效</td>
<td>1</td>
</tr>
<tr>
<td>0x1</td>
<td>分区的第一个扇区的CHS地址（磁头、柱面、扇区）</td>
<td>3</td>
</tr>
<tr>
<td>0x4</td>
<td>分区类型（FAT、NTFS、ext2、ext3等）</td>
<td>1</td>
</tr>
<tr>
<td>0x5</td>
<td>分区的最后一个扇区的CHS地址</td>
<td>3</td>
</tr>
<tr>
<td>0x8</td>
<td>分区的第一个扇区的LBA地址</td>
<td>4</td>
</tr>
<tr>
<td>0xC</td>
<td>分区的长度（多少个扇区）</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>所以写入前440个长度即可。后面的保持不变。</p>
<p>……之前拿U盘试的时候直接改了前面512B的所有内容，导致后来电脑直接读不出来U盘的东西了。因为分区表整个被破坏了。</p>
<h1 id="把引导写入硬盘">把引导写入硬盘</h1><hr>
<p>写硬盘用C语言来完成：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;windows.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    FILE *fp = NULL;</span><br><span class="line">    DWORD length;</span><br><span class="line">    HANDLE handle = NULL;</span><br><span class="line">    byte buff[<span class="number">512</span>],buf[<span class="number">512</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取硬盘，并把原始的引导信息保存下来</span></span><br><span class="line">    handle = CreateFile(TEXT(<span class="string">"\\\\.\\PHYSICALDRIVE1"</span>),GENERIC_READ,<span class="number">0</span>,NULL,OPEN_EXISTING,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (handle == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Cannot open the Device~!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(buff,<span class="number">0</span>,<span class="keyword">sizeof</span>(buff));</span><br><span class="line">	ReadFile(handle,buff,<span class="keyword">sizeof</span>(buff),&amp;length,NULL);</span><br><span class="line">	CloseHandle(handle);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i%<span class="number">16</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%02X "</span>,buff[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打开之前写好的引导文件</span></span><br><span class="line">    fp = fopen(<span class="string">"boot"</span>,<span class="string">"rb"</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Cannot open the File~!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    fseek(fp,<span class="number">0x200</span>,SEEK_SET); <span class="comment">//之前编译的时候指定的文件位置在这里用上</span></span><br><span class="line">    fread(buf,<span class="keyword">sizeof</span>(buf),<span class="number">1</span>,fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">440</span>;i&lt;<span class="number">512</span>;i++) buf[i]=buff[i]; <span class="comment">//保留原有的引导的440以后的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//把整理好的引导信息写进硬盘</span></span><br><span class="line">    handle = CreateFile(TEXT(<span class="string">"\\\\.\\PHYSICALDRIVE1"</span>),GENERIC_WRITE,<span class="number">0</span>,NULL,OPEN_EXISTING,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (handle == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Cannot open the Device~!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!WriteFile(handle,buf,<span class="keyword">sizeof</span>(buf),&amp;length,NULL))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Writing Error~!"</span>);</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Writing Success~!"</span>);</span><br><span class="line">    CloseHandle(handle);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写入完成之后，重启虚拟机，把硬盘1的启动项调到硬盘0前面去，然后启动！</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-19-biosinit-4.jpg" alt="vmware3"></p>
<p>BIOS闪了一下之后，果然左上角出现了预先设计的A，至此引导程序实验成功。然后重新恢复启动项正常进去之后硬盘1也没有出什么问题。</p>
<p>最后…<a href="http://www.cnblogs.com/bombless/archive/2010/12/28/writing-x86-os-part1.html" target="_blank" rel="external">这篇文章</a>给了我很大的帮助</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前花了点时间稍微研究了下系统内核载入，重新翻出来整理一下：</p>
<h1 id="内核载入之前的工作">内核载入之前的工作</h1><hr>
<p>1981年IBM PC刚推出时，系统只带有640K的的RAM，内存寻址范围最大也只有1M。现如今基本的32位机都能寻址到4G，经过CPU的新特性更是可以支持到64G的物理内存。但是为了与原来的PC想兼容，系统1M一下物理内存使用分配上仍然保持与原来一致。ROM BIOS都在物理内存能寻址的最高端位置处，所以在大于1M内存的新计算机上，ROM BIOS最后会被映射到1M末尾的 Shadow 区域中。</p>]]>
    
    </summary>
    
      <category term="BIOS" scheme="http://jcf94.github.io/tags/BIOS/"/>
    
      <category term="内核" scheme="http://jcf94.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="引导" scheme="http://jcf94.github.io/tags/%E5%BC%95%E5%AF%BC/"/>
    
      <category term="计算机系统结构" scheme="http://jcf94.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编译原理]]></title>
    <link href="http://jcf94.github.io/2015/08/16/2015-08-16-compilers/"/>
    <id>http://jcf94.github.io/2015/08/16/2015-08-16-compilers/</id>
    <published>2015-08-16T08:34:00.000Z</published>
    <updated>2015-09-09T03:09:45.000Z</updated>
    <content type="html"><![CDATA[<p>缺的东西只能自己补上，开始补编译原理。</p>
<p>刚买了的龙书还在路上，先从 Coursera 上找个公开课看着。</p>
<a id="more"></a>
<h1 id="介绍">介绍</h1><p>用来执行程序的工具一般分为两种：编译器（Compilers）和解释器（Interpreters）</p>
<p>编译器是将程序代码首先编译生成可执行文件，然后将数据输入可执行文件得到输出结果，也称为离线执行方式</p>
<p>解释器是将程序和数据输入解释器中，直接得到输出结果，过程是相当于程序代码代码指导解释器来完成对输入数据的处理，也称为在线执行方式</p>
<p>常把编译的过程分成5个阶段：</p>
<ol>
<li>Lexical Analysis        词法分析</li>
<li>Parsing                语法分析</li>
<li>Semantic Analysis    语义分析</li>
<li>Optimization            优化</li>
<li>Code Generation        代码生成</li>
</ol>
<hr>
<p>龙书终于到手咯~Hoho~</p>
<p>在github上发现个整理得挺全的龙书答案，顺手fork下来<a href="http://jcf94.github.io/dragon-book-exercise-answers">做了个gitbook</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>缺的东西只能自己补上，开始补编译原理。</p>
<p>刚买了的龙书还在路上，先从 Coursera 上找个公开课看着。</p>]]>
    
    </summary>
    
      <category term="Coursera" scheme="http://jcf94.github.io/tags/Coursera/"/>
    
      <category term="StandFord" scheme="http://jcf94.github.io/tags/StandFord/"/>
    
      <category term="公开课" scheme="http://jcf94.github.io/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
      <category term="编译原理" scheme="http://jcf94.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机系统结构" scheme="http://jcf94.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MX-BOARD 3.0 红轴]]></title>
    <link href="http://jcf94.github.io/2015/08/16/2015-08-16-cherry/"/>
    <id>http://jcf94.github.io/2015/08/16/2015-08-16-cherry/</id>
    <published>2015-08-16T07:42:32.000Z</published>
    <updated>2015-08-16T08:14:40.086Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>人生中的第一块原厂红轴<br>0.0<br>默默地入坑了<br></blockquote>

<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-08-16-cherry-P50816-154734.jpg" alt="cherry"></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>人生中的第一块原厂红轴<br>0.0<br>默默地入坑了<br></blockquote>

<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/]]>
    </summary>
    
      <category term="cherry" scheme="http://jcf94.github.io/tags/cherry/"/>
    
      <category term="机械键盘" scheme="http://jcf94.github.io/tags/%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/"/>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[中山卡内基in广州]]></title>
    <link href="http://jcf94.github.io/2015/07/27/2015-07-27-sysucmu/"/>
    <id>http://jcf94.github.io/2015/07/27/2015-07-27-sysucmu/</id>
    <published>2015-07-27T07:00:39.000Z</published>
    <updated>2015-08-01T13:08:04.915Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>多图预警！！！<br>千万不要用流量打开本帖！！！<br>0.0<br></blockquote>

<p>26号到的广州，27号报到。</p>
<p>其实想想科大已经非常让我满意了，找到了自己最喜欢的方向，也找到了国内这个方向上最强的导师。想说要不算了吧？直接买票回家吧？</p>
<p>这边是一路顺，对方许诺的福利待遇都是最好的；另一边还要花心思去准备全英面试，拿不到全奖剩下的就是高额的学费。</p>
<p><a href="http://weibo.com/u/3502824133" target="_blank" rel="external">李小莹童鞋</a>说不管怎么选，最后总会后悔没有选择另一条。</p>
<blockquote>
<p>我想我已经决定好了去中科大了。</p>
</blockquote>
<p>接下来几天随便过吧~^.^</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-142201.jpg" alt="此处应有营服照片"></p>
<a id="more"></a>
<p>初见广州这个城市，带给我的印象确实要比合肥好很多，这才是发达的大城市的样子</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50726-192739.jpg" alt="广州塔"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50726-193359.jpg" alt="广州夜景"></p>
<p>中山大学整体偏文，校园文化和环境也都非常不错，大概是我见过的这么多学校里面最好看的校园了。（厦大也不错，，，）</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-095041.jpg" alt="中大校外"></p>
<p>然后是学校里面的环境：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-142532.jpg" alt="宿舍楼"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-155738.jpg" alt="图书馆"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-160443.jpg" alt="中山像"></p>
<p>自行车棚。。。棚？</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-161846.jpg" alt="自行车棚"></p>
<h1 id="Day_One">Day One</h1><hr>
<p>上午，开营仪式，参观JIE大楼以及广州超算中心</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-160720.jpg" alt="牌匾"></p>
<p>由于是这几年新建的楼，环境真心好到爆~~~</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-160911.jpg" alt="JIE1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-161053.jpg" alt="JIE2"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-161417.jpg" alt="JIE3"></p>
<p>开营仪式：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-094929.jpg" alt="开营"></p>
<p>实验室环境：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-113609.jpg" alt="JIE内部"></p>
<p>之前在中科大已经见过超算中心了，来到这里主要能够让人觉得兴奋的是天河二号！好歹是目前为止世界上运算速度最快的东西了，对于一个热爱计算机的人来说，有机会看到本体还是很让人激动的</p>
<p>可惜一路参观都只是隔着一层玻璃，立面应该是重重防护的，据说有武警把守</p>
<p>更让人失望的是广州超算中心只是设备在这里而已，维护等工作大部分还是由其研发机构——国防科大来做的，而中山大学的学生基本是不可能有机会接触到超算的（想想在中科大参观的时候，演示的老师甚至把运算结点拆下来跟我们介绍里面的结构。。。-_-///差距啊）</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-111228.jpg" alt="天河二号1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-111428.jpg" alt="天河二号2"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-111543.jpg" alt="天河二号3"></p>
<p>下午，参观顺德JRI研究院</p>
<p>随手拍了张自己感觉很奇怪的照片~~&gt;_&lt;</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-132420-001.jpg" alt="自拍"></p>
<p>作为JIE的附属研究机构，也招生一批中山大学单学位的硕士生，可以说是完全为了产业而培养人才</p>
<p>环境自然也是好的不得了，宿舍还是单人间啊啊啊</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-143349.jpg" alt="高端"></p>
<p>下面是个微波暗室：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-151914.jpg" alt="微波暗室1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-151924.jpg" alt="微波暗室2"></p>
<h1 id="Day_Two">Day Two</h1><hr>
<p>上午，介绍CMU学习情况以及学业体系</p>
<p>整体跟我原来了解到的一致，JIE的学生完全等同于CMU的正式学生，学习方式、课程安排等都是纯美式的</p>
<p>下午，各位导师分别介绍各自实验室以及研究方向</p>
<p>。。。然而，并不感兴趣啊（话说我本来就准备好水掉明天的面试了的）</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50729-100249.jpg" alt="介绍1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50729-093237.jpg" alt="介绍2"></p>
<h1 id="Day_Three">Day Three</h1><hr>
<p>面试</p>
<p>JIE的面试相当吓人：</p>
<p>一个房间里坐着10多个老师，每人1分钟自我介绍，剩下9分钟由老师提问，每人定时只给10分钟，到时间会叫停，全英文面试。</p>
<p>英语方面我感觉没什么问题，关键9分钟提问阶段只问专业课，比赛、项目什么的经历直接被他们略过去了。然而一个外国教授随便从我成绩单里面随便挑了门课，，，挑中了高频，我去。。。</p>
<p>你要问我算法、数据结构，甚至信号系统、傅里叶变换啥的我都能扯啊，考我高频就悲剧了。</p>
<p>问我三极管在高频电路中的作用。</p>
<p>这玩意怎么答啊？基极调制，增益放大？然后下一个问题是为什么三极管在增益放大中是必不可缺的。</p>
<p>。。。好吧，我承认又被好久之前的吴老大说中了。</p>
<blockquote>
<p>基础没学好！！</p>
</blockquote>
<p>主要是平时就记个放大电路，记个振荡电路，没有深入考虑过里面的原理。</p>
<p>哎哎，水完了就好。中大卡内基再见！</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-081652.jpg" alt="宿舍一景"></p>
<p>早上好：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50731-070554.jpg" alt="早晨"></p>
<p>最后留几张吃的，午餐~~</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50730-115736.jpg" alt="午餐"></p>
<p>早餐：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50728-080019.jpg" alt="早餐"></p>
<hr>
<p>放假了半个多月，终于要踏上回家的路了</p>
<p>也是在前几天惊闻浙大软硬件协同实验室的BOSS陈天洲教授去世，顿时觉得世界真是太残酷了。</p>
<p>曾经在去中科大之前我最想去的就是浙大的这个实验室，现在这样对我来说就不再需要思考其他的了，9月份也不用再给自己找麻烦了，中科大将是我唯一的选择！</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50731-084443.jpg" alt="KFC"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50731-113048.jpg" alt="火车"></p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=4874932&auto=1&height=66"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>多图预警！！！<br>千万不要用流量打开本帖！！！<br>0.0<br></blockquote>

<p>26号到的广州，27号报到。</p>
<p>其实想想科大已经非常让我满意了，找到了自己最喜欢的方向，也找到了国内这个方向上最强的导师。想说要不算了吧？直接买票回家吧？</p>
<p>这边是一路顺，对方许诺的福利待遇都是最好的；另一边还要花心思去准备全英面试，拿不到全奖剩下的就是高额的学费。</p>
<p><a href="http://weibo.com/u/3502824133">李小莹童鞋</a>说不管怎么选，最后总会后悔没有选择另一条。</p>
<blockquote>
<p>我想我已经决定好了去中科大了。</p>
</blockquote>
<p>接下来几天随便过吧~^.^</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-27-sysucmu-P50727-142201.jpg" alt="此处应有营服照片"></p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://jcf94.github.io/tags/CMU/"/>
    
      <category term="SYSU" scheme="http://jcf94.github.io/tags/SYSU/"/>
    
      <category term="保研" scheme="http://jcf94.github.io/tags/%E4%BF%9D%E7%A0%94/"/>
    
      <category term="图集" scheme="http://jcf94.github.io/tags/%E5%9B%BE%E9%9B%86/"/>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[中科大in合肥]]></title>
    <link href="http://jcf94.github.io/2015/07/22/2015-07-22-ustc/"/>
    <id>http://jcf94.github.io/2015/07/22/2015-07-22-ustc/</id>
    <published>2015-07-22T13:12:30.000Z</published>
    <updated>2015-07-31T05:53:26.000Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>多图预警！！！<br>千万不要用流量打开本帖！！！<br>0.0<br></blockquote>

<p>7月19日到达USTC中科大，开始为期5天的夏令营。</p>
<p>拍了一堆照片记录下这几天的历程。。。</p>
<p>Hoho~~</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50719-150859.jpg" alt="营服"></p>
<a id="more"></a>
<p>发的全部材料在这里啦：</p>
<p>营服、便利贴、笔什么的……右边那个神秘的绿色小袋子打开以后是个背包！！！</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50719-151138.jpg" alt="材料"></p>
<p>校园卡，接下来几天吃饭就靠这个啦：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50719-170723.jpg" alt="校园卡"></p>
<p>在学校里面随便逛了逛，下面是各种：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50719-171600.jpg" alt="图书馆"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50719-172027.jpg" alt="学院"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50719-175230.jpg" alt="湖"></p>
<p>校外十字路口：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50719-182400.jpg" alt="十字路口"></p>
<p>校内食堂：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-165645.jpg" alt="食堂"></p>
<p>吃的东西还不错哦：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-111958.jpg" alt="大鸡腿"></p>
<hr>
<h1 id="Day_One">Day One</h1><hr>
<p>上午，开营仪式：</p>
<p>整个学校各个学院的夏令营成员都在这里。大约有一千多吧。。。中科大真是大手笔。。。</p>
<p>科大本科生与研究生的比例大约是 1:1.9 左右，算是个完完全全的研究性大学了。</p>
<p>研究内容包含了各种前言的科技：物理、化学、生物、计算机……各种</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-082736.jpg" alt="开营仪式1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-082828.jpg" alt="开营仪式2"></p>
<p>校史馆：</p>
<p>这位走来的是我们的志愿者廖东亮大大~~</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-104516.jpg" alt="校史馆"></p>
<p>科大校训里面都有“又红又专”几个字，刚听到的时候真是满满的汗呐……不过想想也是，中科大头顶就是中科院，中央最核心的研究精神一脉相承，必然是得“红”啦……</p>
<p>好处就是很多项目都是直接跟中科院那边搭上的，科研经费、设备这方面也都能够拿到很多资源。</p>
<p>校史馆里面的各种实物藏品：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-111249.jpg" alt="发动机"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-111258.jpg" alt="质子加速"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-111313.jpg" alt="VAX"></p>
<p>看，卫星！</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-111329.jpg" alt="东方红"></p>
<hr>
<p>下午，参观先研院以及科大讯飞</p>
<p>路上顺手留一张：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-133337.jpg" alt="此处应有自拍"></p>
<p>先研院大楼：</p>
<p>先进技术研究院，算是科大的一个校区吧，比较尖端的一些技术方向会在这边进行研究。也有很多是跟各个企业进行联系合作的实验室。</p>
<p>话说这一片是新建的，科研环境和生活环境那是没的说~~就是能不能来这里还得看导师的项目情况</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-141750.jpg" alt="先研院大楼"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-142443.jpg" alt="先研院景色"></p>
<p>先研院X楼：</p>
<p>整个楼据说从上方往下看就是一个大X哦</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-143535.jpg" alt="X楼"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-144259.jpg" alt="先研院1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-145316.jpg" alt="先研院2"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-145627.jpg" alt="先研院3"></p>
<p>龙芯什么的，各种尖端研究平台。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-152035.jpg" alt="龙芯"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-155737.jpg" alt="先研院4"></p>
<p>科大讯飞：</p>
<p>科大讯飞就是讯飞输入法、讯飞语音啥的。。。</p>
<p>核心科技是语音识别起家。</p>
<p>而搞好语音识别之后，剩下再发展就是类似科幻片里面那种人工智能的系统了，然而他们目前做出来的东西，确实已经让我觉得有点科幻的感觉了。这也是他们正在研究的“超脑”系统。</p>
<p>科大负责新技术的研发，讯飞集团这边负责把技术转化为产品。</p>
<blockquote>
<p>果然几天之后的导师面上，这个方向的导师真是被学生抢破门槛啊。。。0.0</p>
</blockquote>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50720-161603.jpg" alt="科大讯飞"></p>
<h1 id="Day_Two">Day Two</h1><hr>
<p>上午计算机学院开营仪式以及各实验室宣讲。</p>
<p>各个实验室的大牛导师纷纷使出浑身解数各种拉人，介绍各个实验室出过的论文、国家项目、资金什么的。</p>
<p>中科大计算机学院一共有10个左右的实验室，每个都各有特色，研究方向各有长处。</p>
<p>然而来的时候的目标就是<a href="">安虹教授</a>了，听了介绍下感觉还不错。目标更加坚定了。</p>
<hr>
<p>下午西区实验室参观，主要就是科技楼这块。</p>
<p>在14楼又听了一次安教授的介绍。</p>
<p>先进系统结构研究所。</p>
<p>主要方向是计算机系统结构设计，超级计算机、并行运算优化方面的工作。</p>
<p>安虹教授本人也是曾经参与龙芯好几代设计的核心计算机科学家。</p>
<p>感觉能跟她的不少教学理念都能契合上。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50721-174102.jpg" alt="安虹PPT"></p>
<h1 id="Day_Three">Day Three</h1><hr>
<p>上午，东区实验室、超算中心参观</p>
<p>超算中心大楼：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-081703.jpg" alt="超算中心"></p>
<p>下面就是各种超级计算机机群，整个机房里面都是各种风扇的轰鸣声，不过据说最大的一台不在这里放着</p>
<p>对计算机的兴趣就是觉得人类能够制造出瞬时计算速度如此庞大的设备来，特别是像超级计算机，代表了人类工业史上当前水平运算能力的极限！！</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-085014.jpg" alt="超算中心1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-085055.jpg" alt="超算中心2"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-085222.jpg" alt="超算中心3"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-085255.jpg" alt="超算中心4"></p>
<p>一般的超算机组其实也就是一堆服务器连在一起，主要需要处理的是超多核心机群的并行协同方面的问题。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-085641.jpg" alt="超算中心5"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-090105.jpg" alt="超算中心6"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-091150.jpg" alt="龙芯"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-091432.jpg" alt="超算中心7"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-091713.jpg" alt="超算中心8"></p>
<p>曙光I号：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-090711.jpg" alt="曙光I号"></p>
<p>由于我的目标已经基本上确定了，所以这边的实验室都没有具体再去逛了，也是听完各个导师的介绍就返回了宾馆。</p>
<hr>
<p>下午，冷餐会：</p>
<p>主要还是提供一个学生与导师之间相互交流的环境，活动啊、游戏啊什么的</p>
<p>Besides……好多吃的啊，科大真心大手笔~~~赞一个！！！</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-140113.jpg" alt="冷餐会1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-140215.jpg" alt="冷餐会2"></p>
<p>Rio和蛋挞：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-143203.jpg" alt="Rio"></p>
<p>好多KFC蛋挞哇：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-154156.jpg" alt="蛋挞"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50722-160030.jpg" alt="冷餐会3"></p>
<p>我是不会告诉你活动结束的时候我往书包里面塞了4盒蛋挞，然后抓了一大瓶没开过的可乐带回去了的。。。0~0</p>
<h1 id="Day_Four">Day Four</h1><hr>
<p>面试啦啦啦啦~！！！！</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50723-083608.jpg" alt="面试1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50723-101739.jpg" alt="面试2"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50723-101751.jpg" alt="面试3"></p>
<p>导师们都比较好，聊的挺开心。</p>
<p>刚开始背好了自我介绍，准备一进去啥都不说直接先背，结果人家一上来第一句话“这个姓怎么读？”……顿时就……</p>
<p>面试也是挺顺利地就过了</p>
<hr>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-20150723125217.png" alt="面试通过-系统"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50723-123714.jpg" alt="面试合格证"></p>
<p>下午也找到之前看好的安虹教授，坐聊了一下午，也是终于把接受意向谈妥了（有小伙伴觉得在她那边聊的时间太久，都没空去另外的实验室面试了，然而我的目标本来就这一个，聊的很开心）</p>
<p>至此，顺利通过学院面试，也顺利得到了导师的接收承诺，本次科大之旅终于可以说是圆满完成了！</p>
<p>同房间的西交童鞋也顺利拿到了导师的offer！</p>
<h1 id="Day_Five">Day Five</h1><hr>
<p>除了吃饭之外。。。今天算是在宾馆待了一整天吧，昨天谈妥了导师之后，剩下的就是邮件跟导师更多点交流了。</p>
<p>感觉上还是挺顺利，对这个结果也是挺满意的。科大的计算机体系结构在国内也是顶尖了，尤其还有超级计算机这样的硬件设备支持，另外也有很多机会接触龙芯、中科院计算所这些项目。</p>
<p>原本是考虑国内的学习比较心仪浙大的软硬件协同实验室，经过这次考察学习经历之后，中科大已经是我最满意的选择了！！</p>
<blockquote>
<p>然而又想只试这么几个就结束了，会不会太没追求了……</p>
</blockquote>
<hr>
<p>要说总结的话，还是要自信吧。</p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=156050&auto=1&height=66"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>多图预警！！！<br>千万不要用流量打开本帖！！！<br>0.0<br></blockquote>

<p>7月19日到达USTC中科大，开始为期5天的夏令营。</p>
<p>拍了一堆照片记录下这几天的历程。。。</p>
<p>Hoho~~</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-22-ustc-P50719-150859.jpg" alt="营服"></p>]]>
    
    </summary>
    
      <category term="USTC" scheme="http://jcf94.github.io/tags/USTC/"/>
    
      <category term="保研" scheme="http://jcf94.github.io/tags/%E4%BF%9D%E7%A0%94/"/>
    
      <category term="图集" scheme="http://jcf94.github.io/tags/%E5%9B%BE%E9%9B%86/"/>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Developing Your Musicianship 学习笔记（未完成）]]></title>
    <link href="http://jcf94.github.io/2015/07/21/2015-07-21-music/"/>
    <id>http://jcf94.github.io/2015/07/21/2015-07-21-music/</id>
    <published>2015-07-21T12:03:39.000Z</published>
    <updated>2015-08-20T13:08:37.454Z</updated>
    <content type="html"><![CDATA[<p>去年在Coursera上学过一段时间的基础乐理，可惜后来还是没完成…重新整理一下</p>
<hr>
<p><a href="http://mooc.guokr.com/course/841/Developing-Your-Musicianship/" target="_blank" rel="external">MOOC课程地址</a></p>
<p>本门课的授课讲师是George Russell，来自伯克利音乐学院。</p>
<p>这门课旨在介绍简单的乐理知识，对于我这种音乐白痴来说简直是太适合了，而且看评论作业比较少，一周交一次，还是很方便滴。。。</p>
<a id="more"></a>
<p>这门课之前已经开过一次了，所以视频和字幕早都有人整理过了：</p>
<p><a href="http://pan.baidu.com/s/1kT2t2Az#dir" target="_blank" rel="external">百度网盘</a></p>
<h1 id="第一周">第一周</h1><hr>
<p>视频目录：</p>
<p>•1-1 Berklee Faculty/Student Spotlight: Why Are Harmony and Ear Training Important? (4:11)</p>
<p>•1-2 Welcome to the Course (4:18)</p>
<p>•1-3 Important Definitions (4:01)</p>
<p>•1-4 Structure of the Major Scale (4:23)</p>
<p>•1-5 Sharps and Flats (1:33)</p>
<p>•1-6 Major 2nd and 3rd Intervals (4:18)</p>
<p>•1-7 Major 2nd and Major 3rd Interval Practice (1:47)</p>
<p>•1-8 Tonal Center (7:51)</p>
<p>•1-9 Lesson Review and Assignment Overview (2:50)</p>
<p>•1-10 Berklee Student Performance: Boston Marathon, “I Don’t Have a Song for That” (5:41)</p>
<hr>
<p>1-1 是对课程的整体介绍</p>
<p>1-2 差不多还是介绍，闲扯，然后展现一下老师的钢琴功力</p>
<p>1-3 乐理的基本定义。真正的课程从这里开始</p>
<p>和弦 chords；音阶 scales；旋律 melodies；</p>
<p>和声 Harmony: The study of chords, scales and melodies；</p>
<p>练耳 Ear Training: Indentifying what your ear hears；</p>
<p>音程 Interval: The distance between two notes；从基调开始，按照大调音阶数，大调音阶下节课有讲。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-21-music-1.jpg" alt="1"></p>
<p>1-4 大调音阶</p>
<p>全音 whole steps；半音 half steps；</p>
<p>半音是键盘上相邻两个键的音，不分黑白键，两个半音组合成一个全音。所以一个大调音阶里面是全半音结合的，因为钢琴键盘上不是所有的白键中间都有黑键。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-21-music-2.jpg" alt="2"></p>
<p>1-5 升降调</p>
<p>降半音 flat；升半音 sharp；</p>
<p>一个音升降半个音。</p>
<p>举例：</p>
<p>D音，降半音为 D flat（或者其实就是 C sharp），升半音为 D sharp（E flat）。</p>
<p>F音，这个跟其他的比有点特殊的是降半音是E，因为E，F之间没有黑键，升半音为 F sharp（G flat）。</p>
<p>1-6 大二调和大三调音程</p>
<p>1-7 大二调和大三调音程练习</p>
<p>耳残哭晕在厕所……</p>
<p>1-8 调性中心</p>
<p>调性中心 tonal center: The tonic or “Do” of the scale, or scale degree 1；听一首曲子中听到其中的主音就是调性中心</p>
<p>和弦建立在那个键的基础上…（还是觉得好抽象…） the key!!!</p>
<p>后面的学生练习演示部分根本听不出出来有什么区别好么……..</p>
<p>作业怎么办……..各种汗……</p>
<p>1-9 布置作业了</p>
<p>•Write in your own words the definitions of harmony, ear training, and interval. </p>
<p>•Find three recordings of songs in the key of C and post links to performances of them that you find on YouTube, Vimeo, Dailymotion, or a similar public video site.</p>
<p>•Write the C major scale on the staff by hand.</p>
<p>due on Wed 30 Jul 5:00 am</p>
<p>然后就 see you next week 了，要滚去写作业了</p>
<p>1-10 伯克利音乐学院学生的表演</p>
<h1 id="第二周">第二周</h1><hr>
<p>已经迫不及待要开始第二周的学习了~</p>
<p>2-1 What’s Your Story</p>
<p>2-2 复习了一下上周所学的内容，其实也没多少</p>
<p>2-3 这节主要要讲纯四度和纯五度</p>
<p>Perfect 4th：纯四度。大调音阶中距离为四的音</p>
<p>可以用婚礼进行曲最熟悉的一段来记，就是“当~当当当，当~当当当”，前一段是纯四度，应该是，Do Fa Fa Fa</p>
<p>Perfect 5th：纯五度。大调音阶中距离为五的音</p>
<p>记忆方法是《小星星》，Do Do So So La La So</p>
<p>2-4 大二度、大三度、纯四度、纯五度综合练习</p>
<p>视频里面有一些小练习</p>
<p>不过如果要更熟练掌握还需要再多加练习，Ear Traing还是很有必要的，能确定好音程的话，知道是哪一个大调那就可以听着曲子把谱扒下来了。</p>
<p>2-5 三和弦</p>
<p>Triads：三和弦，由大调音阶的三个级组成</p>
<p>Major Triads：大三和弦，由每个调的根音第三音和第五音组成</p>
<p>也就是一个大三度，加上，一个小三度</p>
<p>C大三和弦：C-E-G，C调中的I级和弦</p>
<p>F大三和弦：F-A-C，C调中的IV级和弦</p>
<p>G大三和弦：G-B-D，C调中的V级和弦</p>
<p>Minor Traids：小三和弦，把大三和弦中间的音降半音</p>
<p>也就是一个小三度，加上，一个大三度</p>
<p>C小三和弦：C-bE（#D）-G</p>
<p>F大三和弦：F-bA（#G）-C</p>
<p>Major 和弦听上去更明亮点，Minor要灰暗一些……</p>
<p>耳残表示这个对我来说真心太难了，真心听不出来，后面的练习全错……</p>
<p>2-6 三级和弦的进程</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-21-music-3.jpg" alt="3"></p>
<p>很多乐曲都由这些基本的和弦进程组成的</p>
<p>首先从第一个开始，I-&gt;IV-&gt;V-&gt;I</p>
<p>这里，I级和弦是主和弦，IV级和弦是下属和弦，V级和弦是属和弦</p>
<p>主和弦是基础，调性中心，下属和弦比属和弦低一个音级，这里的属和弦（IV级）由于导音的影响，又回到I级和弦的趋势</p>
<p>然后：I-&gt;V-&gt;IV-&gt;V-&gt;I</p>
<p>第三个：IV-&gt;V-&gt;IV-&gt;I</p>
<p>第四个：V-&gt;IV-&gt;V-&gt;I</p>
<p>2-7 课程总结+作业</p>
<p>作业也是比较简单的，而且主要以练习练耳为主。电脑上可以装everyone piano这个软件，配合一个比较好点的音源+一个完整的电脑键盘就能拿来练习钢琴了。</p>
<p>•Practice the major triads on the keyboard.</p>
<p>•Practice the C major scale on the keyboard.</p>
<p>•Write  C, F, and G major triads on staff paper.</p>
<p>2-8 然后又是一个amazing的学生作品，，，棒极~</p>
<p>see you next week~</p>
<h1 id="第三周">第三周</h1><hr>
<p>Week Three Start!</p>
<p>3-1 一些音乐学习建议</p>
<p>说的很好</p>
<p>3-2 复习</p>
<p>开始新一周的学习之前，还是老样子，首先复习一下之前学过的内容</p>
<p>开场的一段弹奏是 Wade in the water，用以向我们介绍 Minor Pentatonic Scale 小调五音阶</p>
<p>大调音阶、三和弦、调性中心、I VI V级和弦</p>
<p>3-3 大六度和大七度音程</p>
<p>Major 6th 大六度、Major 7th 大七度</p>
<p>大七度可能是最难的一个音程</p>
<p>顺利完成后面的几个练习</p>
<p>各种音程还是需要多听，多练耳才能熟练掌握</p>
<p>3-4 小调五音阶</p>
<p>小调五音阶由五个音阶组成（大汗……什么鬼东西）</p>
<p>还是从C大调开始，五个分别是 C-Eb-F-G-Bb-C，最后回到C</p>
<p>或者 1-b3-4-5-b7-1</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-21-music-4.jpg" alt="4"></p>
<p>为了记忆，教了一首小歌（算歌吧……-_-////）</p>
<p>后面是一段 Big Performance~~！！！！！</p>
<p>简直帅爆~！！！！！</p>
<p>3-5 复习和作业</p>
<p>怎么感觉好少的样纸…第二周和第三周都是…</p>
<p>anyway，复习完之后确实就结束了</p>
<p>除了练习之外，应该还是找曲子……不过为什么是附加作业，这个看样子不太好找呀</p>
<p>•Practice the minor pentatonic scale on the keyboard.  Make sure to play up and down the scale. </p>
<p> Download these play along tracks to practice the minor pentatonic scale with:</p>
<p>Play Along 1 MP3  (To download Right-click (PC) or Control-click (MAC) and choose “Save Link As” from the menu)</p>
<p>Play Along 2 MP3</p>
<p>•Find a song that features a Major 6th interval in the melody.</p>
<p>•For bonus points, find a song that features a Major 7th interval in the melody.</p>
<p>3-6 amazing 的表演</p>
<p>See you next week~！</p>
<p>话说8月2号的时候，第一周的作业结果出了，拿了45/50，有一个概念理解上出现了小问题。其他同学在评价的时候给出了解释，练耳跟绝对音感是不一样的</p>
<h1 id="第四周">第四周</h1><hr>
<p>不知不觉居然已经到了第四周了….0.0</p>
<p>4-1 Tips，可惜咱以后并不打算走音乐路…</p>
<p>4-2 老样子，复习</p>
<p>小调五音阶 可能是美国音乐史上用的最多的音阶</p>
<p>4-3 七和弦</p>
<p>C Major 7th Chords：C大调的大七和弦</p>
<p>C大三和弦+第七个音，即：C - E - G - B</p>
<p>一种快速找到第七音的方法是，根音降半调，再升上去一个八度</p>
<p>F大七和弦：F - A - C - E</p>
<p>这俩和弦确实都挺好听，只用这两个就能弹出比较好听的曲子了</p>
<p>属七和弦：在大七和弦的基础上，七音降半调</p>
<p>C属七和弦：C - E - G - Bb</p>
<p>4-4 七和弦和蓝调音乐</p>
<p>G属七和弦：G - A - B - D - F</p>
<p>属七和弦中的：</p>
<p>I级：C7：C - E - G - Bb</p>
<p>IV级：F7：F - A - C - Eb</p>
<p>V级：G7：G - A - C - E</p>
<p>蓝调音乐就是由这些和弦组成的</p>
<p>小调五音阶+属七和弦写蓝调即兴：</p>
<p>很炫酷的方法0.0：</p>
<p>用小调五声音阶在开始的两个小节写一段简单的旋律，然后两小节休止，到第五小节重复前面的旋律。七八休止，九十稍微变化旋律，十一再休止。</p>
<p>和弦部分只要用到三级属七和弦即可：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-21-music-5.jpg" alt="5"></p>
<p>4-5 又到了我最怕的练习时间了</p>
<p>……</p>
<p>老师说：大七和弦给人一种轻松愉悦的感觉，而属七和弦的效果带有一丝张力</p>
<p>在我看来，属七和弦听上去没有大七和弦那么纯粹，属七和弦末尾有种颤音之类的感觉（大概就是他说的紧张感？），所以还是可以区分出来滴</p>
<p>4-6 作业时间</p>
<p>•Practice the C and F Major 7th chords.</p>
<p>•Practice the C, F, and G Dominant 7th Chords.</p>
<p>•Practice the blues progression by playing the C, F, and G Dominant 7th chords. The blues progression is on page 4 of your study guide.</p>
<p>•Find a song that features a blues progression.</p>
<p>Have a nice day~!</p>
<h1 id="第五周">第五周</h1><hr>
<p>5-1 音乐职业介绍</p>
<p>5-2 复习+新的大七和弦顺序介绍</p>
<p>演奏同一种和弦的另一种方式，但是效果会不同</p>
<p>5-3 曲式</p>
<p>Form: The overall structure of a piece of music.</p>
<p>AABA顺序</p>
<p>拍子的问题：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-21-music-6.jpg" alt="6"></p>
<p>上面的数字表示每小节有几拍</p>
<p>下面的数字表示以哪一个长度的音符作为一拍</p>
<p>之前的蓝调也算是一种曲式</p>
<p>……..-_-////后面弹的这什么玩意……</p>
<p>5-4 4/4拍子和4/3拍子</p>
<p>5-5 基本和弦谱</p>
<p>这是一个标准12小节的蓝调和弦谱：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-21-music-7.jpg" alt="7"></p>
<p>最后一小节可以用C7或者G7</p>
<p>5-6 复习+作业</p>
<hr>
<h1 id="断了">断了</h1><p>Oh…后来学到这里就断掉了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>去年在Coursera上学过一段时间的基础乐理，可惜后来还是没完成…重新整理一下</p>
<hr>
<p><a href="http://mooc.guokr.com/course/841/Developing-Your-Musicianship/">MOOC课程地址</a></p>
<p>本门课的授课讲师是George Russell，来自伯克利音乐学院。</p>
<p>这门课旨在介绍简单的乐理知识，对于我这种音乐白痴来说简直是太适合了，而且看评论作业比较少，一周交一次，还是很方便滴。。。</p>]]>
    
    </summary>
    
      <category term="Berklee" scheme="http://jcf94.github.io/tags/Berklee/"/>
    
      <category term="Coursera" scheme="http://jcf94.github.io/tags/Coursera/"/>
    
      <category term="乐理" scheme="http://jcf94.github.io/tags/%E4%B9%90%E7%90%86/"/>
    
      <category term="公开课" scheme="http://jcf94.github.io/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
      <category term="音乐" scheme="http://jcf94.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Next]]></title>
    <link href="http://jcf94.github.io/2015/07/15/2015-07-15-next/"/>
    <id>http://jcf94.github.io/2015/07/15/2015-07-15-next/</id>
    <published>2015-07-15T13:42:19.000Z</published>
    <updated>2015-07-15T14:07:45.000Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>Just as the 26 letters of the English alphabet do not limit how much can be written,<br>the two letters of the computer alphabet do not limit how what computers can do.<br></blockquote>

<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-15-next-jingli.jpg" alt="锦鲤"></p>
<a id="more"></a>
<p>几天前听说王小豪童鞋已经顺利拿到北大化学直博的offer，简直不能再赞啦~</p>
<p>转眼今天已经是7月15了，18号晚踏上征程！！</p>
<p>西安-合肥-广州-回家</p>
<p>希望走完这一路，8月初回到家时，所有的一切都能达成~！</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>Just as the 26 letters of the English alphabet do not limit how much can be written,<br>the two letters of the computer alphabet do not limit how what computers can do.<br></blockquote>

<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-15-next-jingli.jpg" alt="锦鲤"></p>]]>
    
    </summary>
    
      <category term="保研" scheme="http://jcf94.github.io/tags/%E4%BF%9D%E7%A0%94/"/>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Makefile解析]]></title>
    <link href="http://jcf94.github.io/2015/07/13/2015-07-13-makefile/"/>
    <id>http://jcf94.github.io/2015/07/13/2015-07-13-makefile/</id>
    <published>2015-07-13T12:30:54.000Z</published>
    <updated>2015-08-19T10:27:54.080Z</updated>
    <content type="html"><![CDATA[<p>之前啃内核的时候就见过这个东西，整理项目的时候正好用到，顺便好好学习一下。</p>
<p>详见：<a href="http://blog.csdn.net/ruglcc/article/details/7814546/" target="_blank" rel="external">Makefile经典教程(掌握这些足够)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前啃内核的时候就见过这个东西，整理项目的时候正好用到，顺便好好学习一下。</p>
<p>详见：<a href="http://blog.csdn.net/ruglcc/article/details/7814546/" target="_blank" rel="exter]]>
    </summary>
    
      <category term="Linux" scheme="http://jcf94.github.io/tags/Linux/"/>
    
      <category term="Makefile" scheme="http://jcf94.github.io/tags/Makefile/"/>
    
      <category term="shell" scheme="http://jcf94.github.io/tags/shell/"/>
    
      <category term="内核" scheme="http://jcf94.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="Linux" scheme="http://jcf94.github.io/categories/Linux/"/>
    
      <category term="工具" scheme="http://jcf94.github.io/categories/Linux/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Uzebox]]></title>
    <link href="http://jcf94.github.io/2015/07/12/2015-07-12-uzebox/"/>
    <id>http://jcf94.github.io/2015/07/12/2015-07-12-uzebox/</id>
    <published>2015-07-12T12:30:40.000Z</published>
    <updated>2015-07-15T13:41:26.000Z</updated>
    <content type="html"><![CDATA[<p>大二开始几个小伙伴一起跟<a href="http://john101.jimdo.com/" target="_blank" rel="external">杨俊</a>做了个单片机的小东西</p>
<p>最后感觉也就是水过了</p>
<p>这几天准备重新把资料理出来看看，没准面试可以用一下。</p>
<p>Orz</p>
<p>基本原理:</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-12-uzebox-1.jpg" alt="基本原理"></p>
<a id="more"></a>
<p>从核心部分开始：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-12-uzebox-2.jpg" alt="总图"></p>
<h1 id="UZEBOX主机">UZEBOX主机</h1><hr>
<p><a href="http://uzebox.org/wiki/index.php?title=Main_Page" target="_blank" rel="external">UZEBOX的Wiki页面</a></p>
<p>具体电路图如上所示，用到的芯片只有两个，单片机和后面的AD转换芯片，剩下的都是一些简单的电路。</p>
<h2 id="硬件部分">硬件部分</h2><h3 id="CPU">CPU</h3><p>CPU采用了ATmega644，8位的AVR单片机，主要功能是完成所有任务。</p>
<ol>
<li>生成视频同步信号</li>
<li>画面的呈现。这包括滚动和确定精度的透明度来抑制背景</li>
<li>混合并且输出音乐和声音效果</li>
<li>读操纵杆按钮状态</li>
<li>读取和处理通过UART的MIDI数据流</li>
<li>处理对SD卡的读写操作</li>
<li>最后也是最重要的一步：运行游戏</li>
</ol>
<p>这块芯片的标准主频是20MHz，但是使用时需要超频到28.6MHz。</p>
<p>因为AD725的工作频率是14.3MHz，为了防止视频信号采样发生混叠，MCU和AD725的信号需要同步发生。</p>
<h3 id="视频信号">视频信号</h3><p>如上图所示，UZEBOX的视频部分主要靠单片机的C口进行输出，以3/3/2的比例向外输出R/G/B视频信号</p>
<p>红和绿都是用3位表示，蓝色信号2位，经过一个R-2R权电阻网络进行简单的DA转换，可以把三种颜色的数字信号转成0~0.7V的模拟信号，然后继续输入AD725，转换成NTSC格式的视频信号</p>
<p>AD725的主要输入信号是前面来的RGB，然后再加上单片机的同步信号和时钟信号辅助，就能完成视频信号的转换了</p>
<h3 id="声音信号">声音信号</h3><p>声音输出只用到了PD7一个口，是单声道信号进行脉冲宽度调制（PWM）产生的。用电阻把输出信号幅值控制在1V的峰峰值即可</p>
<h3 id="手柄">手柄</h3><p>这里用的是一个简单的SNES（Super Nintendo Entertainment System）的手柄。就是一个触发器和一个移位寄存器，单片机读取移位寄存器里面存储的状态即可。</p>
<h2 id="软件部分">软件部分</h2><h3 id="内核">内核</h3><p>内核就是烧录进单片机里面的主要内容。单片机上没有操作系统，因此内核里面的所有部分事实上只能顺序执行，但是因为执行速度足够快，可以表现得像多任务同时工作一样进行。单片机需要同时完成多项任务：产生视频信号、读取手柄的控制信息、播放音乐等等。</p>
<p>主要工作内容是：</p>
<ol>
<li>初始化端口，计时器和其他硬件外围设备重置</li>
<li>生成复合视频AD725所需的同步脉冲</li>
<li>解码音乐数据，产生声音效果</li>
<li>混合四种声音样本</li>
<li>在规律的间隔时间从混合缓冲器中输出声音样本</li>
<li>对控制器按钮和鼠标移动的读取</li>
<li>读取UART中的入栈数据并将其存储到缓冲区中</li>
</ol>
<h3 id="中断">中断</h3><p>内核使用定时器1，即16位的计数器来触发中断。</p>
<p>计时器开始为0，计数到1820，此时它会自动回转到0，并且生成一个中断。</p>
<p>1820的值是由主晶振频率（28.63636MHZ）除以NTSC扫描线率（15.73426KHZ）得到的。</p>
<p>内核中断负责暂停主程序，进行渲染视频和混合音乐。由于速度和时间要求，需要用汇编语言来写。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-12-uzebox-3.jpg" alt="中断"></p>
<h3 id="视频引擎">视频引擎</h3><p>内核提供12种不同的工作模式，每种都有不同的特点，用于实现视频绘制</p>
<h3 id="声音引擎">声音引擎</h3><p>音乐处理涉及到音乐乐谱的读取和波封的处理，这里使用的是MIDI这种紧凑格式的音频，纯软件完成</p>
<h2 id="游戏载入">游戏载入</h2><p>从<a href="https://github.com/Uzebox/uzebox" target="_blank" rel="external">github</a>上下到完整的包是这样的</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">demos         <span class="comment">//各种运行工具以及游戏包</span></span><br><span class="line">gfx           <span class="comment">//颜色以及图像资源等</span></span><br><span class="line">kernel        <span class="comment">//内核，包括初始化、运行主程序、中断、视频/音频引擎等</span></span><br><span class="line">tools         <span class="comment">//编译工具</span></span><br><span class="line">Makefile      <span class="comment">//编译文件</span></span><br></pre></td></tr></table></figure>
<p>执行make之后，会在Rom目录下生成一些.hex和.uze的文件</p>
<p>.uze文件是原本生成了.hex文件之后加上首部打包而成</p>
<p>载入的过程可以有两种：</p>
<ol>
<li>直接将游戏包生成好的.hex文件烧录进Atmega644即可</li>
<li>往单片机中烧录gameloader的.hex文件，之后通过读取SD卡中的.uze文件来载入游戏。gameloader占内存4K，剩下还有60K的内存可供游戏调用</li>
</ol>
<h1 id="改进部分">改进部分</h1><hr>
<p>游戏机制作完成之后，我们对其进行了两方面的改进</p>
<h2 id="无线传输">无线传输</h2><p><a href="http://anarchy.translocal.jp/radio/micro/howtotx.html" target="_blank" rel="external">参考Tetsuo Kogawa的网站</a></p>
<p>将视频信号通过一个简易的无线电路发射出去，可以通过一般的CRT电视来接收</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-12-uzebox-4.jpg" alt="无线"></p>
<p>该电路非常简化，制作该电路的时候也是使用双面覆铜板完成</p>
<p>所有暴露在外面的导线都是尽可能地贴近覆铜板，使高频信号尽可能地衰减掉</p>
<p>选择一个电视频道，并调节可调电感来使得两个设备相互适配</p>
<p>当发射机与电视机的距离、频率都调整到一个合适的位置时候，电视机上可以清晰地收到显示的游戏画面</p>
<h2 id="无线控制">无线控制</h2><p>通过三轴加速度传感器来对感知空间三维姿态，并通过无线的方式将其传递到另一台主机上，主机进一步向外输出控制信号</p>
<p>这一部分可以代替原始设计中的手柄部分</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>大二开始几个小伙伴一起跟<a href="http://john101.jimdo.com/">杨俊</a>做了个单片机的小东西</p>
<p>最后感觉也就是水过了</p>
<p>这几天准备重新把资料理出来看看，没准面试可以用一下。</p>
<p>Orz</p>
<p>基本原理:</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-12-uzebox-1.jpg" alt="基本原理"></p>]]>
    
    </summary>
    
      <category term="单片机" scheme="http://jcf94.github.io/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="项目" scheme="http://jcf94.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的七月]]></title>
    <link href="http://jcf94.github.io/2015/07/09/2015-07-09-qiyue/"/>
    <id>http://jcf94.github.io/2015/07/09/2015-07-09-qiyue/</id>
    <published>2015-07-09T15:12:48.000Z</published>
    <updated>2015-07-15T13:43:34.000Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>这是一年中最火热的日子，<br>我将完成这个很大程度上决定我下半生人生走向的选择<br></blockquote>

<p>骨子里面还是个小人物，我一向是个不愿对自己倾注太多信心的人</p>
<p>一是自己确实拿不出什么值得骄傲的成绩</p>
<p>二是即使在自己擅长的领域内，走得越深，见到过的真正的青年科学家（！！）越多，便越发感到敬畏</p>
<p>拿什么跟人家比？</p>
<hr>
<p>前辈告诉我说要多投，海投，要勇敢地上！</p>
<p>还是怪自己大概也是心气太高吧，一般的看不上，，，拿到太强的目标的邀请函了，却又觉得没有信心了</p>
<hr>
<p>毕竟</p>
<p>CMU、USTC、PKU</p>
<p>哪一个都曾经是我仰望不已的存在。。。。。。</p>
<hr>
<a id="more"></a>
<p>就像是向高空拉了几条钢丝锁，如果顺利，一步登天，如果摔下来，那就真是一点后路都没有留下了。</p>
<p>幸而投出去的夏令营已经3中2，而剩下的最后一个也有很大的希望能过。</p>
<hr>
<p>尽管最想去的那一个告诉我的是高达80%的淘汰率，呵呵，，</p>
<hr>
<p>趁着这段时间把以前学过的专业课好好复习下，然后给自己补补英语！</p>
<hr>
<p>无论最终结果会如何，已经无畏地出发在路上了，那是我的星辰大海！！</p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=26608576&auto=1&height=66"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>这是一年中最火热的日子，<br>我将完成这个很大程度上决定我下半生人生走向的选择<br></blockquote>

<p>骨子里面还是个小人物，我一向是个不愿对自己倾注太多信心的人</p>
<p>一是自己确实拿不出什么值得骄傲的成绩</p>
<p>二是即使在自己擅长的领域内，走得越深，见到过的真正的青年科学家（！！）越多，便越发感到敬畏</p>
<p>拿什么跟人家比？</p>
<hr>
<p>前辈告诉我说要多投，海投，要勇敢地上！</p>
<p>还是怪自己大概也是心气太高吧，一般的看不上，，，拿到太强的目标的邀请函了，却又觉得没有信心了</p>
<hr>
<p>毕竟</p>
<p>CMU、USTC、PKU</p>
<p>哪一个都曾经是我仰望不已的存在。。。。。。</p>
<hr>]]>
    
    </summary>
    
      <category term="保研" scheme="http://jcf94.github.io/tags/%E4%BF%9D%E7%A0%94/"/>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 1402 A * B Problem Plus 快速高精度乘法（FFT）]]></title>
    <link href="http://jcf94.github.io/2015/07/06/2015-07-06-HDU-1402/"/>
    <id>http://jcf94.github.io/2015/07/06/2015-07-06-HDU-1402/</id>
    <published>2015-07-06T02:50:03.000Z</published>
    <updated>2015-07-13T01:47:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="A_*_B_Problem_Plus">A * B Problem Plus</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>Calculate A * B.</p>
<h2 id="Input">Input</h2><p>Each line will contain two integers A and B. Process to end of file.</p>
<p>Note: the length of each integer will not exceed 50000.</p>
<a id="more"></a>
<h2 id="Output">Output</h2><p>For each case, output A * B in one line.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>1<br>2<br>1000<br>2</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>2<br>2000</p>
</blockquote>
<h2 id="题意">题意</h2><p>做两个超大数的乘法，每个数极限是50000位，略大，一般普通的模拟高精会超时</p>
<h2 id="分析">分析</h2><p>普通的模拟高精是$O(n^2)$的复杂度，对于这种特殊的50000长的数据自然是会超了的</p>
<p>故本题的解法就是借用FFT加速的高精度乘法，复杂度在$O(nlogn)$</p>
<p>FFT的详细分析在上一篇中已经讲清楚了，本题即作为模板题</p>
<p>我的模板是在原来自己搞的高精的基础上改的，最初的高精用了4位押位，然而套上这个之后，发现FFT中间的结果大小跟位数也有关，当位数大到一定程度的时候，4位押位在int下会爆。。。然后50000位的极限数据在3位押位下都会爆int。。。好可怕</p>
<p>最后改到2位押位。</p>
<p>大概是我原本的输入输出部分模板写的不好，网上找的参考代码能在100ms以内过，我的这个需要花700ms左右。。。（捂脸）</p>
<blockquote>
<p>下次用的时候考虑是不是需要套原本的高精模板，还有要注意押位的位数问题</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID	: Chen Fan</span><br><span class="line">LANG	: G++</span><br><span class="line">PROG	: FFT</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> nn 70000</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> snn 60000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> gjtype</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> a[nn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ntog</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> s)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		clean();</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">while</span> (s&gt;<span class="number">0</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		i++;</span><br><span class="line">       		a[i]=s%<span class="number">100</span>;</span><br><span class="line">       		s=s/<span class="number">100</span>;</span><br><span class="line">   		&#125;</span><br><span class="line">   		a[<span class="number">0</span>]=i;</span><br><span class="line">   	&#125;</span><br><span class="line">   	<span class="function"><span class="keyword">void</span> <span class="title">stog</span><span class="params">(<span class="keyword">char</span> s1[])</span></span><br><span class="line">   	</span>&#123;</span><br><span class="line">   		clean();</span><br><span class="line">        <span class="keyword">char</span> ss[snn],s[snn];</span><br><span class="line">        <span class="keyword">bool</span> pos=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1[<span class="number">0</span>]==<span class="string">'-'</span>) </span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="built_in">strcpy</span>(s,s1+<span class="number">1</span>);</span><br><span class="line">        	pos=<span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="built_in">strcpy</span>(s,s1);</span><br><span class="line">    	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">while</span> (<span class="built_in">strlen</span>(s)&gt;=<span class="number">2</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		i++;</span><br><span class="line">    		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="built_in">strlen</span>(s)-<span class="number">2</span>;j&lt;<span class="built_in">strlen</span>(s);j++)</span><br><span class="line">    		ss[j-<span class="built_in">strlen</span>(s)+<span class="number">2</span>]=s[j];</span><br><span class="line">    		s[<span class="built_in">strlen</span>(s)-<span class="number">2</span>]=<span class="string">'\0'</span>;</span><br><span class="line">    		a[i]=atoi(ss);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="built_in">strlen</span>(s)&gt;<span class="number">0</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		i++;</span><br><span class="line">    		a[i]=atoi(s);</span><br><span class="line">    	&#125;</span><br><span class="line">    	a[<span class="number">0</span>]=i;</span><br><span class="line">    	<span class="keyword">if</span> (!pos) a[a[<span class="number">0</span>]]=-a[a[<span class="number">0</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">       	<span class="built_in">printf</span>(<span class="string">"%d"</span>,a[a[<span class="number">0</span>]]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=a[<span class="number">0</span>]-<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%02d"</span>,a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">gjtype a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> fstype</span><br><span class="line">&#123;	</span><br><span class="line">	<span class="keyword">double</span> x,y;</span><br><span class="line">	fstype(<span class="keyword">double</span> real = <span class="number">0.0</span>,<span class="keyword">double</span> imag = <span class="number">0.0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x = real;</span><br><span class="line">		y = imag;</span><br><span class="line">	&#125;</span><br><span class="line">	fstype <span class="keyword">operator</span> -(<span class="keyword">const</span> fstype &amp;b)<span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> fstype(x-b.x,y-b.y);</span><br><span class="line">	&#125;</span><br><span class="line">	fstype <span class="keyword">operator</span> +(<span class="keyword">const</span> fstype &amp;b)<span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> fstype(x+b.x,y+b.y);</span><br><span class="line">	&#125;</span><br><span class="line">	fstype <span class="keyword">operator</span> *(<span class="keyword">const</span> fstype &amp;b)<span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> fstype(x*b.x-y*b.y,x*b.y+y*b.x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(fstype y[],<span class="keyword">int</span> len,<span class="keyword">int</span> on)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">1</span>, j = len/<span class="number">2</span>;i &lt;len-<span class="number">1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; j) swap(y[i],y[j]);</span><br><span class="line"></span><br><span class="line">		k = len/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span>(j &gt;= k)</span><br><span class="line">		&#123;</span><br><span class="line">			j -= k;</span><br><span class="line">			k /= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(j &lt; k) j += k;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">fstype <span class="title">wn</span><span class="params">(<span class="built_in">cos</span>(-on*2*PI/h)</span>,<span class="title">sin</span><span class="params">(-on*2*PI/h)</span>)</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; len;j+=h)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="function">fstype <span class="title">w</span><span class="params">(1,0)</span></span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = j;k &lt; j+h/<span class="number">2</span>;k++)</span><br><span class="line">			&#123;</span><br><span class="line">				fstype u = y[k];</span><br><span class="line">				fstype t = w*y[k+h/<span class="number">2</span>];</span><br><span class="line">				y[k] = u+t;</span><br><span class="line">				y[k+h/<span class="number">2</span>] = u-t;</span><br><span class="line">				w = w*wn;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(on == -<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)</span><br><span class="line">	y[i].x /= len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fstype x1[nn],x2[nn];</span><br><span class="line">gjtype cc;</span><br><span class="line"></span><br><span class="line"><span class="function">gjtype <span class="title">fftcheng</span><span class="params">(gjtype aa,gjtype bb)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len1=aa.a[<span class="number">0</span>],len2=bb.a[<span class="number">0</span>],len=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (len&lt;len1*<span class="number">2</span>||len&lt;len2*<span class="number">2</span>) len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len1;i++) x1[i-<span class="number">1</span>]=fstype(aa.a[i],<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=len1;i&lt;len;i++) x1[i]=fstype(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len2;i++) x2[i-<span class="number">1</span>]=fstype(bb.a[i],<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=len2;i&lt;len;i++) x2[i]=fstype(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	fft(x1,len,<span class="number">1</span>);</span><br><span class="line">	fft(x2,len,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) x1[i]=x1[i]*x2[i];</span><br><span class="line"></span><br><span class="line">	fft(x1,len,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	cc.clean();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) cc.a[i+<span class="number">1</span>]=(<span class="keyword">int</span>)(x1[i].x+<span class="number">0.5</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cc.a[i+<span class="number">1</span>]+=cc.a[i]/<span class="number">100</span>;</span><br><span class="line">		cc.a[i]%=<span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(cc.a[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)len--;</span><br><span class="line"></span><br><span class="line">	cc.a[<span class="number">0</span>]=len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("1.txt","r",stdin);</span></span><br><span class="line">	<span class="comment">//freopen("1.out","w",stdout);</span></span><br><span class="line"></span><br><span class="line">	gjtype a,b,c;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> s1[snn],s2[snn];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		a.stog(s1);</span><br><span class="line">		b.stog(s2);</span><br><span class="line"></span><br><span class="line">		c=fftcheng(a,b);</span><br><span class="line">		c.out();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//c=cheng(a,b);</span></span><br><span class="line">		<span class="comment">//c.out();</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="A_*_B_Problem_Plus">A * B Problem Plus</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>Calculate A * B.</p>
<h2 id="Input">Input</h2><p>Each line will contain two integers A and B. Process to end of file.</p>
<p>Note: the length of each integer will not exceed 50000.</p>]]>
    
    </summary>
    
      <category term="FFT" scheme="http://jcf94.github.io/tags/FFT/"/>
    
      <category term="高精度算法" scheme="http://jcf94.github.io/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://jcf94.github.io/categories/ACM/"/>
    
      <category term="训练" scheme="http://jcf94.github.io/categories/ACM/%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[快速傅里叶变换FFT算法的用途]]></title>
    <link href="http://jcf94.github.io/2015/07/05/2015-07-05-fft/"/>
    <id>http://jcf94.github.io/2015/07/05/2015-07-05-fft/</id>
    <published>2015-07-05T06:59:09.000Z</published>
    <updated>2015-07-13T01:47:02.000Z</updated>
    <content type="html"><![CDATA[<p>正好复习信号到FFT了，想起来前段时间放了挺久的FFT大数乘法，顺便研究下。</p>
<p>普通的高精度乘法的复杂度需要$O(n^2)$，用了押位之后，一般押4位的话能够达到$O(n^2/16)$，看上去可能效果不错，但仍然是同一个数量级的。</p>
<p>对付更大一点的变态数据（。。。ACM赛场上很少有卡这货的吧。。。-_-////）就需要用的$O(nlogn)$的FFT大数乘法算法了。</p>
<h1 id="数学基础">数学基础</h1><hr>
<p>首先基础是DFT，FFT是DFT的一种快速算法。</p>
<p>从N点DFT出发：</p>
<a id="more"></a>
<p>$$\begin{align}<br>X[K]&amp;=\sum_{n=0}^{N-1}x[n]e^{-j\frac{2\pi K}{N}n}\\<br>&amp;=\sum_{n=0}^{\frac{N}{2}-1}x[2n]e^{-j\frac{2\pi K}{N}2n}+\sum_{n=0}^{\frac{N}{2}-1}x[2n+1]e^{-j\frac{2\pi K}{N}(2n+1)}\\<br>&amp;=\sum_{n=0}^{\frac{N}{2}-1}x_1[n]e^{-j\frac{2\pi K}{\frac{N}{2}}n}+\sum_{n=0}^{\frac{N}{2}-1}x_2[n]e^{-j\frac{2\pi K}{\frac{N}{2}}n}e^{-j\frac{2\pi K}{N}}\\<br>&amp;=X_1[K]+e^{-j\frac{2\pi K}{N}}X_2[K]<br>\end{align}$$</p>
<p>也就是说，通过上述变换，我们成功地将一个N点得DFT拆成了2个$\frac{N}{2}$点的DFT</p>
<p>分析一下复杂度：</p>
<p>首先N点DFT的结果$X[K]$有N点，每个点的计算都要对$x[n]$的n个序列值乘上负指数求和，复杂度是$O(n^2)$</p>
<p>如果每一步都采用上面的那种变换方式，那么可以把多出来的一维降掉，变成$O(nlogn)$，这也就是<strong>快速傅里叶变换（FFT）</strong>了！</p>
<h2 id="更进一步">更进一步</h2><p>然而上面这个式子简化到最后是有问题的。</p>
<p>我们把一个N点的DFT拆成$\frac{N}{2}$点的DFT之后，下面得到的两个序列$X_1[K]$和$X_2[K]$都只有$\frac{N}{2}$点。</p>
<p>也就是说直接这么写，当K大于$\frac{N}{2}-1$之后，放在代码里面，后面部分就会出现<u><strong>数组越界</strong></u>的问题！！</p>
<p>继续分析后面部分：</p>
<p>$$\begin{align}<br>X_1[K]&amp;=\sum_{n=0}^{\frac{N}{2}-1}x_1[n]e^{-j\frac{2\pi K}{\frac{N}{2}}n}\\<br>X_1[\frac{N}{2}+K]&amp;=\sum_{n=0}^{\frac{N}{2}-1}x_1[n]e^{-j\frac{2\pi}{\frac{N}{2}}(\frac{N}{2}+K)n}\\<br>&amp;=\sum_{n=0}^{\frac{N}{2}-1}x_1[n]e^{-j\frac{2\pi K}{\frac{N}{2}}n}e^{-j2\pi n}\\<br>&amp;=-\sum_{n=0}^{\frac{N}{2}-1}x_1[n]e^{-j\frac{2\pi K}{\frac{N}{2}}n}\\<br>&amp;=-X_1[K]<br>\end{align}$$</p>
<p>好，这样问题就解决了。</p>
<p>令：</p>
<p>$$W_N^K=e^{-j\frac{2\pi K}{N}}$$</p>
<p>则重新整理上面的运算单元可以得到：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-05-fft1.png" alt="蝶形运算"></p>
<p>这就是著名的蝶形运算了。</p>
<p>然后整个图画出来是这样的：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-05-fft1.gif" alt="8"></p>
<p>8点FFT</p>
<p>或者：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-07-05-fft1.jpg" alt="16"></p>
<p>16点FFT</p>
<h2 id="FFT的用途">FFT的用途</h2><p>综上，FFT就是专门为计算机快速运算而设计的，1点变2点，2点变4点，4点变8点……这样就能在原始数据（原数组）的基础上不断计算下一层的结果，最终完成整个DFT的快速计算。</p>
<p>写代码的话，第一步是处理一下最左边一排原始数据的摆放顺序，是按照二进制逆序排过来的，然后一层一层求和迭代即可。</p>
<h1 id="多项式">多项式</h1><hr>
<p>讲完FFT之后，下面重点来了。</p>
<h2 id="多项式的系数表示法">多项式的系数表示法</h2><p>关于变量$x$的多项式可以表示成：</p>
<p>$$A(x)=a_0+a_1x+a_2x^2+…+a_{n-1}x^{n-1}=\sum_{j=0}^{n-1}a_jx^j$$</p>
<p>多项式是个广泛的概念，如果把大数对应到多项式上面去那就是类似这样：</p>
<p>$$1234=4+3*10+2*10^2+1*10^3$$</p>
<p>若有：</p>
<p>$$B(x)=\sum_{j=0}^{n-1}b_jx^j$$</p>
<p>则：</p>
<p>$$A(x)+B(x)\Rightarrow C(x)=\sum_{j=0}^{n-1}c_jx^j$$</p>
<p>$$c_j=a_j+b_j$$</p>
<p>$$A(x)\cdot B(x)\Rightarrow C(x)=\sum_{j=0}^{2n-2}c_jx^j$$</p>
<p>$$c_j=\sum_{k=0}^{j}a_kb_{j-k}$$</p>
<p>分别是多项式加法和多项式乘法</p>
<p>注意：多项式乘法的过程就是<strong>多项式系数卷积</strong></p>
<h2 id="多项式的点值表示法">多项式的点值表示法</h2><p>令：</p>
<p>$$y_k=A(x_k)$$</p>
<p>则一个次数界为n的多项式$A(x)$的点值表示就是n个这样的点值（任意n个）对所形成的集合：</p>
<p>$$\{(x_0,y_0),(x_1,y_1),…,(x_{n-1},y_{n-1})\}$$</p>
<p>从系数表示法写成点值表示法就是简单地说找n个不同的$x$代进去求出$y$，然后写在一起就行了。</p>
<p>然而用点值确定系数就是个线性求解的过程，称为插值，也是可以算的。</p>
<p>那么点值表示法有什么好处呢？</p>
<p>设上面的点值表示是$A(x)$的，如果已知$B(x)$的是：</p>
<p>$$\{(x_0,y’_0),(x_1,y’_1),…,(x_{n-1},y’_{n-1})\}$$</p>
<p>那么：</p>
<p>$$A(x)+B(x)\Rightarrow C(x)=\{(x_0,y_0+y’_0),(x_1,y_1+y’_1),…,(x_{n-1},y_{n-1}+y’_{n-1})\}$$</p>
<p>$$A(x)\cdot B(x)\Rightarrow C(x)=\{(x_0,y_0y’_0),(x_1,y_1y’_1),…,(x_{n-1},y_{n-1}y’_{n-1})\}$$</p>
<p>分别是多项式加法和多项式乘法</p>
<p>关键在于，这里的多项式乘法的复杂度是$O(n)$！！！！！</p>
<blockquote>
<p>因此只要能够想办法快速地进行两种表示法之间的转换，那么就可以先从系数表示法转换成点值表示法，用$O(n)$相乘之后，再快速转换回去，即可做到快速的多项式相乘</p>
</blockquote>
<hr>
<p>所以！！！！</p>
<p>转换的关键就是！！！！</p>
<p>FFT！！！！</p>
<hr>
<p>以下是多项式乘法的过程：</p>
<ol>
<li>次数界增加一倍：通过加入n个值为0的高阶系数，将整个次数界扩充至$2n$</li>
<li>求值，两次FFT分别求出$A(x)$和$B(x)$的长度为$2n$的点值表示$A(\omega)$和$B(\omega)$</li>
<li>逐个相乘得到$C(\omega)$</li>
<li>再做一次FFT，求逆傅里叶变换得到$C(x)$</li>
</ol>
<p>实现代码详见模板题：<a href="/2015/07/06/2015-07-06-HDU-1402/">HDU 1402 A * B Problem Plus 快速高精度乘法（FFT）</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>正好复习信号到FFT了，想起来前段时间放了挺久的FFT大数乘法，顺便研究下。</p>
<p>普通的高精度乘法的复杂度需要$O(n^2)$，用了押位之后，一般押4位的话能够达到$O(n^2/16)$，看上去可能效果不错，但仍然是同一个数量级的。</p>
<p>对付更大一点的变态数据（。。。ACM赛场上很少有卡这货的吧。。。-_-////）就需要用的$O(nlogn)$的FFT大数乘法算法了。</p>
<h1 id="数学基础">数学基础</h1><hr>
<p>首先基础是DFT，FFT是DFT的一种快速算法。</p>
<p>从N点DFT出发：</p>]]>
    
    </summary>
    
      <category term="FFT" scheme="http://jcf94.github.io/tags/FFT/"/>
    
      <category term="复习笔记" scheme="http://jcf94.github.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ACM" scheme="http://jcf94.github.io/categories/ACM/"/>
    
      <category term="算法学习" scheme="http://jcf94.github.io/categories/ACM/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>