<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Chenfan's blog]]></title>
  <subtitle><![CDATA[It's the way I choose.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jcf94.github.io/"/>
  <updated>2015-06-19T08:32:58.512Z</updated>
  <id>http://jcf94.github.io/</id>
  
  <author>
    <name><![CDATA[jcf94]]></name>
    <email><![CDATA[jcf94@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Size Balanced Tree]]></title>
    <link href="http://jcf94.github.io/2015/06/19/2015-06-19-sbt/"/>
    <id>http://jcf94.github.io/2015/06/19/2015-06-19-sbt/</id>
    <published>2015-06-19T01:27:28.000Z</published>
    <updated>2015-06-19T08:32:58.512Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>这将是你踏入高级数据结构的第一步。<br></blockquote>

<p>终于要开始给队里面讲这种比较高级的数据结构了，也趁此机会自己好好理理。</p>
<p>首先要讲的是这个：</p>
<h1 id="二叉搜索树">二叉搜索树</h1><hr>
<p>二叉搜索树又叫二叉排序树，它的定义很简单：</p>
<ol>
<li><p>这是一棵二叉树</p>
</li>
<li><p>令x为二叉树中某个结点上表示的值，那么其左子树上所有结点的值都要不大于x，其右子树上所有结点的值都要不小于x</p>
</li>
</ol>
<a id="more"></a>
<p>存储结构一般用链表或者结构体数组模拟链表等等均可。</p>
<p><strong>中序遍历</strong>二叉排序树可得到一个关键字的有序序列，一个无序序列可以通过构造一棵二叉排序树变成一个有序序列，构造树的过程也可以看成是<strong>对无序序列进行排序</strong>的过程。</p>
<p>基本操作有几种：</p>
<ul>
<li>插入</li>
</ul>
<p>每次插入的新的结点都是二叉排序树上新的叶子结点，在进行插入操作时，不必移动其它结点，只需改动某个结点的指针，由空变为非空即可。</p>
<ul>
<li>查找</li>
</ul>
<p>根据查找值的大小与当前子树的根节点相比，更小就找左边，更大就找右边，知道找到目标或者返回无结果。</p>
<ul>
<li>子树中的最大/最小值</li>
</ul>
<p>从根开始走到最左边是最小，走到最右边是最大。</p>
<ul>
<li>前驱或后继</li>
</ul>
<p>查找比当前点小的最大值（前驱）或比当前点更大的最小值（后继）。考虑左子树的最大值和右子树的最小值，若没有左右子树则考虑父节点。</p>
<ul>
<li>删除</li>
</ul>
<p>删除的第一步是要先找到该节点，然后在子树中找个前驱或者后继来替换掉该结点即可。</p>
<p>搜索，插入，删除的复杂度等于树高，因此一般的操作都是O(logn)的。</p>
<p>思想其实很简单，具体的实现就不贴代码了，因为确实也比较简单。</p>
<h2 id="普通的二叉搜索树存在的问题">普通的二叉搜索树存在的问题</h2><blockquote>
<p><strong>！！！树高并不稳定！！！</strong><br>或者说，<strong>不平衡</strong></p>
</blockquote>
<p>考虑一组本来就有序的数列，将其插入二叉搜索树，结果就是二叉树会退化成一条链，所有结点只有右子树，左子树是空的。</p>
<p>因而预期的O(logn)的操作会退化成O(n)，数据稍大点这种结构就悲剧了。</p>
<p>为了解决这个问题，机智的人类想出了改进方案：</p>
<h1 id="平衡树">平衡树</h1><hr>
<p>平衡树是在二叉查找树的基础上，增加维护操作，使得二叉查找树保持左右子树<strong>平衡</strong>，以最大限度地保证整体的效率。这种结构就叫做<strong>平衡树</strong>。</p>
<p>当然，维护也是需要消耗时间的，一般来说维护消耗的时间越长，树越平衡。具体的还要看实际情况。</p>
<p>一般常见的平衡树有不少种：红黑树、AVL树、SBT、Treap、Splay等等。</p>
<p>它们的基本思想都是通过结点的左右旋来保持原本二叉搜索树的性质不变，然后高效完成。区别就是保持平衡的方式不同。</p>
<p>比如红黑树是把结点分成红黑两种，然后各种旋转稳定，貌似效率相当高，然而实现比较麻烦。</p>
<p>Treap是用优先级的思想，在树上加上堆($Treap=Tree+Heap$)。</p>
<p>相比起来Splay比较特殊，Splay其实并不是一棵严格意义上的平衡树，因为它的操作并不是主要为了保证左右平衡的，它的特点主要是结构比较灵活，可以用来处理一些正常平衡树完成不了的问题，缺点就是<strong>常数大</strong>，效率可能不高。嗯，这是后话。</p>
<p>今天的重点是这个：</p>
<h1 id="SBT">SBT</h1><hr>
<p>节点大小平衡树(Size Balanced Tree)是一种自平衡二叉查找树。</p>
<p>它是由中国广东中山纪念中学的<strong>陈启峰</strong>（也是个神人，本来那年拿到了北美地区的ACM冠军，结果封神之路上遇到了Watashi）发明的。陈启峰于2006年底完成论文《<a href="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-Qifeng-Chen《Size Balanced Tree》.pdf" target="_blank" rel="external">Size Balanced Tree</a>》，并在2007年的全国青少年信息学奥林匹克竞赛冬令营中发表。</p>
<p>相比红黑树、AVL树等自平衡二叉查找树，SBT更易于实现。据陈启峰在论文中称，SBT是“目前为止速度最快的高级二叉搜索树”。</p>
<h2 id="旋转">旋转</h2><p>首先是所有平衡树中都会用到的旋转操作，平衡树需要不断改变树的结构，但是改变结构的同时又必须保证的是整棵树的二叉查找树性质<strong>不能被破坏掉</strong>（要是二叉查找树性质都没了，下面就不用玩了）。</p>
<p>调整方式就是逐点进行左旋或者右旋：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-1.png" alt="rotate"></p>
<p>以上图作为例子，左右旋实现起来其实也很简单，就是交换一下x、y的父子关系，然后调整B子树的连接情况，且能够保证整体的二叉搜素性质不改变。</p>
<h2 id="SBT的特殊性质">SBT的特殊性质</h2><p>我们给二叉搜索树的结点增加一个size域，用来保存以该节点为根的子树中一共有多少个结点。</p>
<p>上面说了，SBT是通过结点大小(Size)来调整整棵树的平衡性的，它相比一般的二叉搜索树多出来的性质有两条：</p>
<p>对于SBT中的每一个结点t，有：</p>
<ol>
<li><p>$size[right[t]]&gt;=size[left[left[t]]],size[right[left[t]]]$</p>
</li>
<li><p>$size[left[t]]&gt;=size[left[right[t]]],size[right[right[t]]]$</p>
</li>
</ol>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-2.png" alt="maintain"></p>
<p>以上图为例，性质是：</p>
<ol>
<li>$size[R]&gt;=size[A]$</li>
<li>$size[R]&gt;=size[B]$</li>
<li>$size[L]&gt;=size[C]$</li>
<li>$size[L]&gt;=size[D]$</li>
</ol>
<h2 id="如何维护这种性质？Maintain(&amp;_t)">如何维护这种性质？Maintain(&amp; t)</h2><p><strong>为了便于说明，以下部分左右旋与Maintain函数的参数传递均为实参</strong></p>
<p>我们从上图开始，把整棵树的结构分成几种情况来看：</p>
<h3 id="Case_1：size[left[left[t]]]&gt;size[right[t]]">Case 1：size[left[left[t]]]&gt;size[right[t]]</h3><ul>
<li>首先对t进行右旋，此时t更新成了原图中的L</li>
</ul>
<p>得到如下的结果：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-3.png" alt="3"></p>
<ul>
<li><p>则对于图中的T，其子树不一定满足性质，需要Maintain(T)</p>
</li>
<li><p>当T调整完之后，T的子树与L可能也不一定满足性质，需要再次Maintain(L)</p>
</li>
</ul>
<p>该过程的伪代码为：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If size[<span class="attribute">left</span>[<span class="attribute">left</span>[t]]]&gt;size[<span class="attribute">right</span>[t]] then</span><br><span class="line">	<span class="function"><span class="title">Right-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(right[t])</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(t)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Case_2:_size[right[left[t]]]&gt;size[right[t]]">Case 2: size[right[left[t]]]&gt;size[right[t]]</h3><p>这种情况要稍微复杂一些：</p>
<p>我们把原图中的B再往下画一层：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-4.png" alt="4"></p>
<ul>
<li>首先对L进行左旋</li>
</ul>
<p>得到：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-5.png" alt="5"></p>
<ul>
<li>再右旋T</li>
</ul>
<p>得到：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-6.png" alt="6"></p>
<ul>
<li><p>经过上面两步操作之后，整棵树的结构可以说是完全改变了，具体形态也可能变得难以预测。但是根据左右旋的性质，我们可以保证上图的结果中A、E、F、R都是性质完好的SBT，所以只要分别Maintain(L)和Maintain(T)即可。</p>
</li>
<li><p>经过上面那一步，我们能保证L和T以及其子树都是性质完好了，但是它们之间的任然不能确保，所以需要再Maintain(B)一次</p>
</li>
</ul>
<p>该过程的伪代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If s[<span class="attribute">right</span>[<span class="attribute">left</span>[t]]&gt;s[<span class="attribute">right</span>[t]] then</span><br><span class="line">	<span class="function"><span class="title">Left-Rotate</span><span class="params">(left[t])</span></span></span><br><span class="line">	<span class="function"><span class="title">Right-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(left[t])</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(right[t])</span></span></span><br><span class="line">	<span class="function"><span class="title">Maintain</span><span class="params">(t)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Case_3:_size[right[right[t]]]&gt;size[left[t]]">Case 3: size[right[right[t]]]&gt;size[left[t]]</h3><p>情况与第一种类似，刚好相反</p>
<h3 id="Case_4:_size[left[right[t]]]&gt;size[left[t]]">Case 4: size[left[right[t]]]&gt;size[left[t]]</h3><p>情况与第二种类似，刚好相反</p>
<h3 id="总结">总结</h3><p>按照上述说明，Maintain函数就是四个if语句分开即可，但是中间可能会有一些不必要的操作，故作者在<a href="(http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-19-sbt-Qifeng-Chen《Size Balanced Tree》.pdf">论文</a>)中也对其进行了改进。</p>
<p>可以发现1、2与3、4的判断是可以分开的，于是可以添加一个标记参数，已确定接下来的Maintain中需要检查哪一边</p>
<p>改进之后的伪代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Maintain (t,flag)</span><br><span class="line">	If flag=false then</span><br><span class="line">		If size[<span class="attribute">left</span>[<span class="attribute">left</span>[t]]]&gt;size[<span class="attribute">right</span>[t]] then</span><br><span class="line">			<span class="function"><span class="title">Right-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">		Elseif size[<span class="attribute">right</span>[<span class="attribute">left</span>[t]]&gt;size[<span class="attribute">right</span>[t]] then</span><br><span class="line">			<span class="function"><span class="title">Left-Rotate</span><span class="params">(left[t])</span></span></span><br><span class="line">			<span class="function"><span class="title">Right-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">		Else exit</span><br><span class="line">	Elseif size[<span class="attribute">right</span>[<span class="attribute">right</span>[t]]]&gt;size[<span class="attribute">left</span>[t]] then</span><br><span class="line">    	<span class="function"><span class="title">Left-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">	Elseif size[<span class="attribute">left</span>[<span class="attribute">right</span>[t]]]&gt;size[<span class="attribute">left</span>[t]] then</span><br><span class="line">		<span class="function"><span class="title">Right-Rotate</span><span class="params">(right[t])</span></span></span><br><span class="line">		<span class="function"><span class="title">Left-Rotate</span><span class="params">(t)</span></span></span><br><span class="line">    Else exit</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">Maintain</span><span class="params">(left[t],false)</span></span></span><br><span class="line">    <span class="function"><span class="title">Maintain</span><span class="params">(right[t],true)</span></span></span><br><span class="line">    <span class="function"><span class="title">Maintain</span><span class="params">(t,false)</span></span></span><br><span class="line">    <span class="function"><span class="title">Maintain</span><span class="params">(t,true)</span></span></span><br></pre></td></tr></table></figure>
<h2 id="愉快地使用SBT">愉快地使用SBT</h2><p>SBT的核心操作是Maintain，经过上面这么多内容，我想你已经掌握了。</p>
<p>SBT支持所有普通二叉查找树的操作（显而易见），而有了Maintain，之后所有的操作都是在普通的二叉查找树的基础上加以改进即可，可以衍生出更多有用的操作。</p>
<ul>
<li>插入</li>
</ul>
<p>正常的二叉查找树插入操作，插入完之后Maintain维护性质</p>
<ul>
<li>删除</li>
</ul>
<p>直接使用正常的二叉查找树删除操作即可。</p>
<blockquote>
<p>你说SBT性质可能会被破坏？</p>
</blockquote>
<p>嗯，是的。确实可能会出现这种情况，然而平衡树的操作是为了是的树的平均深度的平衡性。对于删除来说，删除一个结点并不会增加树的深度，所以在这里不用Maintain对整体并不会有什么影响，下次其他操作的Maintain就可以修复这个问题了。</p>
<ul>
<li>查找</li>
</ul>
<p>与正常的二叉查找树相同</p>
<ul>
<li>查找第k大</li>
</ul>
<p>由于每个结点的Size域，我们可以快速找出整个数列中第k大的数。根结点是第size[左子树]+1小的数，所以从根结点出发，按照大小关系不断遍历左右子树即可。</p>
<p>复杂度也是O(logn)的。</p>
<h2 id="最终代码示例">最终代码示例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID	: Chen Fan</span><br><span class="line">LANG	: G++</span><br><span class="line">PROG	: Size Balanced Tree</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sons[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> size[MAXN],data[MAXN];</span><br><span class="line"><span class="keyword">int</span> sbt=<span class="number">0</span>,sbttail=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;t,<span class="keyword">int</span> w)</span> <span class="comment">//rotate(&amp;node,0/1)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k=sons[t][<span class="number">1</span>-w];</span><br><span class="line">	<span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">	sons[t][<span class="number">1</span>-w]=sons[k][w];</span><br><span class="line">	sons[k][w]=t;</span><br><span class="line">	size[k]=size[t];</span><br><span class="line">	size[t]=size[sons[t][<span class="number">0</span>]]+size[sons[t][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">	t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span> <span class="comment">//maintain(&amp;node,flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span> (!flag)</span><br><span class="line">		<span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">1</span>]]) rotate(t,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">1</span>]]) </span><br><span class="line">		&#123;</span><br><span class="line">			rotate(sons[t][<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">			rotate(t,<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">0</span>]]) rotate(t,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">0</span>]])</span><br><span class="line">		&#123;</span><br><span class="line">			rotate(sons[t][<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">			rotate(t,<span class="number">0</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">	</span><br><span class="line">	maintain(sons[t][<span class="number">0</span>],<span class="keyword">false</span>);</span><br><span class="line">	maintain(sons[t][<span class="number">1</span>],<span class="keyword">true</span>);</span><br><span class="line">	maintain(t,<span class="keyword">false</span>);</span><br><span class="line">	maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v,<span class="keyword">int</span> pos)</span> <span class="comment">//insert(&amp;root,value,pos/0)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!size[t])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!pos)</span><br><span class="line">		&#123;</span><br><span class="line">			sbttail++;</span><br><span class="line">			pos=sbttail;</span><br><span class="line">		&#125;</span><br><span class="line">		data[pos]=v;</span><br><span class="line">		size[pos]=<span class="number">1</span>;</span><br><span class="line">		sons[pos][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		sons[pos][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		t=pos;</span><br><span class="line">	&#125; <span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		size[t]++;</span><br><span class="line">		<span class="keyword">if</span> (v&lt;data[t]) insert(sons[t][<span class="number">0</span>],v,pos);</span><br><span class="line">		<span class="keyword">else</span> insert(sons[t][<span class="number">1</span>],v,pos);</span><br><span class="line">		maintain(t,v&gt;=data[t]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last; <span class="comment">//last node</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span> <span class="comment">//value=del(&amp;root,key)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	size[t]--;</span><br><span class="line">	<span class="keyword">if</span> (v==data[t]||(v&lt;data[t]&amp;&amp;sons[t][<span class="number">0</span>]==<span class="number">0</span>)||(v&gt;data[t]&amp;&amp;sons[t][<span class="number">1</span>]==<span class="number">0</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ret=data[t];</span><br><span class="line">		<span class="keyword">if</span> (sons[t][<span class="number">0</span>]==<span class="number">0</span>||sons[t][<span class="number">1</span>]==<span class="number">0</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			last=t;</span><br><span class="line">			t=sons[t][<span class="number">1</span>]+sons[t][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> data[t]=del(sons[t][<span class="number">0</span>],data[t]+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125; <span class="keyword">else</span></span><br><span class="line">	<span class="keyword">if</span> (v&lt;data[t]) <span class="keyword">return</span> del(sons[t][<span class="number">0</span>],v);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> del(sons[t][<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delk</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> k)</span> <span class="comment">//value=del(&amp;root,k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	size[t]--;</span><br><span class="line">	<span class="keyword">if</span> (size[sons[t][<span class="number">0</span>]]+<span class="number">1</span>==k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ret=data[t];</span><br><span class="line">		<span class="keyword">if</span> (sons[t][<span class="number">0</span>]==<span class="number">0</span>||sons[t][<span class="number">1</span>]==<span class="number">0</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			last=t;</span><br><span class="line">			t=sons[t][<span class="number">1</span>]+sons[t][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> data[t]=delk(sons[t][<span class="number">0</span>],data[t]+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125; <span class="keyword">else</span></span><br><span class="line">	<span class="keyword">if</span> (k&lt;=size[sons[t][<span class="number">0</span>]]) <span class="keyword">return</span> delk(sons[t][<span class="number">0</span>],k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> delk(sons[t][<span class="number">1</span>],k-<span class="number">1</span>-size[sons[t][<span class="number">0</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span> <span class="comment">//node=select(root,k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (k==size[sons[t][<span class="number">0</span>]]+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">	<span class="keyword">if</span> (k&lt;=size[sons[t][<span class="number">0</span>]]) <span class="keyword">return</span> select(sons[t][<span class="number">0</span>],k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> select(sons[t][<span class="number">1</span>],k-<span class="number">1</span>-size[sons[t][<span class="number">0</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> x)</span> <span class="comment">//node=search(root,x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (t==<span class="number">0</span>||x==data[t]) <span class="keyword">return</span> t;</span><br><span class="line">	<span class="keyword">if</span> (x&lt;data[t]) <span class="keyword">return</span> search(sons[t][<span class="number">0</span>],x);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> search(sons[t][<span class="number">1</span>],x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deb_out</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"sbttail=%d sbt=%d\n"</span>,sbttail,sbt);</span><br><span class="line">	<span class="keyword">for</span>	(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sbttail;i++)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%2d: key=%2d size=%2d left=%2d right=%2d\n"</span>,i,data[i],size[i],sons[i][<span class="number">0</span>],sons[i][<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"-------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	sbttail=<span class="number">0</span>;</span><br><span class="line">	sbt=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>	(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++) insert(sbt,i,<span class="number">0</span>);</span><br><span class="line">	deb_out();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//printf("%d\n",del(sbt,8));</span></span><br><span class="line">	insert(sbt,<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">	deb_out();</span><br><span class="line">	del(sbt,<span class="number">8</span>);</span><br><span class="line">	del(sbt,<span class="number">8</span>);</span><br><span class="line">	<span class="comment">//printf("%d\n",search(sbt,8));</span></span><br><span class="line">	deb_out();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后话">后话</h2><p>SBT可以用来快速维护一组数的插入、查找、删除、找第k大，然而你会发现只是想要单纯地实现这个功能，C++ STL 中的set就可以做到。哦对了，set不能找第k大……</p>
<blockquote>
<p>事实上set里面就是用<strong>红黑树</strong>来进行维护的</p>
</blockquote>
<p>SBT效率高，但是扩展性似乎并没有特别强。真正想要神器的，请见Treap和Splay。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>这将是你踏入高级数据结构的第一步。<br></blockquote>

<p>终于要开始给队里面讲这种比较高级的数据结构了，也趁此机会自己好好理理。</p>
<p>首先要讲的是这个：</p>
<h1 id="二叉搜索树">二叉搜索树</h1><hr>
<p>二叉搜索树又叫二叉排序树，它的定义很简单：</p>
<ol>
<li><p>这是一棵二叉树</p>
</li>
<li><p>令x为二叉树中某个结点上表示的值，那么其左子树上所有结点的值都要不大于x，其右子树上所有结点的值都要不小于x</p>
</li>
</ol>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_算法学习" scheme="http://jcf94.github.io/categories/ACM-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[退役帖 伪]]></title>
    <link href="http://jcf94.github.io/2015/06/13/2015-06-13-tuiyi/"/>
    <id>http://jcf94.github.io/2015/06/13/2015-06-13-tuiyi/</id>
    <published>2015-06-13T05:20:32.000Z</published>
    <updated>2015-06-19T07:41:34.153Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>曾经为之付出过这么多的努力，在这个圈子中也认识了这么多优秀的人<br>要我怎么说放手？<br></blockquote>

<p>之前最后一次外出参赛是今年的省赛，也就是上周的这个时候吧，还正坐在赛场上苦思冥想中。。。</p>
<p>丧气的话也不想说了，毕竟还是自己实力不够，心态不行，真正的高手就算被水题坑了，也还是能够坚持做出其他的题来。</p>
<p>这段时间忙的事很多，学校里面是考试、实验、课设，另一边还要自己准备材料投夏令营。原本想着这个自己做的博客也要好好写，好好弄，结果干完正事之后也就几乎不想再碰电脑了。</p>
<p>然后翻了下前面写的几篇，越看越觉得画风不太对。。。都是日常和随笔。。。莫名其妙地就从原本想搞的技术博变成个情感交流博了（捂脸）。。。嗯！有空一定把前面博客园的帖子移回来！嗯！有空一定！</p>
<p>也是想了好多事。</p>
<a id="more"></a>
<hr>
<h1 id="回忆篇：">回忆篇：</h1><p>说说我回忆中的历程吧。</p>
<h2 id="OI是个起点">OI是个起点</h2><p>要说我最早接触coding是在什么时候？</p>
<p>其实早到初中。</p>
<p>我已经忘了那年是怎么被老师看中的了。唯一记得的是那时还是初一，还是在三中北校区的时候，有天，漂亮的女电脑老师找到我和脑袋，交给我们一份Pascal的资料说问我们想不想学？于是历史的车轮开始转动。</p>
<p>现在想想小时候还真是全能搞。。。-_-///初中参加过作文比赛、数学竞赛、英语竞赛、物理竞赛、化学竞赛，然而当时也并不看重计算机的。只是记得就上过一学期的课，然后NOIP普及组的初赛并没有过。。。</p>
<p>后来我们之后三中就再也没有听说过老师有再带过其他人了。想来也是命运和偶然。</p>
<hr>
<p>后来考到了温中，跟脑袋一起考进了前四班，又遇到了在我人生中领路的又一个重要老师。军辉顶着当时学校其他老师都不怎么支持的压力，毅然拉出了一个WZOI团队！</p>
<p>机房里每人一台电脑，一本黄皮书，一个暑假。刷完书的留下来，这台电脑贴上标签以后归你用，刷不完的继续或者离开。然后军辉自己开车带我们去椒江打NOIP的初赛，自己开车带我们去绍兴打复赛。</p>
<p>三年的暑假都给了OI，其实我也从来没有后悔过。开始的初衷是感兴趣，也许拿了奖高考能加分。后来我们能出成绩那年，国家出政策说加分取消。我问自己还要不要学下去？</p>
<blockquote>
<p>要！这么好玩的事情，真的不想放手！</p>
</blockquote>
<p>然后高三即使到了最后，我也依然继续留在了机房。</p>
<p>前几天翻那年今日还翻出以前自己高二时候写的东西来：</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-13-tuiyi-1.jpg" alt="gaosan"></p>
<hr>
<p>后来那年比的最后一次NOIP也就这样了，成绩并没有好到能进省队啊，NOI啊，保送啊。我仍然是个弱渣，小透明而已。</p>
<p>再后来高考没有考好。出成绩的时候就已经蒙了。</p>
<p>我爸妈说后面的事情你自己选择吧，如果想复读一年，大不了再接送你上学一年</p>
<hr>
<p>最终我还是没勇气打电话给之前联系好的复读班，第二天爸妈找了个路桥那边专业帮人填志愿的老师，我翘掉了这天本来要去参加的初中同学会。</p>
<p>那时候我提的唯一两个要求</p>
<blockquote>
<p>211<br>通信工程</p>
</blockquote>
<p>最后出录取结果的那天，前三个志愿都差几分，第四个——<strong>长安大学</strong>，上了。</p>
<p>什么鬼？从来没听过这个学校的名字好么。。。</p>
<p>然而我来了。</p>
<hr>
<h2 id="ACM不是终点">ACM不是终点</h2><p>大学是个新开始，我极尽锋芒地展现着我的一切。</p>
<p>顺利地选上军训负责人，当上班长，加入我想去的学生组织，带领班级开始在学院的各种我能做到的比赛中争冠，选上下一级的班导员，作为成功学长给下几级新生讲解经验，建立社团……</p>
<p>我敢说我们专业是我们学院中我们这级，乃至我们往后这么多级中表现最为出色的！</p>
<blockquote>
<p>话说我越想越觉得我在这里和在家里就是两个完全不同的人。。。-_-///大概在家习惯了小透明，习惯了在所有人眼中我都是可以忽略的那一个。可是在这里，有太多我需要承担的事情了，上面是老师，下面是我的班，我的社团，都是我的人。<br>然后自己下意识地就把两个世界分开了。我从来没想过要介绍大学同学给高中同学认识，也从来不想跟大学的同学讲太多我以前的事情。<br>就像是踏上火车的那一瞬间，一个我沉睡，另一个我就切换过来了。只有在电话里和网络的另一头，才维持着另外一种联系。<br><strong>说双子座双重人格神马的都可以哪凉快哪呆着去啦。。。哥才没有精神分裂！！</strong></p>
</blockquote>
<p>很难描述当我第一次听说长大也有一群人在搞ACM时的心情。那就像是，竟然都会有他乡遇故知的感觉。</p>
<p>后来我见到了在我这条路上给予我们最大支持的老师，也知道了长大的ACM现状其实并不好。然而对我来说，这样一个平台让我觉得我的未来还能够继续坚持我所喜欢的，还能继续为我曾经的梦想奋斗！</p>
<p>荆老师也很高兴能够有一个有着很多基础的新生加入，那时候也是对我寄予厚望吧。。。只可惜最后在我手上还是没能够实现长大ACM的辉煌。</p>
<h3 id="我的第一队">我的第一队</h3><p>大一一来马上就被荆老师加入了当时长大ACM的一队。我的队友是高我两级的PSW，和高我一级的LQ。</p>
<p>PSW是长大之前实力最强的ACM选手了，我们一起去过南京邀请赛、西安省赛、成都现场赛。可惜最后他要毕业离开的时候，还是只能遗憾地希望我能够撑起未来振兴长大的重担。</p>
<p>还能说什么呢？只能怪那时候的自己没有觉悟，要忙班里的事，要忙学生组织的事，总想着未来还有时间，没有能再多抓紧时间训练了。</p>
<p>我后来想了下，我的一整个大一乃至大二，编程实力都没有过太大的进步，除了Pascal转C之外，几乎都只是在吃高中留下来的那点老本。</p>
<blockquote>
<p>现实总是这么讽刺，没有经历的时候很难自己觉悟，等到自己觉得晚了的时候，那就真的已经晚了。</p>
</blockquote>
<h3 id="第二队">第二队</h3><p>PSW毕业去了复旦，然后是<a href="http://bigballon.github.io/" target="_blank" rel="external">LW</a>转到我们队开始一起努力。</p>
<p>LW也是从大一开始就跟我关系最好的几个之一了。</p>
<p>我们一起加的科协，一起在组织里学习奋斗，一起在学院的比赛中为自己的班级相互拼。</p>
<p>这年我们第一次开始尝试运营我们自己的OJ站。遗憾最后IP还是被学校回收了。</p>
<p>这年情况也没有怎么好转，打过西安邀请赛、北京邀请赛。还是一次一次让荆老师失望。</p>
<h3 id="Xorzip!!">Xorzip!!</h3><p>真正让我们觉得长大ACM事业出现转机的还是在大二最后的时候。</p>
<p>我和LW一起遇到了<a href="http://www.cnblogs.com/AOQNRMGYXLMV/" target="_blank" rel="external">SYH</a>。（<a href="http://www.jianshu.com/p/7feeac080171" target="_blank" rel="external">代码也可以这样有趣</a>）</p>
<p>他对于算法，对于ACM的狂热之于我们俩有过之而无不及，也是比我们两个还要努力。</p>
<p>只能说相见恨晚吧，如果再早一年遇到他，可能长大历史会更早一些被改写，因为这一年中，我们开创了长大史上太多个<strong>第一次</strong>。</p>
<ul>
<li>虽然那年的网络赛我们还是一样菜，我们<strong>第一次</strong>开始能够分析清楚比赛中出现的各种题目类型了！</li>
<li>长大的外出参赛队<strong>第一次</strong>有了<strong>正式的队名</strong>！从来以前派出去的队伍都只叫长大队，Xorzip也是我们历史上<strong>第一个独立队名</strong></li>
<li>以前从来参赛都是比完就走，我们<strong>第一次</strong>开始留下来详细听赛后题目解析，体会颁奖典礼中其他人的感受</li>
<li><strong>第一次</strong>开始真正融入ACM的圈子，<strong>第一次</strong>开始跟外校的其他高手们有了交流</li>
<li><strong>第一次</strong>建立了我们的<strong>ACM协会</strong>，长大ACM集训队<strong>第一次</strong>有了正式的组织</li>
<li><strong>第一次</strong>有了一套初步的训练体系，<strong>第一次</strong>从大一开始就带出了许多新人入门</li>
<li><strong>第一次</strong>举办规模盛大的赛事，邀请到这么多学校的高手们过来参加</li>
<li>……</li>
<li>……</li>
</ul>
<p>这一年我们见证了温岭中学WZOI团队中4位当时跟我一起努力奋斗的同学为他们的学校打进了Final。</p>
<p>见证了俄罗斯男神<a href="http://codeforces.com/profile/tourist/" target="_blank" rel="external">tourist</a>在Final中AC掉所有题目，破纪录封神！</p>
<p>见证了陕西省整体的ACM环境逐渐活跃起来，各校都开始奋起直追。</p>
<p>然而…</p>
<p>然而…</p>
<p>我还是没有做到。</p>
<hr>
<p>我从不后悔当初离开家乡当初来到这里，从不后悔走上这样一条路，只是恨自己没有实力。</p>
<p>赛场上最后几分钟时看着其他队伍纷纷出题，看着自己的排名一步一步往下滑，那种感觉刻骨铭心。</p>
<p>要说现在觉得遗憾的事情，很多：</p>
<ul>
<li>遗憾自己到最后都还是没有足够的实力把长大带向辉煌</li>
<li>遗憾自己这么多年还是辜负了荆老师、前辈的期望</li>
<li>遗憾当初不能醒悟过来，抓紧时间</li>
</ul>
<p>不过也很高兴这一路上认识了这么多优秀的人，认识了一起从零开始把A协拉起来的这么多小伙伴。</p>
<p>要感谢的人也太多太多。</p>
<p>然而…</p>
<p>然而…</p>
<p>我们马上就要大四了</p>
<hr>
<p>上周省赛回来的时候，同队的队友都比较沮丧。本来是抱着争金保银的目标去的，却因为出题方判题和数据的问题弄了个什么都没有。</p>
<p>这种心情真是难受至极。</p>
<p>LW说这应该是他最后一次比赛了。</p>
<hr>
<h1 id="未来篇：">未来篇：</h1><p>本来也想着，如果保研能够顺利，下学期还能再拼一把区域赛。</p>
<p>现实是，虽然总是被认识的人称为大神，然而我知道我并不是啊！</p>
<p>我剩余的大学时光都奉献给了ACM，却没有能够创造出太大的成就。而其他方面对于我来说却基本都是零。</p>
<p>之前已经有过被拒和落选的经历了，我也不能够确定剩下的三所学校的夏令营能不能顺利通过申请。</p>
<p>保研或是考研，区别只是先后而已，最终面对的竞争仍然还是那么激烈。</p>
<hr>
<p>也是很感谢爸妈从高中以来的支持，无论是我高三毅然坚持OI竞赛的选择，大学选专业，还是到了大学之后做的各种事情，他们都是说只要我觉得那些事情是正确的，他们就会支持我。</p>
<hr>
<p>今年暑假的大部分时间我应该还会待在学校里，可能会到8月初再回家一趟。</p>
<p>也是希望能将我所学的所有算法知识都教给现在长大ACM的队员们，今年暑假抓紧时间的话，应该还是能有很大进步的。</p>
<p>至少过了这个暑假之后，他们的实力要赶上、超越我们现在的水平！！</p>
<p><strong>我相信，长大ACM的未来是光明的！</strong></p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=26624725&auto=1&height=66"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>曾经为之付出过这么多的努力，在这个圈子中也认识了这么多优秀的人<br>要我怎么说放手？<br></blockquote>

<p>之前最后一次外出参赛是今年的省赛，也就是上周的这个时候吧，还正坐在赛场上苦思冥想中。。。</p>
<p>丧气的话也不想说了，毕竟还是自己实力不够，心态不行，真正的高手就算被水题坑了，也还是能够坚持做出其他的题来。</p>
<p>这段时间忙的事很多，学校里面是考试、实验、课设，另一边还要自己准备材料投夏令营。原本想着这个自己做的博客也要好好写，好好弄，结果干完正事之后也就几乎不想再碰电脑了。</p>
<p>然后翻了下前面写的几篇，越看越觉得画风不太对。。。都是日常和随笔。。。莫名其妙地就从原本想搞的技术博变成个情感交流博了（捂脸）。。。嗯！有空一定把前面博客园的帖子移回来！嗯！有空一定！</p>
<p>也是想了好多事。</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="ACM" scheme="http://jcf94.github.io/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[生日 记]]></title>
    <link href="http://jcf94.github.io/2015/06/02/2015-06-02-birthday/"/>
    <id>http://jcf94.github.io/2015/06/02/2015-06-02-birthday/</id>
    <published>2015-06-02T15:22:58.000Z</published>
    <updated>2015-06-13T08:27:27.148Z</updated>
    <content type="html"><![CDATA[<p>不知不觉已经到了第21个生日，真心不想承认，又老了一岁……</p>
<p>然后就想着，去年的今天我在干什么？</p>
<p>明年的今天我会在干什么？明年大概就是快到了大家都要离开的日子了吧，嗯，我想明年一定不会放过这个日子！</p>
<a id="more"></a>
<hr>
<p>最常用的两个应用的提醒倒是跟的很快~~</p>
<p>空间总是最早就跟上的。记得大学刚开始那段日子，每天刷空间总是会记得先看看最近好友的生日，后来看得越来越少了，再后来空间看得也越来越少了。</p>
<p>也是越长大，似乎想说的话就越少了/^.^/，也都是下意识地只想说给自己那一个小圈子里的人听。于是空间状态越发越少，朋友圈越发越少…</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-033.jpg" alt="qzone"></p>
<p>话说从用网易云音乐开始就觉得它推荐的歌单很准，每次打开都能找到自己想听的歌。</p>
<p>换了不少音乐站，最后一直在用的也就是网易云和QQ啦。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-034.jpg" alt="wangyiyun"></p>
<hr>
<p>然后今年的生日没有告诉过别人，想着本来也就不是太看重这个日子啦。然后这几天事情各种多，考试、报告的deadline、然后是各种不算太好的消息、包括对未来的迷茫。原本想好的好好读个研究生的想法也因为突然的各种现实而动摇了，唉…不想说了</p>
<p>只是觉得心里挺空的，之前在忙着考试忙着赶报告的时候可以什么都不想。一旦考完了，放松下来之后，好多问题就自己冒出来到脑子里啦。总是想得都太远，也不知道这样是好事还是坏事。</p>
<p>嗯！生日嘛，本该就该是个高兴的日子啦，还有几个人能够记着，那就够了。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-031.jpg" alt="w1"></p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-032.jpg" alt="w2"></p>
<hr>
<p>最后是刚到的这两本书。</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2015-06-035.jpg" alt="book"></p>
<p>虽说还要纠结下半年究竟该做何选择，然而我总认为我所要坚持的大方向还是这块自己感兴趣的东西，那就继续学咯~不管以后的日子会怎么样，不辜负自己的心意就好了。</p>
<p>愿你们的每一天都过得愉快。</p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=368800&auto=1&height=66"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<p>不知不觉已经到了第21个生日，真心不想承认，又老了一岁……</p>
<p>然后就想着，去年的今天我在干什么？</p>
<p>明年的今天我会在干什么？明年大概就是快到了大家都要离开的日子了吧，嗯，我想明年一定不会放过这个日子！</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通宵那些事]]></title>
    <link href="http://jcf94.github.io/2015/05/28/2015-05-28-diary/"/>
    <id>http://jcf94.github.io/2015/05/28/2015-05-28-diary/</id>
    <published>2015-05-28T12:14:10.000Z</published>
    <updated>2015-05-28T12:33:39.000Z</updated>
    <content type="html"><![CDATA[<p>已经快要忘了上一次通宵是在什么时候了，曾经做数学建模的时候是通过的，最后应该也是在期末的某次，一边要弄课设，一边又有考试，然后想着通宵赶紧把课设做做完，留出白天的时间来好好复习。</p>
<p>说起来还是自己平时的执行效率太低，总是没有办法全心全意地复习，拖啊拖啊拖啊的，就拖成了现在这个样子。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>已经快要忘了上一次通宵是在什么时候了，曾经做数学建模的时候是通过的，最后应该也是在期末的某次，一边要弄课设，一边又有考试，然后想着通宵赶紧把课设做做完，留出白天的时间来好好复习。</p>
<p>说起来还是自己平时的执行效率太低，总是没有办法全心全意地复习，拖啊拖啊拖啊的，就]]>
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始使用Github]]></title>
    <link href="http://jcf94.github.io/2015/05/26/2015-05-26-start/"/>
    <id>http://jcf94.github.io/2015/05/26/2015-05-26-start/</id>
    <published>2015-05-26T07:34:31.000Z</published>
    <updated>2015-05-27T04:54:28.000Z</updated>
    <content type="html"><![CDATA[<p>之前的博客都是写在博客园上的，现在转移至github。</p>
<p>第一次用Markdown这种语法，真心简洁明了，短小精悍啊~ 各种格式也是帅爆</p>
<p>算是从5月26号正式开始跑这个博客吧，27号最后换了个比较喜欢的主题，然后开始慢慢改自己的东西，估计以后一段时间用的都是这个样式了。</p>
<p>然后有空会开始把博客园的东西一篇一篇移回到这里来。</p>
<hr>
<p>最近一周各种考试+实验+写报告，满满的都是事情…</p>
<p>然而这么忙，我发现我还是控制不住自己啊啊…就开始折腾这个博客了…这种自己都觉得坑爹啊的奇怪习惯真得改改了啊啊啊（捂脸）</p>
<p>好好复习去了……</p>
<p>最后吐槽一句，这学期的考试真的好难啊啊啊啊啊啊啊~~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前的博客都是写在博客园上的，现在转移至github。</p>
<p>第一次用Markdown这种语法，真心简洁明了，短小精悍啊~ 各种格式也是帅爆</p>
<p>算是从5月26号正式开始跑这个博客吧，27号最后换了个比较喜欢的主题，然后开始慢慢改自己的东西，估计以后一段时]]>
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="日常" scheme="http://jcf94.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[test]]></title>
    <link href="http://jcf94.github.io/2015/05/26/2015-05-26-test/"/>
    <id>http://jcf94.github.io/2015/05/26/2015-05-26-test/</id>
    <published>2015-05-26T05:07:16.000Z</published>
    <updated>2015-06-13T05:19:32.611Z</updated>
    <content type="html"><![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><pre><code>这是一段不加格式的代码
<span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span>
<span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span>

<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>
</span>{
    <span class="built_in">printf</span>(<span class="string">"Helloworld\n"</span>);

    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><h3 id="三级标题">三级标题</h3><a id="more"></a>
<h4 id="四级标题">四级标题</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段正常的代码</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Helloworld\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$$这是一串数学公式$$<br>$$e=mc^2$$</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>这是一堆<br>引用</p>
<blockquote>
<p>又名块注释</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p><em>这是一句斜体</em></p>
<p><em>这也是一句斜体</em></p>
<p><strong>这是一句加粗</strong></p>
<p><strong>这也是一句加粗</strong></p>
<ul>
<li>这是无序列表</li>
</ul>
<ul>
<li>这也是无序列表</li>
</ul>
<ul>
<li>这还是无序列表</li>
</ul>
<ol>
<li>这是有序列表</li>
<li>这也是有序列表</li>
</ol>
<p>这是一个<a href="http://baidu.com" target="_blank" rel="external">链接</a></p>
<p>这是一堆链接<a href="http://google.com" target="_blank" rel="external">Google</a>，<a href="http://baidu.com" target="_blank" rel="external">baidu</a></p>
<blockquote>
<p>下面来测试一下带图</p>
</blockquote>
<p><img src="/images/photo.jpg" alt="alt text" title="图片测试"></p>
<p><del>删除线</del></p>
<table>
<thead>
<tr>
<th style="text-align:left">这是一个</th>
<th style="text-align:center">表格</th>
<th style="text-align:right">OK</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">左对齐</td>
<td style="text-align:center">居中</td>
<td style="text-align:right">右对齐</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><pre><code>这是一段不加格式的代码
<span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span>
<span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span>

<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>
</span>{
    <span class="built_in">printf</span>(<span class="string">"Helloworld\n"</span>);

    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><h3 id="三级标题">三级标题</h3>]]>
    
    </summary>
    
      <category term="测试" scheme="http://jcf94.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jcf94.github.io/2015/05/26/2015-05-26-hello-world/"/>
    <id>http://jcf94.github.io/2015/05/26/2015-05-26-hello-world/</id>
    <published>2015-05-26T02:00:00.000Z</published>
    <updated>2015-05-26T05:58:19.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="测试" scheme="http://jcf94.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 3726 Graph and Queries 平衡树+前向星+并查集+离线操作+逆向思维 数据结构大综合题]]></title>
    <link href="http://jcf94.github.io/2015/03/23/2015-03-23-HDU-3726-Graph-and-Queries/"/>
    <id>http://jcf94.github.io/2015/03/23/2015-03-23-HDU-3726-Graph-and-Queries/</id>
    <published>2015-03-23T11:29:27.000Z</published>
    <updated>2015-06-19T06:34:04.926Z</updated>
    <content type="html"><![CDATA[<h1 id="Graph_and_Queries">Graph and Queries</h1><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>You are given an undirected graph with N vertexes and M edges. Every vertex in this graph has an integer value assigned to it at the beginning. You’re also given a sequence of operations and you need to process them as requested. Here’s a list of the possible operations that you might encounter:</p>
<p>1)  Deletes an edge from the graph. The format is [D X], where X is an integer from 1 to M, indicating the ID of the edge that you should delete. It is guaranteed that no edge will be deleted more than once.</p>
<p>2)  Queries the weight of the vertex with K-th maximum value among all vertexes currently connected with vertex X (including X itself). The format is [Q X K], where X is an integer from 1 to N, indicating the id of the vertex, and you may assume that K will always fit into a 32-bit signed integer. In case K is illegal, the value for that query will be considered as undefined, and you should return 0 as the answer to that query.</p>
<p>3)  Changes the weight of a vertex. The format is [C X V], where X is an integer from 1 to N, and V is an integer within the range [-106, 106].</p>
<a id="more"></a>
<p>The operations end with one single character, E, which indicates that the current case has ended. For simplicity, you only need to output one real number - the average answer of all queries.</p>
<h2 id="Input">Input</h2><p>There are multiple test cases in the input file. Each case starts with two integers N and M (1 &lt;= N &lt;= 2 <em> 104, 0 &lt;= M &lt;= 6 </em> 104), the number of vertexes in the graph. The next N lines describes the initial weight of each vertex (-106 &lt;= weight[i] &lt;= 106). The next part of each test case describes the edges in the graph at the beginning. Vertexes are numbered from 1 to N. The last part of each test case describes the operations to be performed on the graph. It is guaranteed that the number of query operations [Q X K] in each case will be in the range [1, 2 <em> 105], and there will be no more than 2 </em> 105 operations that change the values of the vertexes [C X V].<br>There will be a blank line between two successive cases. A case with N = 0, M = 0 indicates the end of the input file and this case should not be processed by your program.</p>
<h2 id="Output">Output</h2><p>For each test case, output one real number – the average answer of all queries, in the format as indicated in the sample output. Please note that the result is rounded to six decimal places.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>3<br>20<br>1 2<br>3<br>3<br>D 3<br>Q 1 2<br>Q 2 1<br>D 2<br>Q 3 2<br>C 1 50<br>Q 1 1<br>E<br>3<br>20<br>1 2<br>3<br>3<br>Q 1 1<br>Q 1 2<br>Q 1 3<br>E<br>0</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>Case 1: 25.000000<br>Case 2: 16.666667</p>
</blockquote>
<p>【Hint】</p>
<p>For the first sample:<br>D 3 — deletes the 3rd edge in the graph (the remaining edges are (1, 2) and (2, 3))<br>Q 1 2 — finds the vertex with the second largest value among all vertexes connected with 1. The answer is 20.<br>Q 2 1 — finds the vertex with the largest value among all vertexes connected with 2. The answer is 30.<br>D 2 — deletes the 2nd edge in the graph (the only edge left after this operation is (1, 2))<br>Q 3 2 — finds the vertex with the second largest value among all vertexes connected with 3.  The answer is 0 (Undefined).<br>C 1 50 — changes the value of vertex 1 to 50.<br>Q 1 1 — finds the vertex with the largest value among all vertex connected with 1. The answer is 50.<br>E — This is the end of the current test case. Four queries have been evaluated, and the answer to this case is (20 + 30 + 0 + 50) / 4 = 25.000.</p>
<p>For the second sample, caution about the vertex with same weight:<br>Q 1 1 – the answer is 20<br>Q 1 2 – the answer is 20<br>Q 1 3 – the answer is 10</p>
<h2 id="题意">题意</h2><p>给出一张无向图，并在图中进行多种操作：</p>
<p>1.删除一条边；2.改变一个点的权值；3.询问x能够到达的所有点中，第k大的是多少</p>
<h2 id="分析">分析</h2><p>花费了好多时间在这道题上，算是这段时间中做到的最综合的数据结构题了。</p>
<p>首先本题的无向图一开始就是个陷阱，如果单纯地从图的角度来考虑，每次询问都需要遍历全图来找第k大的值，这显然是不可取的，而中间又存在删边操作，图的连通性不是稳定的，结点的权值会变，而且可能多次改变，所以整个图是完全不稳定的，没办法用图论的方法来解决。</p>
<p>考虑倒过来操作，如果我们从做完所有操作之后最后的结果图出发，逆序回去，则原本的删边可以看成是将两个连通块连接到一起，询问第k值是在x点当前所属的连通块中进行，对点权的修改也是，而对于每一个独立的连通块，最后这两步可以用平衡树来实现。</p>
<p>所以算法的雏形就有了，询问连通块k值、修改连通块中点的点权操作——平衡树，维护点的连通性——并查集，保存点权的修改信息——前向星</p>
<p>完整过程：</p>
<p>1.首先从完整图出发，读入所有操作，记录删掉的边，按顺序记录点权的变化情况，记录其他信息；</p>
<p>2.用删边信息建立终图的连通性，并查集维护，对于每一个独立的连通块，建立一个独立的平衡树（这里我用的是SBT，网上题解搜出来好多人用的Splay，我其实有点不太理解，感觉这里没有需要用到Splay特殊结构的地方，单纯的维护平衡树的话Splay的稳定性和效率应该是不如SBT的。有大神路过看到这个的话，希望能交流下~~~）；</p>
<p>3.从最后一条操作开始逆序回来：</p>
<p>i.  询问，则在x所属的平衡树中找第k值；</p>
<p>ii. 修改，则在x所属的平衡树中删掉原始的值，插入新值，这里对点权的顺序维护我用了前向星，要保证点权的操作也是要有序的；</p>
<p>iii.删边，在这里就是如果两个点属于两个不同的连通块，则将两个连通块连起来，并查集合并，同时平衡树合并。平衡树合并的时候只能把小的那棵树一个一个加到大的树中去，貌似Splay有个启发式合并，用了finger search神马的东西，可以把合并在O（nlogn）内完成，不会写，ORZ。</p>
<h2 id="后记">后记</h2><p>写这道题的时候，SBT模板改了两次，-_-///，然后中间有SBT结合并查集结合前向星的，代码里面就是数组套数组套数组套数组……好多地方写着写着就写乱了，教训是如果能简单，一定不要往复杂了写。</p>
<p>然后并查集的教训：father[]绝对不能直接引用，必须调用getfather（）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : HDU3726</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 20010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> enod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> p,q;</span><br><span class="line">    <span class="keyword">bool</span> enable;</span><br><span class="line">&#125; enode;</span><br><span class="line">enode e[<span class="number">60010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> qnod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,k;</span><br><span class="line">&#125; qnode;</span><br><span class="line">qnode lisq[<span class="number">200010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> no,value,time;</span><br><span class="line">&#125; node;</span><br><span class="line">node lis[<span class="number">300010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sons[MAXN][<span class="number">2</span>],size[MAXN],data[MAXN],sbt[MAXN],sbttail;</span><br><span class="line"><span class="keyword">int</span> lisd[<span class="number">60010</span>],taild,tailq,tail,tailtot,lisc[<span class="number">200010</span>],tailc=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> start[MAXN],num[MAXN],father[MAXN];</span><br><span class="line"><span class="keyword">char</span> listot[<span class="number">500010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;t,<span class="keyword">int</span> w)</span> <span class="comment">//rotate(&amp;node,0/1)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=sons[t][<span class="number">1</span>-w];</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    sons[t][<span class="number">1</span>-w]=sons[k][w];</span><br><span class="line">    sons[k][w]=t;</span><br><span class="line">    size[k]=size[t];</span><br><span class="line">    size[t]=size[sons[t][<span class="number">0</span>]]+size[sons[t][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span> <span class="comment">//maintain(&amp;node,flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">1</span>]]) rotate(t,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">1</span>]]) </span><br><span class="line">        &#123;</span><br><span class="line">            rotate(sons[t][<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">            rotate(t,<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">0</span>]]) rotate(t,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">0</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            rotate(sons[t][<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">            rotate(t,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    maintain(sons[t][<span class="number">0</span>],<span class="keyword">false</span>);</span><br><span class="line">    maintain(sons[t][<span class="number">1</span>],<span class="keyword">true</span>);</span><br><span class="line">    maintain(t,<span class="keyword">false</span>);</span><br><span class="line">    maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v,<span class="keyword">int</span> pos)</span> <span class="comment">//insert(&amp;root,value)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!size[t])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!pos)</span><br><span class="line">        &#123;</span><br><span class="line">            sbttail++;</span><br><span class="line">            pos=sbttail;</span><br><span class="line">        &#125;</span><br><span class="line">        data[pos]=v;</span><br><span class="line">        size[pos]=<span class="number">1</span>;</span><br><span class="line">        sons[pos][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        sons[pos][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        t=pos;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        size[t]++;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;data[t]) insert(sons[t][<span class="number">0</span>],v,pos);</span><br><span class="line">        <span class="keyword">else</span> insert(sons[t][<span class="number">1</span>],v,pos);</span><br><span class="line">        maintain(t,v&gt;=data[t]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span> <span class="comment">//node=del(&amp;root,key)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    size[t]--;</span><br><span class="line">    <span class="keyword">if</span> (v==data[t]||(v&lt;data[t]&amp;&amp;sons[t][<span class="number">0</span>]==<span class="number">0</span>)||(v&gt;data[t]&amp;&amp;sons[t][<span class="number">1</span>]==<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret=data[t];</span><br><span class="line">        <span class="keyword">if</span> (sons[t][<span class="number">0</span>]==<span class="number">0</span>||sons[t][<span class="number">1</span>]==<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            last=t;</span><br><span class="line">            t=sons[t][<span class="number">1</span>]+sons[t][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> data[t]=del(sons[t][<span class="number">0</span>],data[t]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (v&lt;data[t]) <span class="keyword">return</span> del(sons[t][<span class="number">0</span>],v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> del(sons[t][<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==size[sons[t][<span class="number">0</span>]]+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=size[sons[t][<span class="number">0</span>]]) <span class="keyword">return</span> select(sons[t][<span class="number">0</span>],k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> select(sons[t][<span class="number">1</span>],k-<span class="number">1</span>-size[sons[t][<span class="number">0</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_father</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i]=i;</span><br><span class="line">        sbt[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x]!=x) father[x]=getfather(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xx=getfather(x),yy=getfather(y);</span><br><span class="line">    <span class="keyword">if</span> (size[sbt[xx]]&gt;size[sbt[yy]]) </span><br><span class="line">    &#123;</span><br><span class="line">        father[yy]=xx;</span><br><span class="line">        <span class="keyword">while</span>(size[sbt[yy]]&gt;<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=del(sbt[yy],data[sbt[yy]]);</span><br><span class="line">            insert(sbt[xx],temp,last);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        father[xx]=yy;</span><br><span class="line">        <span class="keyword">while</span>(size[sbt[xx]]&gt;<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=del(sbt[xx],data[sbt[xx]]);</span><br><span class="line">            insert(sbt[yy],temp,last);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.no==b.no) <span class="keyword">return</span> a.time&lt;b.time;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.no&lt;b.no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"3726.txt"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n,m,tt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>&amp;&amp;(n+m&gt;<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            lis[i].no=i;</span><br><span class="line">            lis[i].time=i;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;lis[i].value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;e[i].p,&amp;e[i].q);</span><br><span class="line">            e[i].enable=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        taild=<span class="number">0</span>;tailq=<span class="number">0</span>;tailc=<span class="number">0</span>;tail=n;tailtot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> doit=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(doit)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> c=getchar();</span><br><span class="line">            <span class="keyword">while</span>(c!=<span class="string">'D'</span>&amp;&amp;c!=<span class="string">'Q'</span>&amp;&amp;c!=<span class="string">'C'</span>&amp;&amp;c!=<span class="string">'E'</span>) c=getchar();</span><br><span class="line">            tailtot++;</span><br><span class="line">            listot[tailtot]=c;</span><br><span class="line">            <span class="keyword">switch</span>(c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                    taild++;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;lisd[taild]);</span><br><span class="line">                    e[lisd[taild]].enable=<span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'Q'</span>:</span><br><span class="line">                    tailq++;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;lisq[tailq].x,&amp;lisq[tailq].k);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                    tail++;</span><br><span class="line">                    lis[tail].time=tail;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;lis[tail].no,&amp;lis[tail].value);</span><br><span class="line">                    tailc++;</span><br><span class="line">                    lisc[tailc]=lis[tail].no;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    doit=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(&amp;lis[<span class="number">1</span>],&amp;lis[tail+<span class="number">1</span>],op);</span><br><span class="line">        <span class="keyword">int</span> o=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (o!=lis[i].no)</span><br><span class="line">            &#123;</span><br><span class="line">                o=lis[i].no;</span><br><span class="line">                start[o]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            num[o]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        clean_father(n);</span><br><span class="line">        sbttail=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(size,<span class="number">0</span>,<span class="keyword">sizeof</span>(size));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) insert(sbt[i],lis[start[i]+num[i]-<span class="number">1</span>].value,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (e[i].enable)</span><br><span class="line">        <span class="keyword">if</span> (getfather(e[i].p)!=getfather(e[i].q)) </span><br><span class="line">        link(e[i].p,e[i].q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ansq=tailq;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=tailtot-<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">switch</span>(listot[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>:</span><br><span class="line">                <span class="keyword">if</span> (lisq[tailq].k&gt;<span class="number">0</span>&amp;&amp;size[sbt[getfather(lisq[tailq].x)]]&gt;=lisq[tailq].k) </span><br><span class="line">                    ans+=data[select(sbt[getfather(lisq[tailq].x)],size[sbt[getfather(lisq[tailq].x)]]-lisq[tailq].k+<span class="number">1</span>)];</span><br><span class="line">                tailq--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                <span class="keyword">if</span> (getfather(e[lisd[taild]].p)!=getfather(e[lisd[taild]].q))</span><br><span class="line">                    link(e[lisd[taild]].p,e[lisd[taild]].q);</span><br><span class="line">                taild--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                num[lisc[tailc]]--;</span><br><span class="line">                del(sbt[getfather(lisc[tailc])],lis[start[lisc[tailc]]+num[lisc[tailc]]].value);</span><br><span class="line">                insert(sbt[getfather(lisc[tailc])],lis[start[lisc[tailc]]+num[lisc[tailc]]-<span class="number">1</span>].value,last);</span><br><span class="line">                tailc--;</span><br><span class="line">        &#125;</span><br><span class="line">        tt++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %.6f\n"</span>,tt,ans/ansq);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Graph_and_Queries">Graph and Queries</h1><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>You are given an undirected graph with N vertexes and M edges. Every vertex in this graph has an integer value assigned to it at the beginning. You’re also given a sequence of operations and you need to process them as requested. Here’s a list of the possible operations that you might encounter:</p>
<p>1)  Deletes an edge from the graph. The format is [D X], where X is an integer from 1 to M, indicating the ID of the edge that you should delete. It is guaranteed that no edge will be deleted more than once.</p>
<p>2)  Queries the weight of the vertex with K-th maximum value among all vertexes currently connected with vertex X (including X itself). The format is [Q X K], where X is an integer from 1 to N, indicating the id of the vertex, and you may assume that K will always fit into a 32-bit signed integer. In case K is illegal, the value for that query will be considered as undefined, and you should return 0 as the answer to that query.</p>
<p>3)  Changes the weight of a vertex. The format is [C X V], where X is an integer from 1 to N, and V is an integer within the range [-106, 106].</p>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VIJOS P1081 野生动物园 SBT、划分树模板]]></title>
    <link href="http://jcf94.github.io/2015/03/16/2015-03-16-vijos-p1081/"/>
    <id>http://jcf94.github.io/2015/03/16/2015-03-16-vijos-p1081/</id>
    <published>2015-03-16T08:04:00.000Z</published>
    <updated>2015-06-19T06:26:48.901Z</updated>
    <content type="html"><![CDATA[<h1 id="野生动物园">野生动物园</h1><h2 id="描述">描述</h2><p>cjBBteam拥有一个很大的野生动物园。这个动物园坐落在一个狭长的山谷内，这个区域从南到北被划分成N个区域，每个区域都饲养着一头狮子。这些狮子从北到南编号为1,2,3,…,N。每头狮子都有一个觅食能力值Ai，Ai越小觅食能力越强。饲养员cmdButtons决定对狮子进行M次投喂，每次投喂都选择一个区间[I,J]，从中选取觅食能力值第K强的狮子进行投喂。值得注意的是，cmdButtons不愿意对某些区域进行过多的投喂，他认为这样有悖公平。因此cmdButtons的投喂区间是互不包含的。你的任务就是算出每次投喂后，食物被哪头狮子吃掉了。</p>
<a id="more"></a>
<h2 id="输入格式">输入格式</h2><p>输入第一行有两个数N和M。此后一行有N个数，从南到北描述狮子的觅食能力值。此后M行，每行描述一次投喂。第t+2的三个数I,J,K表示在第t次投喂中，cmdButtons选择了区间[I,J]内觅食能力值第K强的狮子进行投喂。</p>
<h2 id="输出格式">输出格式</h2><p>输出有M行，每行一个整数。第i行的整数表示在第i次投喂中吃到食物的狮子的觅食能力值。</p>
<h2 id="样例输入">样例输入</h2><blockquote>
<p>7 2<br>1 5 2 6 3 7 4<br>1 5 3<br>2 7 1</p>
</blockquote>
<h2 id="样例输出">样例输出</h2><blockquote>
<p>3<br>2</p>
</blockquote>
<h2 id="分析">分析</h2><h3 id="解法一、平衡树">解法一、平衡树</h3><p>由题目给出的区间互相不包含可以得出，若将每次询问的区间按照起始区域进行排序，那一定是一段接一段，只有可能是两种情况：</p>
<p>下一段的左端与上一段的右端不相交或者相交。</p>
<p>这两种情况都是前面的数据与后面的数据互不影响，因此将区间排序之后，对于每一个区间，删除掉前面多余的，插入后面不够的，使平衡树中仅留下该区间中的数据，然后直接找第k小即可。</p>
<p>SBT可解。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : VIJOS1081</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sons[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> size[MAXN],data[MAXN];</span><br><span class="line"><span class="keyword">int</span> sbt=<span class="number">0</span>,sbttail=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;t,<span class="keyword">int</span> w)</span> <span class="comment">//rotate(&amp;node,0/1)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=sons[t][<span class="number">1</span>-w];</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    sons[t][<span class="number">1</span>-w]=sons[k][w];</span><br><span class="line">    sons[k][w]=t;</span><br><span class="line">    size[k]=size[t];</span><br><span class="line">    size[t]=size[sons[t][<span class="number">0</span>]]+size[sons[t][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span> <span class="comment">//maintain(&amp;node,flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">1</span>]]) rotate(t,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">0</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">1</span>]]) </span><br><span class="line">        &#123;</span><br><span class="line">            rotate(sons[t][<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">            rotate(t,<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">1</span>]]&gt;size[sons[t][<span class="number">0</span>]]) rotate(t,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size[sons[sons[t][<span class="number">1</span>]][<span class="number">0</span>]]&gt;size[sons[t][<span class="number">0</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            rotate(sons[t][<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">            rotate(t,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    maintain(sons[t][<span class="number">0</span>],<span class="keyword">false</span>);</span><br><span class="line">    maintain(sons[t][<span class="number">1</span>],<span class="keyword">true</span>);</span><br><span class="line">    maintain(t,<span class="keyword">false</span>);</span><br><span class="line">    maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span> <span class="comment">//insert(&amp;root,0,value)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t)</span><br><span class="line">    &#123;</span><br><span class="line">        sbttail++;</span><br><span class="line">        data[sbttail]=v;</span><br><span class="line">        size[sbttail]=<span class="number">1</span>;</span><br><span class="line">        sons[sbttail][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        sons[sbttail][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        t=sbttail;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        size[t]++;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;data[t]) insert(sons[t][<span class="number">0</span>],v);</span><br><span class="line">        <span class="keyword">else</span> insert(sons[t][<span class="number">1</span>],v);</span><br><span class="line">        maintain(t,v&gt;=data[t]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span> <span class="comment">//del(&amp;root,key)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    size[t]--;</span><br><span class="line">    <span class="keyword">if</span> (v==data[t]||(v&lt;data[t]&amp;&amp;sons[t][<span class="number">0</span>]==<span class="number">0</span>)||(v&gt;data[t]&amp;&amp;sons[t][<span class="number">1</span>]==<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret=data[t];</span><br><span class="line">        <span class="keyword">if</span> (sons[t][<span class="number">0</span>]==<span class="number">0</span>||sons[t][<span class="number">1</span>]==<span class="number">0</span>) t=sons[t][<span class="number">1</span>]+sons[t][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> data[t]=del(sons[t][<span class="number">0</span>],data[t]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (v&lt;data[t]) <span class="keyword">return</span> del(sons[t][<span class="number">0</span>],v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> del(sons[t][<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==size[sons[t][<span class="number">0</span>]]+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=size[sons[t][<span class="number">0</span>]]) <span class="keyword">return</span> select(sons[t][<span class="number">0</span>],k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> select(sons[t][<span class="number">1</span>],k-<span class="number">1</span>-size[sons[t][<span class="number">0</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,l,r,k;</span><br><span class="line">&#125; node;</span><br><span class="line">node d[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.l==b.l) <span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.l&lt;b.l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,ans;</span><br><span class="line">&#125; node1;</span><br><span class="line">node1 out[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op1</span><span class="params">(node1 a,node1 b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.i&lt;b.i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line"></span><br><span class="line">    sbt=<span class="number">0</span>,sbttail=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;d[i].l,&amp;d[i].r,&amp;d[i].k);</span><br><span class="line">        d[i].i=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(&amp;d[<span class="number">1</span>],&amp;d[m+<span class="number">1</span>],op);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (r&lt;d[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            sbt=<span class="number">0</span>;</span><br><span class="line">            sbttail=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=d[i].l;j&lt;=d[i].r;j++) insert(sbt,a[j]);</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=l;j&lt;d[i].l;j++) del(sbt,a[j]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=r+<span class="number">1</span>;j&lt;=d[i].r;j++) insert(sbt,a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        l=d[i].l;</span><br><span class="line">        r=d[i].r;</span><br><span class="line">        <span class="keyword">int</span> temp=select(sbt,d[i].k);</span><br><span class="line">        </span><br><span class="line">        out[i].i=d[i].i;</span><br><span class="line">        out[i].ans=data[temp];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(&amp;out[<span class="number">1</span>],&amp;out[m+<span class="number">1</span>],op1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,out[i].ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解法二、划分树">解法二、划分树</h3><p>划分树是一种类似快排的数据结构，可以快速在O（logn）的时间内直接求出某个区间内的k值。</p>
<p>然后本题就是……一棵裸的划分树，直接套即可</p>
<p>。。。。。。最后的结果是，不知道为什么比SBT要慢很多，直观的感觉上划分树没有多余的删除操作，应该会快很多的</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : VIJOS1081_SortTree</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAXN],dp[<span class="number">20</span>][MAXN],tree[<span class="number">20</span>][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maketree</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>,ls=l,rs=mid+<span class="number">1</span>,num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=mid;i&gt;=l&amp;&amp;a[i]==a[mid];i--) num++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i==l) dp[c][i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> dp[c][i]=dp[c][i-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tree[c][i]&lt;a[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[c][i]++;</span><br><span class="line">            tree[c+<span class="number">1</span>][ls]=tree[c][i];</span><br><span class="line">            ls++;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">if</span> (tree[c][i]&gt;a[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            tree[c+<span class="number">1</span>][rs]=tree[c][i];</span><br><span class="line">            rs++;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (num)</span><br><span class="line">            &#123;</span><br><span class="line">                num--;</span><br><span class="line">                dp[c][i]++;</span><br><span class="line">                tree[c+<span class="number">1</span>][ls]=tree[c][i];</span><br><span class="line">                ls++;</span><br><span class="line">            &#125; <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                tree[c+<span class="number">1</span>][rs]=tree[c][i];</span><br><span class="line">                rs++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</span><br><span class="line">    maketree(c+<span class="number">1</span>,l,mid);</span><br><span class="line">    maketree(c+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> tree[c][l];</span><br><span class="line">    <span class="keyword">int</span> s,ss,mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l==ql)</span><br><span class="line">    &#123;</span><br><span class="line">        s=<span class="number">0</span>;</span><br><span class="line">        ss=dp[c][qr];</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        s=dp[c][ql-<span class="number">1</span>];</span><br><span class="line">        ss=dp[c][qr]-s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=ss) <span class="keyword">return</span> query(c+<span class="number">1</span>,l,mid,l+s,l+s+ss-<span class="number">1</span>,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(c+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid-l+<span class="number">1</span>+ql-s,mid-l+<span class="number">1</span>+qr-s-ss,k-ss);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("zoo8.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("1.out","w",stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        tree[<span class="number">0</span>][i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(&amp;a[<span class="number">1</span>],&amp;a[n+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    maketree(<span class="number">0</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l,r,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">0</span>,<span class="number">1</span>,n,l,r,k));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="野生动物园">野生动物园</h1><h2 id="描述">描述</h2><p>cjBBteam拥有一个很大的野生动物园。这个动物园坐落在一个狭长的山谷内，这个区域从南到北被划分成N个区域，每个区域都饲养着一头狮子。这些狮子从北到南编号为1,2,3,…,N。每头狮子都有一个觅食能力值Ai，Ai越小觅食能力越强。饲养员cmdButtons决定对狮子进行M次投喂，每次投喂都选择一个区间[I,J]，从中选取觅食能力值第K强的狮子进行投喂。值得注意的是，cmdButtons不愿意对某些区域进行过多的投喂，他认为这样有悖公平。因此cmdButtons的投喂区间是互不包含的。你的任务就是算出每次投喂后，食物被哪头狮子吃掉了。</p>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="划分树" scheme="http://jcf94.github.io/tags/%E5%88%92%E5%88%86%E6%A0%91/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VIJOS P1647 不差钱 SBT]]></title>
    <link href="http://jcf94.github.io/2015/03/15/2015-03-15-vijos-p1647/"/>
    <id>http://jcf94.github.io/2015/03/15/2015-03-15-vijos-p1647/</id>
    <published>2015-03-15T08:03:37.000Z</published>
    <updated>2015-06-19T06:13:21.183Z</updated>
    <content type="html"><![CDATA[<h1 id="不差钱">不差钱</h1><h2 id="描述">描述</h2><p>同学们一起看了小品《不差钱》，LX神突发奇想，想刁难一下十八居士，他让十八居士模拟一下点菜的过程。</p>
<h2 id="输入格式">输入格式</h2><p>输入第一行为一个数price，表示价钱大于price的菜赵本山都不要。</p>
<p>以下几行表示点菜的过程，每行两个整数p，n</p>
<a id="more"></a>
<p>p=1 表示在菜谱中添加一个价格为n的菜,这是第i个1号命令，这个菜的编号就是i，</p>
<p>p=2 表示菜谱中第n号菜已卖完（但不代表菜谱中没有了这种菜），</p>
<p>p=3 表示赵本山点第n贵的菜。</p>
<p>输入文件以0结束。</p>
<p>菜的价格0&lt;n&lt;=10^6。</p>
<p>3种命令， 30%数据命令最多300次， 60%数据命令最多3000次， 100%数据命令最多100000次。</p>
<h2 id="输出格式">输出格式</h2><p>对于每个p=3， 如果第n贵的菜价格高于price，则输出“Dui bu qi,Mei you.”。</p>
<p>如果第n贵的菜价格不高于price，且没有卖完，则输出“You.”然后输出价格” m Yuan.”；</p>
<p>如果已卖完，则输出“Mei you. Zhe ge ke yi you. Zhe ge zhen mei you!”</p>
<h2 id="输入样例">输入样例</h2><blockquote>
<p>40<br>1 41<br>1 39<br>1 100<br>1 204<br>1 1<br>1 27<br>1 18<br>1 79<br>3 1<br>3 2<br>3 5<br>2 5<br>3 8<br>2 7<br>3 7<br>1 10<br>3 8<br>0</p>
</blockquote>
<h2 id="输出样例">输出样例</h2><blockquote>
<p>Dui bu qi,Mei you.<br>Dui bu qi,Mei you.<br>You. 39 Yuan.<br>Mei you. Zhe ge ke yi you. Zhe ge zhen mei you!<br>Mei you. Zhe ge ke yi you. Zhe ge zhen mei you!<br>You. 10 Yuan.</p>
</blockquote>
<h2 id="分析">分析</h2><p>题目意思表达得比较明确，本题也很适合作为SBT的模板题。</p>
<p>菜的编号就是存在SBT静态数组中的下标，只要加一个是否empty的标记即可。</p>
<p>唯一稍微可能有点问题的是出现多个相同菜价的菜时的选择问题，一开始按照普通二叉树的写法写SBT的前趋后继，后来发现这样做其实是不严谨的，因为左右旋操作的存在，虽然一开始相等的数是插入到右边去，但是不能保证不会因为左旋而把父节点旋到左子树去了，所以最后只能保证左子树的值不大于根，右子树的值不小于根，相等值是完全没办法判断的。</p>
<p>可能还是我的SBT写法不够严谨</p>
<p>……最后只好继续查找第n-1大、n-2大…第n+1大、第n+2大…直到找到不相等为止，O（k*logn）遍历一遍相等的数。</p>
<p>好在测试时间上好像还不错，不知道又没有更好的办法？</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : VIJOS1647</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> sbtnod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> key,left,right,size;</span><br><span class="line">    <span class="keyword">bool</span> empty;</span><br><span class="line">&#125; sbtnode;</span><br><span class="line"><span class="keyword">int</span> sbttail,sbt;</span><br><span class="line"></span><br><span class="line">sbtnode tree[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rrotate</span><span class="params">(<span class="keyword">int</span>&amp; t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=tree[t].left;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    tree[t].left=tree[k].right;</span><br><span class="line">    tree[k].right=t;</span><br><span class="line">    tree[k].size=tree[t].size;</span><br><span class="line">    tree[t].size=tree[tree[t].left].size+tree[tree[t].right].size+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lrotate</span><span class="params">(<span class="keyword">int</span>&amp; t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=tree[t].right;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    tree[t].right=tree[k].left;</span><br><span class="line">    tree[k].left=t;</span><br><span class="line">    tree[k].size=tree[t].size;</span><br><span class="line">    tree[t].size=tree[tree[t].left].size+tree[tree[t].right].size+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="keyword">if</span> (tree[tree[tree[t].left].left].size&gt;tree[tree[t].right].size) rrotate(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tree[tree[tree[t].left].right].size&gt;tree[tree[t].right].size) </span><br><span class="line">        &#123;</span><br><span class="line">            lrotate(tree[t].left);</span><br><span class="line">            rrotate(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (tree[tree[tree[t].right].right].size&gt;tree[tree[t].left].size) lrotate(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tree[tree[tree[t].right].left].size&gt;tree[tree[t].left].size)</span><br><span class="line">        &#123;</span><br><span class="line">            rrotate(tree[t].right);</span><br><span class="line">            lrotate(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    maintain(tree[t].left,<span class="keyword">false</span>);</span><br><span class="line">    maintain(tree[t].right,<span class="keyword">true</span>);</span><br><span class="line">    maintain(t,<span class="keyword">false</span>);</span><br><span class="line">    maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t)</span><br><span class="line">    &#123;</span><br><span class="line">        sbttail++;</span><br><span class="line">        tree[sbttail].key=v;</span><br><span class="line">        tree[sbttail].size=<span class="number">1</span>;</span><br><span class="line">        tree[sbttail].empty=<span class="keyword">false</span>;</span><br><span class="line">        t=sbttail;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        tree[t].size++;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;tree[t].key) insert(tree[t].left,v);</span><br><span class="line">        <span class="keyword">else</span> insert(tree[t].right,v);</span><br><span class="line">        maintain(t,v&gt;=tree[t].key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==tree[tree[t].left].size+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=tree[tree[t].left].size) <span class="keyword">return</span> select(tree[t].left,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> select(tree[t].right,k-<span class="number">1</span>-tree[tree[t].left].size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>,<span class="string">"r"</span>,stdin);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pri;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pri);</span><br><span class="line"></span><br><span class="line">    sbt=<span class="number">0</span>;</span><br><span class="line">    sbttail=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> p,n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p,&amp;n)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                insert(sbt,n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                tree[n].empty=<span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                n=sbttail-n+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> temp=select(sbt,n);</span><br><span class="line">                <span class="keyword">if</span> (tree[temp].key&gt;pri) <span class="built_in">printf</span>(<span class="string">"Dui bu qi,Mei you.\n"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">bool</span> done=<span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!tree[temp].empty) </span><br><span class="line">                    &#123;</span><br><span class="line">                        done=<span class="keyword">true</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"You. %d Yuan.\n"</span>,tree[temp].key);</span><br><span class="line">                    &#125; <span class="keyword">else</span> </span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">int</span> pre,p=n;</span><br><span class="line">                        <span class="keyword">while</span>(p&gt;<span class="number">1</span>&amp;&amp;(!done))</span><br><span class="line">                        &#123;</span><br><span class="line">                            p--;</span><br><span class="line">                            pre=select(sbt,p);</span><br><span class="line">                            <span class="keyword">if</span> (tree[pre].key&lt;tree[temp].key) <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">if</span> (!tree[pre].empty)</span><br><span class="line">                            &#123;</span><br><span class="line">                                done=<span class="keyword">true</span>;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"You. %d Yuan.\n"</span>,tree[temp].key);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">int</span> suc,s=n;</span><br><span class="line">                        <span class="keyword">while</span>(s&lt;n&amp;&amp;(!done))</span><br><span class="line">                        &#123;</span><br><span class="line">                            s++;</span><br><span class="line">                            suc=select(sbt,s);</span><br><span class="line">                            <span class="keyword">if</span> (tree[suc].key&gt;tree[temp].key) <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">if</span> (!tree[suc].empty)</span><br><span class="line">                            &#123;</span><br><span class="line">                                done=<span class="keyword">true</span>;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"You. %d Yuan.\n"</span>,tree[temp].key);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!done) <span class="built_in">printf</span>(<span class="string">"Mei you. Zhe ge ke yi you. Zhe ge zhen mei you!\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="不差钱">不差钱</h1><h2 id="描述">描述</h2><p>同学们一起看了小品《不差钱》，LX神突发奇想，想刁难一下十八居士，他让十八居士模拟一下点菜的过程。</p>
<h2 id="输入格式">输入格式</h2><p>输入第一行为一个数price，表示价钱大于price的菜赵本山都不要。</p>
<p>以下几行表示点菜的过程，每行两个整数p，n</p>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 4006 The kth great number 优先队列、平衡树模板题（SBT）]]></title>
    <link href="http://jcf94.github.io/2015/03/08/2015-03-08-HDU-4006-The-kth-great-number/"/>
    <id>http://jcf94.github.io/2015/03/08/2015-03-08-HDU-4006-The-kth-great-number/</id>
    <published>2015-03-08T12:27:54.000Z</published>
    <updated>2015-06-19T06:13:41.748Z</updated>
    <content type="html"><![CDATA[<h1 id="The_kth_great_number">The kth great number</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65768/65768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>Xiao  Ming  and  Xiao  Bao  are  playing  a  simple  Numbers  game.  In  a  round  Xiao  Ming  can choose  to  write  down  a  number,  or  ask  Xiao  Bao  what  the  kth  great  number  is.  Because  the number written by Xiao Ming is too much, Xiao Bao is feeling giddy. Now, try to help Xiao Bao.</p>
<a id="more"></a>
<h2 id="Input">Input</h2><p>There are several test cases. For each test case, the first line of input contains two positive integer n, k. Then n lines follow. If Xiao Ming choose to write down a number, there will be an “ I” followed by a number that Xiao Ming will write down. If Xiao Ming choose to ask Xiao Bao, there will be a “Q”, then you need to output the kth great number.</p>
<h2 id="Output">Output</h2><p>The output consists of one integer representing the largest number of islands that all lie on one line.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>3<br>I 1<br>I 2<br>I 3<br>Q<br>I 5<br>Q<br>I 4<br>Q</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>1<br>2<br>3</p>
</blockquote>
<h2 id="Hint">Hint</h2><p>Xiao Ming won’t ask Xiao Bao the kth great number when the number of the written number is smaller than k. (1=&lt;k&lt;=n&lt;=1000000).</p>
<h2 id="题意">题意</h2><p>给出一系列操作：</p>
<p>1.记录一个数；2.求第k小的数</p>
<h2 id="分析">分析</h2><h3 id="解法一、优先队列">解法一、优先队列</h3><p>题目每次询问的只是其中的一个数，这种情况下用一个堆来维护所有数的集合即可。</p>
<p>而且本题的k是一个固定值，因此只需要一个小根堆即可；若k不是一个固定值，则需要一个小根堆配合大根堆共同完成。</p>
<p>堆可以用STL中的优先队列来代替。</p>
<p>创建一个小根堆并向其加入数据，若堆中的数量大于k则弹出堆顶元素，始终保持整个堆中只有k个元素。遇到询问时，读取堆顶元素。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : HDU4006</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> cmp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("std.txt","w",stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp&gt;q;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c=getchar();</span><br><span class="line">            <span class="keyword">while</span>(c!=<span class="string">'I'</span>&amp;&amp;c!=<span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                c=getchar();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c==<span class="string">'I'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> now;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;now);</span><br><span class="line">                q.push(now);</span><br><span class="line">                <span class="keyword">if</span> (q.size()&gt;k) q.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,q.top());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解法二、平衡树">解法二、平衡树</h3><p>本题可作为平衡树模板题，虽然因为有点大材小用内存占用比较大，而且时间上并没有太大优势。</p>
<p>动态维护一棵平衡树，求k大值。</p>
<p>以下采用Size Balanced Tree完成：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : HDU4006_SBT</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 1000010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> sbtnod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> key,left,right,size;</span><br><span class="line">&#125; sbtnode;</span><br><span class="line"><span class="keyword">int</span> sbttail,sbt;</span><br><span class="line"></span><br><span class="line">sbtnode tree[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rrotate</span><span class="params">(<span class="keyword">int</span>&amp; t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=tree[t].left;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    tree[t].left=tree[k].right;</span><br><span class="line">    tree[k].right=t;</span><br><span class="line">    tree[k].size=tree[t].size;</span><br><span class="line">    tree[t].size=tree[tree[t].left].size+tree[tree[t].right].size+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lrotate</span><span class="params">(<span class="keyword">int</span>&amp; t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=tree[t].right;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> ;</span><br><span class="line">    tree[t].right=tree[k].left;</span><br><span class="line">    tree[k].left=t;</span><br><span class="line">    tree[k].size=tree[t].size;</span><br><span class="line">    tree[t].size=tree[tree[t].left].size+tree[tree[t].right].size+<span class="number">1</span>;</span><br><span class="line">    t=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">bool</span> flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="keyword">if</span> (tree[tree[tree[t].left].left].size&gt;tree[tree[t].right].size) rrotate(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tree[tree[tree[t].left].right].size&gt;tree[tree[t].right].size) </span><br><span class="line">        &#123;</span><br><span class="line">            lrotate(tree[t].left);</span><br><span class="line">            rrotate(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (tree[tree[tree[t].right].right].size&gt;tree[tree[t].left].size) lrotate(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tree[tree[tree[t].right].left].size&gt;tree[tree[t].left].size)</span><br><span class="line">        &#123;</span><br><span class="line">            rrotate(tree[t].right);</span><br><span class="line">            lrotate(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    maintain(tree[t].left,<span class="keyword">false</span>);</span><br><span class="line">    maintain(tree[t].right,<span class="keyword">true</span>);</span><br><span class="line">    maintain(t,<span class="keyword">false</span>);</span><br><span class="line">    maintain(t,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t)</span><br><span class="line">    &#123;</span><br><span class="line">        sbttail++;</span><br><span class="line">        tree[sbttail].key=v;</span><br><span class="line">        tree[sbttail].size=<span class="number">1</span>;</span><br><span class="line">        t=sbttail;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        tree[t].size++;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;tree[t].key) insert(tree[t].left,v);</span><br><span class="line">        <span class="keyword">else</span> insert(tree[t].right,v);</span><br><span class="line">        maintain(t,v&gt;=tree[t].key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span>&amp; t,<span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    tree[t].size--;</span><br><span class="line">    <span class="keyword">if</span> (v==tree[t].key||(v&lt;tree[t].key&amp;&amp;tree[t].left==<span class="number">0</span>)||(v&gt;tree[t].key&amp;&amp;tree[t].right==<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ret=tree[t].key;</span><br><span class="line">        <span class="keyword">if</span> (tree[t].left==<span class="number">0</span>||tree[t].right==<span class="number">0</span>) t=tree[t].left+tree[t].right;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">else</span> tree[t].key=del(tree[t].left,tree[t].key+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v&lt;tree[t].key) ret=del(tree[t].left,v);</span><br><span class="line">        <span class="keyword">else</span> ret=del(tree[t].right,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==tree[tree[t].left].size+<span class="number">1</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=tree[tree[t].left].size) <span class="keyword">return</span> select(tree[t].left,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> select(tree[t].right,k-<span class="number">1</span>-tree[tree[t].left].size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("st.txt","w",stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));</span><br><span class="line">        sbttail=<span class="number">0</span>;</span><br><span class="line">        sbt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c=getchar();</span><br><span class="line">            <span class="keyword">while</span>(c!=<span class="string">'I'</span>&amp;&amp;c!=<span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                c=getchar();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> now;</span><br><span class="line">            <span class="keyword">if</span> (c==<span class="string">'I'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;now);</span><br><span class="line">                insert(sbt,now);</span><br><span class="line">            &#125; <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                now=select(sbt,sbttail-k+<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tree[now].key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="The_kth_great_number">The kth great number</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65768/65768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>Xiao  Ming  and  Xiao  Bao  are  playing  a  simple  Numbers  game.  In  a  round  Xiao  Ming  can choose  to  write  down  a  number,  or  ask  Xiao  Bao  what  the  kth  great  number  is.  Because  the number written by Xiao Ming is too much, Xiao Bao is feeling giddy. Now, try to help Xiao Bao.</p>]]>
    
    </summary>
    
      <category term="SBT" scheme="http://jcf94.github.io/tags/SBT/"/>
    
      <category term="优先队列" scheme="http://jcf94.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="平衡树" scheme="http://jcf94.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 1068 Girls and Boys 二分图最大独立集（最大二分匹配）]]></title>
    <link href="http://jcf94.github.io/2014/09/12/2014-09-12-HDU-1068-Girls-and-Boys/"/>
    <id>http://jcf94.github.io/2014/09/12/2014-09-12-HDU-1068-Girls-and-Boys/</id>
    <published>2014-09-12T13:30:27.000Z</published>
    <updated>2015-06-19T07:58:03.283Z</updated>
    <content type="html"><![CDATA[<h1 id="Girls_and_Boys">Girls and Boys</h1><p>Time Limit: 20000/10000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>the second year of the university somebody started a study on the romantic relations between the students. The relation “romantically involved” is defined between one girl and one boy. For the study reasons it is necessary to find out the maximum set satisfying the condition: there are no two students in the set who have been “romantically involved”. The result of the program is the number of students in such a set.</p>
<a id="more"></a>
<p>The input contains several data sets in text format. Each data set represents one set of subjects of the study, with the following description:</p>
<p>the number of students<br>the description of each student, in the following format<br>student_identifier:(number_of_romantic_relations) student_identifier1 student_identifier2 student_identifier3 …<br>or<br>student_identifier:(0)</p>
<p>The student_identifier is an integer number between 0 and n-1, for n subjects.<br>For each given data set, the program should write to standard output a line containing the result.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>7<br>0: (3) 4 5 6<br>1: (2) 4 6<br>2: (0)<br>3: (0)<br>4: (2) 0 1<br>5: (1) 0<br>6: (2) 0 1<br>3<br>0: (2) 1 2<br>1: (1) 0<br>2: (1) 0</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>5<br>2</p>
</blockquote>
<h2 id="题意">题意</h2><p>题目给定一些男女生之间相互的romantic关系，要求找出一个最大的集合，使得该集合中的所有男女生之间都不存在romantic关系。</p>
<h2 id="分析">分析</h2><p>一个二分图的最大独立集点数与最大二分匹配个数有直接的关系：</p>
<p>最大独立集点数 = 顶点数 - 最大二分匹配对数</p>
<p>故本题直接转化为求最大二分匹配即可，需要注意的是，题中给出的条件是1指向2，2也会指向1，所以最终算出来的匹配数其实是实际对数的两倍，最终被顶点数减去之前首先需要折半。</p>
<p>基础二分匹配练手题。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">ID:   Chen Fan</span><br><span class="line">PROG: hdu1068</span><br><span class="line">LANG: G++</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">&#125; node;</span><br><span class="line">node a[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> result[<span class="number">1000</span>],start[<span class="number">1000</span>],num[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.a==b.a) <span class="keyword">return</span> a.b&lt;b.b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.a&lt;b.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> s)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num[s];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=a[start[s]+i].b;</span><br><span class="line">        <span class="keyword">if</span> (!flag[now])</span><br><span class="line">        &#123;</span><br><span class="line">            flag[now]=<span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (result[now]==-<span class="number">1</span>||find(result[now]))</span><br><span class="line">            &#123;</span><br><span class="line">                result[now]=s;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,p;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d: (%d"</span>,&amp;x,&amp;p);</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> y;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y);</span><br><span class="line">                tail++;</span><br><span class="line">                a[tail].a=x;</span><br><span class="line">                a[tail].b=y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(&amp;a[<span class="number">1</span>],&amp;a[tail+<span class="number">1</span>],op);</span><br><span class="line">        <span class="keyword">int</span> o=-<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (o!=a[i].a)</span><br><span class="line">            &#123;</span><br><span class="line">                o=a[i].a;</span><br><span class="line">                start[o]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            num[o]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(result,-<span class="number">1</span>,<span class="keyword">sizeof</span>(result));</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">            <span class="keyword">if</span> (find(i)) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-ans/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Girls_and_Boys">Girls and Boys</h1><p>Time Limit: 20000/10000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>the second year of the university somebody started a study on the romantic relations between the students. The relation “romantically involved” is defined between one girl and one boy. For the study reasons it is necessary to find out the maximum set satisfying the condition: there are no two students in the set who have been “romantically involved”. The result of the program is the number of students in such a set.</p>]]>
    
    </summary>
    
      <category term="二分图匹配" scheme="http://jcf94.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 3367 Pseudoforest 最大生成树]]></title>
    <link href="http://jcf94.github.io/2014/09/09/2014-09-09-HDU-3367-Pseudoforest/"/>
    <id>http://jcf94.github.io/2014/09/09/2014-09-09-HDU-3367-Pseudoforest/</id>
    <published>2014-09-09T11:13:35.000Z</published>
    <updated>2015-06-19T07:37:15.777Z</updated>
    <content type="html"><![CDATA[<h1 id="Pseudoforest">Pseudoforest</h1><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>In graph theory, a pseudoforest is an undirected graph in which every connected component has at most one cycle. The maximal pseudoforests of G are the pseudoforest subgraphs of G that are not contained within any larger pseudoforest of G. A pesudoforest is larger than another if and only if the total value of the edges is greater than another one’s.</p>
<a id="more"></a>
<h2 id="Input">Input</h2><p>The input consists of multiple test cases. The first line of each test case contains two integers, n(0 &lt; n &lt;= 10000), m(0 &lt;= m &lt;= 100000), which are the number of the vertexes and the number of the edges. The next m lines, each line consists of three integers, u, v, c, which means there is an edge with value c (0 &lt; c &lt;= 10000) between u and v. You can assume that there are no loop and no multiple edges. The last test case is followed by a line containing two zeros, which means the end of the input.</p>
<h2 id="Output">Output</h2><p>Output the sum of the value of the edges of the maximum pesudoforest.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>3 3<br>0 1 1<br>1 2 1<br>2 0 1<br>4 5<br>0 1 1<br>1 2 1<br>2 3 1<br>3 0 1<br>0 2 2<br>0 0</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>3<br>5</p>
</blockquote>
<h2 id="题意">题意</h2><p>给出一张图，求最大生成树。要求每一个连通块上只能有一个环。</p>
<h2 id="分析">分析</h2><p>对于Kruskal来说，最小/最大生成树只是改变一下排序顺序即可。这里需要另外注意添加的就是对环的判断了：</p>
<p>如果两个节点不在同一棵树内，且分别不成环，则可合并；</p>
<p>如果两个节点在同一棵树内，但是未成环，则加上这条边之后将成环；</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,c;</span><br><span class="line">&#125; node;</span><br><span class="line">node a[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.c&gt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_father</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) father[i]=i;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x]!=x) father[x]=getfather(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    father[getfather(x)]=getfather(y);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a[i].x,&amp;a[i].y,&amp;a[i].c);</span><br><span class="line">        sort(&amp;a[<span class="number">1</span>],&amp;a[m+<span class="number">1</span>],op);</span><br><span class="line">        </span><br><span class="line">        clean_father(n);</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (getfather(a[i].x)!=getfather(a[i].y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(flag[getfather(a[i].x)]&amp;&amp;flag[getfather(a[i].y)]))</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (flag[getfather(a[i].x)]||flag[getfather(a[i].y)])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag[getfather(a[i].x)]=<span class="keyword">true</span>;</span><br><span class="line">                    flag[getfather(a[i].y)]=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                link(a[i].x,a[i].y);</span><br><span class="line">                ans+=a[i].c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">if</span> (!flag[getfather(a[i].x)])</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=a[i].c;</span><br><span class="line">            flag[getfather(a[i].x)]=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Pseudoforest">Pseudoforest</h1><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>In graph theory, a pseudoforest is an undirected graph in which every connected component has at most one cycle. The maximal pseudoforests of G are the pseudoforest subgraphs of G that are not contained within any larger pseudoforest of G. A pesudoforest is larger than another if and only if the total value of the edges is greater than another one’s.</p>]]>
    
    </summary>
    
      <category term="最小生成树" scheme="http://jcf94.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The 2014 ACM-ICPC Asia Mudanjiang Regional First Round]]></title>
    <link href="http://jcf94.github.io/2014/09/08/2014-09-08-The-2014-ACM-ICPC-Asia-Mudanjiang-Regional-First-Round/"/>
    <id>http://jcf94.github.io/2014/09/08/2014-09-08-The-2014-ACM-ICPC-Asia-Mudanjiang-Regional-First-Round/</id>
    <published>2014-09-08T03:24:57.000Z</published>
    <updated>2015-06-19T07:32:49.457Z</updated>
    <content type="html"><![CDATA[<p><del>【A】签到题</del></p>
<p><del>【B】构造</del></p>
<p><del>【C】遍历+floodfill染色或并查集</del></p>
<p>【D】DP（背包）+状态压缩 （感觉可出）</p>
<p>【E】线段树</p>
<p>【F】图形题 搜索+状态压缩</p>
<p>【G】数论，某种不定方程……ZOJ上到现在只过了4个人，还找不到题解-_-///</p>
<p><del>【H】回文数变种+dfs枚举构造</del> 又是构造-_-///</p>
<p>【I】字符串哈希+DP或者暴力</p>
<p><del>【J】直接模拟，字符串细节操作</del></p>
<a id="more"></a>
<hr>
<h1 id="A、The_Himalayas">A、The Himalayas</h1><p>Time Limit:  2 Seconds<br>Memory Limit:  65536 KB</p>
<h2 id="Description">Description</h2><p>As an artist, Bob usually need to travel around the world. He made a lot of sketch of scenery on his journey. A famous spot he have visited recently is the Himalayas. The Himalayas is a mountain range in South Asia separating the plains of the Indian subcontinent from the Qinghai-Tibet Plateau. The Himalayas include over a hundred mountains exceeding 7,200 meters in elevation.</p>
<p>One day, Bob came up with an strange idea. He wanted to know the number of mountain peaks in his paintings. As his best friend, he turned to you for help. You are given a list of N height sampling values Hi. You should determine how many peaks are there. For all i which satisfies 2 &lt;= i &lt;= N - 1, Hi is defined as a peak if and only if Hi-1 &lt; Hi &gt; Hi+1.</p>
<h2 id="Input">Input</h2><p>There are multiple test cases. The first line of input contains an integer T indicating the number of test cases. For each test case:</p>
<p>The first line contains one integer N (1 &lt;= N &lt;= 50). The next line contains N integers Hi (1 &lt;= Hi &lt;= 8844). It is guaranteed that any two adjacent height sampling values will be different.</p>
<h2 id="Output">Output</h2><p>For each test case, output the number of peaks.</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>2<br>9<br>1 3 2 4 6 3 2 3 1<br>5<br>1 2 3 4 5</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>3<br>0</p>
</blockquote>
<h2 id="题意">题意</h2><p>给出一系列地形的高度，要求找到山峰的个数</p>
<h2 id="分析">分析</h2><p>稍微判断一下即可。</p>
<hr>
<h1 id="B、A_Volcanic_Island">B、A Volcanic Island</h1><p>Time Limit: 2 Seconds<br>Memory Limit: 65536 KB<br>Special Judge</p>
<h2 id="Description-1">Description</h2><p>An underwater volcano has erupted massively in somewhere of the deep Atlantis Ocean. This large eruption led to the birth of a new volcanic island, which had a shape of square. Near the island, there are N countries. All of them have claimed the sovereignty over the island.</p>
<p>After a lot of multilateral negotiation and occasional armed conflicts, the N countries decided to divide the square volcanic island equally. They partitioned the island into N x N small equal-sized square chunks. Each country could get a connected region consists of exact N chunks.</p>
<p>Two chunks A and B are called “connected” if they share an edge, or there exists another chunk C connected with both A and B. A group of chunks are called “connected region” if any two of these chunks are connected.</p>
<p>Every country want a unique region. It means the N regions should be different with each other. Two regions are considered as the same if and only if one can transform into the other by an isometry (a combination of rigid motions, including translation, rotation and reflection).</p>
<p>In a nutshell, your task is to divide a square island with N x N chunks into N connected regions with different shape. You also need to draw a map to color the regions of the map so that no two edge-adjacent regions have the same color. Most of the people in these countries believed that four different colors are enough. So you can mark these regions with at most four colors, red, green, blue and yellow.</p>
<h2 id="Input-1">Input</h2><p>There are multiple test cases. The first line of input contains an integer T indicating the number of test cases. For each test case:</p>
<p>There is only an integer N (1 &lt;= N &lt;= 100).</p>
<h2 id="Output-1">Output</h2><p>For each test case, output a valid map described above. If there is no solution, output “No solution!” instead. Please note that only four colors (‘R’, ‘G’, ‘B’ and ‘Y’) can be used to drawing the map.</p>
<h2 id="Sample_Input-1">Sample Input</h2><blockquote>
<p>2<br>2<br>5</p>
</blockquote>
<h2 id="Sample_Output-1">Sample Output</h2><blockquote>
<p>No solution!<br>YYYGR<br>YGGGR<br>YGYYR<br>BYYYR<br>BBBBR</p>
</blockquote>
<h2 id="题意-1">题意</h2><p>给出一张n*n的图，要求用4种颜色去染色，染色之后将图分成n个总数为n的颜色块。另外的一个重要要求就是这n个色块的形状不能出现重复。</p>
<h2 id="分析-1">分析</h2><p>本题采用的是special judge，所以需要自己构造出一种方案来对其进行染色。</p>
<p>赛后参考其他大神的想法，构造方案如下：</p>
<p>以7和8为例：</p>
<p>首先将其中的最后一列全部记为一种颜色，剩下的n*(n-1)部分用另外3种颜色去染：</p>
<p>前n/2种区块蛇形染色：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">n=7</span><br><span class="line">-------</span></span><br><span class="line">1111110</span><br><span class="line">2222210</span><br><span class="line">2233330</span><br><span class="line">xxx3330</span><br><span class="line">xxxxxx0</span><br><span class="line">xxxxxx0</span><br><span class="line"><span class="header">xxxxxx0</span><br><span class="line">-------</span></span><br><span class="line"><span class="header">n=8</span><br><span class="line">--------</span></span><br><span class="line">11111110</span><br><span class="line">22222210</span><br><span class="line">22333330</span><br><span class="line">44443330</span><br><span class="line">4444xxx0</span><br><span class="line">xxxxxxx0</span><br><span class="line">xxxxxxx0</span><br><span class="line"><span class="header">xxxxxxx0</span><br><span class="line">--------</span></span><br></pre></td></tr></table></figure>
<p>后n/2块一行一行从左向右将剩下部分填满:</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">n=7</span><br><span class="line">-------</span></span><br><span class="line">111111 0</span><br><span class="line">222221 0</span><br><span class="line">223333 0</span><br><span class="line"><span class="code">   333 0</span></span><br><span class="line">444</span><br><span class="line">554444 0</span><br><span class="line">655555 0</span><br><span class="line"><span class="header">666666 0</span><br><span class="line">-------</span></span><br><span class="line"><span class="header">n=8</span><br><span class="line">--------</span></span><br><span class="line">1111111 0</span><br><span class="line">2222221 0</span><br><span class="line">2233333 0</span><br><span class="line">4444333 0</span><br><span class="line">4444</span><br><span class="line"><span class="code">    555 0</span></span><br><span class="line">5555566 0</span><br><span class="line">6666667 0</span><br><span class="line"><span class="header">7777777 0</span><br><span class="line">--------</span></span><br></pre></td></tr></table></figure>
<p>以上n=7和n=8时最后对齐的方向与第一部分最后一行染色的方向相同。</p>
<p>接下来需要注意的就是第一块与最后一块的形状相同，于是作一下微调把它们变得不一样即可：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">n=7</span><br><span class="line">-------</span></span><br><span class="line">1111110</span><br><span class="line">2222210</span><br><span class="line">2233330</span><br><span class="line">4443330</span><br><span class="line">6544440</span><br><span class="line">6555550</span><br><span class="line"><span class="header">6666650</span><br><span class="line">-------</span></span><br><span class="line"><span class="header">n=8</span><br><span class="line">--------</span></span><br><span class="line">11111110</span><br><span class="line">22222210</span><br><span class="line">22333330</span><br><span class="line">44443330</span><br><span class="line">44445550</span><br><span class="line">55555670</span><br><span class="line">66666670</span><br><span class="line">67777770</span><br></pre></td></tr></table></figure>
<p>我的做法是把最后一块色块在最后一行的其中一块与最后第二块色块在n-2行的其中一块进行互换，保证相同颜色这时候还是连在一起的就行。</p>
<p>测试时，发现n等于5和6时，用这种调整方案是不行的，因为格子数太少，会出现第一块与最后一块颜色相同然后重叠到一起的情况。对包括这个在内的几种情况进行一下特判即可。</p>
<h2 id="赛后启发">赛后启发</h2><p>以后碰到这种需要自己进行构造的题目不要直接就放弃，感觉稍微花点时间还真是能想出来的，，，这种纠结程度就跟贪心似地，，，如果没别的题能做了，至少随便构造一个交一下看看呗。 </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : ZOJ3810</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">    1111110</span><br><span class="line">    2222210</span><br><span class="line">    2233330</span><br><span class="line">    4443330</span><br><span class="line">    6544440</span><br><span class="line">    6555550</span><br><span class="line">    6666650</span><br><span class="line"></span><br><span class="line">    11111110</span><br><span class="line">    22222210</span><br><span class="line">    22333330</span><br><span class="line">    44443330</span><br><span class="line">    44445550</span><br><span class="line">    55555670</span><br><span class="line">    66666670</span><br><span class="line">    67777770</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"Y\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">2</span>||n==<span class="number">3</span>||n==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"No solution!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">"YYYGR\nYGGGR\nYGYYR\nBYYYR\nBBBBR\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">"RRRRRY\nRGGGGY\nGGRRRY\nRRRGBY\nGGGGBY\nGBBBBY\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">1</span>,y=<span class="number">1</span>,fx=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[x][y]=i;</span><br><span class="line">                y+=fx;</span><br><span class="line">                <span class="keyword">if</span> ((y==n&amp;&amp;fx==<span class="number">1</span>)||(y==<span class="number">0</span>&amp;&amp;fx==-<span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    x++;</span><br><span class="line">                    fx=-fx;</span><br><span class="line">                    y+=fx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=n/<span class="number">2</span>+<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[x][y]=i;</span><br><span class="line">                y+=fx;</span><br><span class="line">                <span class="keyword">if</span> ((y==n&amp;&amp;fx==<span class="number">1</span>)||(y==<span class="number">0</span>&amp;&amp;fx==-<span class="number">1</span>)) </span><br><span class="line">                &#123;</span><br><span class="line">                    x++;</span><br><span class="line">                    y=n-y+fx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fx==-<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[n-<span class="number">2</span>][<span class="number">1</span>]=n-<span class="number">1</span>;</span><br><span class="line">                a[n][n-<span class="number">1</span>]=n-<span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                a[n-<span class="number">2</span>][n-<span class="number">1</span>]=n-<span class="number">1</span>;</span><br><span class="line">                a[n][<span class="number">1</span>]=n-<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> words[]=&#123;<span class="string">'R'</span>,<span class="string">'G'</span>,<span class="string">'B'</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span> (a[i][j]==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Y"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,words[a[i][j]%<span class="number">3</span>]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="C、Untrusted_Patrol">C、Untrusted Patrol</h1><p>Time Limit:  3 Seconds<br>Memory Limit:  65536 KB</p>
<h2 id="Description-2">Description</h2><p>Edward is a rich man. He owns a large factory for health drink production. As a matter of course, there is a large warehouse in the factory.</p>
<p>To ensure the safety of drinks, Edward hired a security man to patrol the warehouse. The warehouse has N piles of drinks and M passageways connected them (warehouse is not big enough). When the evening comes, the security man will start to patrol the warehouse following a path to check all piles of drinks.</p>
<p>Unfortunately, Edward is a suspicious man, so he sets sensors on K piles of the drinks. When the security man comes to check the drinks, the sensor will record a message. Because of the memory limit, the sensors can only record for the first time of the security man’s visit.</p>
<p>After a peaceful evening, Edward gathered all messages ordered by recording time. He wants to know whether is possible that the security man has checked all piles of drinks. Can you help him?</p>
<p>The security man may start to patrol at any piles of drinks. It is guaranteed that the sensors work properly. However, Edward thinks the security man may not works as expected. For example, he may digs through walls, climb over piles, use some black magic to teleport to anywhere and so on. </p>
<h2 id="Input-2">Input</h2><p>There are multiple test cases. The first line of input is an integer T indicates the number of test cases. For each test case:</p>
<p>The first line contains three integers N (1 &lt;= N &lt;= 100000), M (1 &lt;= M &lt;= 200000) and K (1 &lt;= K &lt;= N).</p>
<p>The next line contains K distinct integers indicating the indexes of piles (1-based) that have sensors installed. The following M lines, each line contains two integers Ai and Bi (1 &lt;= Ai, Bi &lt;= N) which indicates a bidirectional passageway connects piles Ai and Bi.</p>
<p>Then, there is an integer L (1 &lt;= L &lt;= K) indicating the number of messages gathered from all sensors. The next line contains L distinct integers. These are the indexes of piles where the messages came from (each is among the K integers above), ordered by recording time.</p>
<h2 id="Output-2">Output</h2><p>For each test case, output “Yes” if the security man worked normally and has checked all piles of drinks, or “No” if not.</p>
<h2 id="Sample_Input-2">Sample Input</h2><blockquote>
<p>2<br>5 5 3<br>1 2 4<br>1 2<br>2 3<br>3 1<br>1 4<br>4 5<br>3<br>4 2 1<br>5 5 3<br>1 2 4<br>1 2<br>2 3<br>3 1<br>1 4<br>4 5<br>3<br>4 1 2</p>
</blockquote>
<h2 id="Sample_Output-2">Sample Output</h2><blockquote>
<p>No<br>Yes</p>
</blockquote>
<h2 id="题意-2">题意</h2><p>给出一张图，图中的某些结点上装着传感器，访问到装着传感器的节点时，就会被记录下来。现在给出一串传感器记录下来的时间访问序列，询问一个人是否能够按照序列的顺序遍历完整张图。</p>
<h2 id="分析-2">分析</h2><h3 id="1-floodfill染色：">1.floodfill染色：</h3><p>当时看到这道题想到的只有暴力DFS，写出来之后发现由于floodfill染色的性质，每个点只是访问一次就够了，效率还是很优的。</p>
<p>基本想法是从时间序列第一个点开始，按时间顺序扩展每一个点，所有标记着传感器的点不可达。扩展完第一个点之后，判断一下下一个点是否能够到达，若不能到达即说明按顺序遍历不可能；否则继续扩展下一个点。</p>
<p>对每一个结点设置四种标记：无标记、已访问、不可访问、能够访问；</p>
<p>普通点在到达之前无标记，到达之后标记为已访问；传感器结点在到达之前标记为不可访问，到达之后标记为能够访问，搜过之后标记为已访问；</p>
<p>一、直接搜索L个传感器的序列，首先将所有拥有传感器的序列全部标记为不可访问；</p>
<p>二、从第一个开始，扩展遍历所有能到达的点，遍历时的点有两种状态：无标记（普通点）和不可/能够访问（带有传感器的点）。无标记点可以直接改为已访问，不可访问的点则标记为能够访问。遍历完之后将该传感器点标为已访问；</p>
<p>三、判断下一个传感器点的状况是不是能够访问，若是则表示可以从之前的传感器点不经过任何序列后面的点而到达，若标记是不可访问则表示不可能从之前的传感器点到达这里，那就直接输出NO了。</p>
<p>四、之后重复二、三过程，直到搜完所有L个点，判断整张图的连通性，即是不是所有点都能到达。</p>
<p>对于K和L，个人觉得描述的最后一句是有用的，就是L只会小于等于K，不一定要等于K。然后第一次没有加这个特判，结果WA了……加上之后AC，-_-////真的是我想多了吗</p>
<p>然后就是前向星存储。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : ZOJ3811</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125; node;</span><br><span class="line">node a[<span class="number">400010</span>];</span><br><span class="line"><span class="keyword">int</span> start[<span class="number">100010</span>],num[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> flag[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sen[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    flag[s]=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num[s];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> next=a[start[s]+i].y;</span><br><span class="line">        <span class="keyword">if</span> (flag[next]==<span class="number">0</span>) dfs(next);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag[next]==<span class="number">1</span>) flag[next]=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sen[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            a[i*<span class="number">2</span>].x=x;</span><br><span class="line">            a[i*<span class="number">2</span>].y=y;</span><br><span class="line">            a[i*<span class="number">2</span>-<span class="number">1</span>].x=y;</span><br><span class="line">            a[i*<span class="number">2</span>-<span class="number">1</span>].y=x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sen[i]);</span><br><span class="line">            flag[sen[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (l&lt;k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        m*=<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">memset</span>(start,<span class="number">0</span>,<span class="keyword">sizeof</span>(start));</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        sort(&amp;a[<span class="number">1</span>],&amp;a[m+<span class="number">1</span>],op);</span><br><span class="line">        <span class="keyword">int</span> o=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (o!=a[i].x) </span><br><span class="line">            &#123;</span><br><span class="line">                o=a[i].x;</span><br><span class="line">                start[o]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            num[o]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        flag[sen[<span class="number">1</span>]]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">bool</span> outp=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">        <span class="keyword">if</span> (flag[sen[i]]==<span class="number">2</span>) dfs(sen[i]);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            outp=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (outp)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        <span class="keyword">if</span> (flag[i]!=<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            outp=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (outp) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-并查集">2.并查集</h3><p>大体思路与上面类似，把1中的染色部分改成扩展一个可以任意到达的无限集即可。</p>
<h2 id="启发">启发</h2><p>题目中给出了明显的顺序的话，可以作为一个突破点。</p>
<hr>
<h1 id="H、Generalized_Palindromic_Number">H、Generalized Palindromic Number</h1><p>Time Limit: 2 Seconds<br>Memory Limit: 65536 KB</p>
<h2 id="Description-3">Description</h2><p>A number that will be the same when it is written forwards or backwards is known as a palindromic number. For example, 1234321 is a palindromic number.</p>
<p>We call a number generalized palindromic number, if after merging all the consecutive same digits, the resulting number is a palindromic number. For example, 122111 is a generalized palindromic number. Because after merging, 122111 turns into 121 which is a palindromic number.</p>
<p>Now you are given a positive integer N, please find the largest generalized palindromic number less than N.</p>
<h2 id="Input-3">Input</h2><p>There are multiple test cases. The first line of input contains an integer T (about 5000) indicating the number of test cases. For each test case:</p>
<p>There is only one integer N (1 &lt;= N &lt;= 1018).</p>
<h2 id="Output-3">Output</h2><p>For each test case, output the largest generalized palindromic number less than N.</p>
<h2 id="Sample_Input-3">Sample Input</h2><blockquote>
<p>4<br>12<br>123<br>1224<br>1122</p>
</blockquote>
<h2 id="Sample_Output-3">Sample Output</h2><blockquote>
<p>11<br>121<br>1221<br>1121</p>
</blockquote>
<h2 id="题意-3">题意</h2><p>如果一个数把相邻数位相同的部分都合并之后它还是一个回文数，那就称其为广义回文数。现在给出一个n，要求找到小于n的最大的广义回文数。</p>
<h2 id="分析-3">分析</h2><p>开始时想从某种贪心的方法出发手动构造这样一个数出来，很可惜失败了，这里每次摆数字的判断有些麻烦。</p>
<p>赛后尝试用DFS进行构造：</p>
<p>每次从前后同时向中间构造，保证回文性。构造时先在高位摆上一个值，然后从低位向中间摆相同的数，中间注意剪枝判断。</p>
<p>注意摆值的时候上限与更高一位是不是与n相应位相同有关。如果前一位与原数不同，则可以从9开始摆，否则不能比原数大。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ***********************************************</span><br><span class="line">MYID    : Chen Fan</span><br><span class="line">LANG    : G++</span><br><span class="line">PROG    : ZOJ3816</span><br><span class="line">************************************************ */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tail,nn[<span class="number">30</span>],num[<span class="number">30</span>],ans[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=r;i&gt;=l;i--) </span><br><span class="line">    <span class="keyword">if</span> (a[i]!=b[i]) <span class="keyword">return</span> a[i]&gt;b[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> high,<span class="keyword">int</span> low,<span class="keyword">bool</span> flag)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (high&lt;low)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(nn,num,<span class="number">1</span>,tail)&amp;&amp;check(num,ans,<span class="number">1</span>,tail))</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++) ans[i]=num[i];</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        <span class="keyword">if</span> (flag) end=nn[high];</span><br><span class="line">        <span class="keyword">else</span> end=<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=end;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now=low;</span><br><span class="line">            <span class="keyword">if</span> (check(ans,num,high+<span class="number">1</span>,tail)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            num[high]=i;</span><br><span class="line">            <span class="keyword">if</span> (num[high]!=num[high+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (now&lt;=high)</span><br><span class="line">                &#123;</span><br><span class="line">                    num[now]=num[high];</span><br><span class="line">                    now++;</span><br><span class="line">                    dfs(high-<span class="number">1</span>,now,flag&amp;&amp;i==end);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> dfs(high-<span class="number">1</span>,low,flag&amp;&amp;i==end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> tt=<span class="number">1</span>;tt&lt;=t;tt++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%llu"</span>,&amp;n);</span><br><span class="line">        </span><br><span class="line">        tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            tail++;</span><br><span class="line">            nn[tail]=n%<span class="number">10</span>;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">        dfs(tail,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=tail;i&gt;=<span class="number">1</span>;i--) <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="启发-1">启发</h2><p>实在不行可以暴搜啊！！！！！</p>
<hr>
<h1 id="J、Pretty_Poem">J、Pretty Poem</h1><p>Time Limit:  2 Seconds<br>Memory Limit:  65536 KB</p>
<h2 id="Description-4">Description</h2><p>Poetry is a form of literature that uses aesthetic and rhythmic qualities of language. There are many famous poets in the contemporary era. It is said that a few ACM-ICPC contestants can even write poetic code. Some poems has a strict rhyme scheme like “ABABA” or “ABABCAB”. For example, “niconiconi” is composed of a rhyme scheme “ABABA” with A = “ni” and B = “co”.</p>
<p>More technically, we call a poem pretty if it can be decomposed into one of the following rhyme scheme: “ABABA” or “ABABCAB”. The symbol A, B and C are different continuous non-empty substrings of the poem. By the way, punctuation characters should be ignored when considering the rhyme scheme.</p>
<p>You are given a line of poem, please determine whether it is pretty or not.</p>
<h2 id="Input-4">Input</h2><p>There are multiple test cases. The first line of input contains an integer T indicating the number of test cases. For each test case:</p>
<p>There is a line of poem S (1 &lt;= length(S) &lt;= 50). S will only contains alphabet characters or punctuation characters.</p>
<h2 id="Output-4">Output</h2><p>For each test case, output “Yes” if the poem is pretty, or “No” if not.</p>
<h2 id="Sample_Input-4">Sample Input</h2><blockquote>
<p>3<br>niconiconi~<br>pettan,pettan,tsurupettan<br>wafuwafu</p>
</blockquote>
<h2 id="Sample_Output-4">Sample Output</h2><blockquote>
<p>Yes<br>Yes<br>No</p>
</blockquote>
<h2 id="分析-4">分析</h2><p>由于本题数据量最大只有50个字符，可以直接模拟枚举。</p>
<p>首先枚举AB，满足AB匹配之后，再判断AB长度的三倍与总长度之间的关系，分类讨论。</p>
<p>算法就是这么个算法，但是实现起来超容易出错……</p>
<p>附上一组处理得比较全面的测试数据</p>
<blockquote>
<p>8<br>xyxyxxy<br>xyxyyxy<br>xxxxyxx<br>xxxxx<br>xyxyx<br>xxxxxxxx<br>xxxxxxxxxxxxx<br>xyzzxyzxyzzxyzxyzxyzzxyz</p>
</blockquote>
<h2 id="启发-2">启发</h2><p>题目数据量才这么点。。。果断应该直接上的</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><del>【A】签到题</del></p>
<p><del>【B】构造</del></p>
<p><del>【C】遍历+floodfill染色或并查集</del></p>
<p>【D】DP（背包）+状态压缩 （感觉可出）</p>
<p>【E】线段树</p>
<p>【F】图形题 搜索+状态压缩</p>
<p>【G】数论，某种不定方程……ZOJ上到现在只过了4个人，还找不到题解-_-///</p>
<p><del>【H】回文数变种+dfs枚举构造</del> 又是构造-_-///</p>
<p>【I】字符串哈希+DP或者暴力</p>
<p><del>【J】直接模拟，字符串细节操作</del></p>]]>
    
    </summary>
    
      <category term="ACM-ICPC" scheme="http://jcf94.github.io/tags/ACM-ICPC/"/>
    
      <category term="ACM_比赛" scheme="http://jcf94.github.io/categories/ACM-%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 1811 Rank of Tetris 拓扑排序+并查集]]></title>
    <link href="http://jcf94.github.io/2014/09/07/2014-09-07-HDU-1811-Rank-of-Tetris/"/>
    <id>http://jcf94.github.io/2014/09/07/2014-09-07-HDU-1811-Rank-of-Tetris/</id>
    <published>2014-09-07T08:03:38.000Z</published>
    <updated>2015-06-19T07:05:17.665Z</updated>
    <content type="html"><![CDATA[<h1 id="Rank_of_Tetris">Rank of Tetris</h1><p>Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>自从Lele开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。</p>
<p>为了更好的符合那些爱好者的喜好，Lele又想了一个新点子：他将制作一个全球Tetris高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。</p>
<p>终于，Lele要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1,并且编号越大，RP就越高。 同时Lele从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有三种情况，分别是”A &gt; B”,”A = B”,”A &lt; B”，分别表示A的Rating高于B,等于B,小于B。</p>
<a id="more"></a>
<p>现在Lele并不是让你来帮他制作这个高手榜，他只是想知道，根据这些信息是否能够确定出这个高手榜，是的话就输出”OK”。否则就请你判断出错的原因，到底是因为信息不完全（输出”UNCERTAIN”），还是因为这些信息中包含冲突（输出”CONFLICT”）。</p>
<p>注意，如果信息中同时包含冲突且信息不完全，就输出”CONFLICT”。</p>
<h2 id="Input">Input</h2><p>本题目包含多组测试，请处理到文件结束。</p>
<p>每组测试第一行包含两个整数N,M(0&lt;=N&lt;=10000,0&lt;=M&lt;=20000),分别表示要排名的人数以及得到的关系数。 接下来有M行，分别表示这些关系</p>
<h2 id="Output">Output</h2><p>对于每组测试，在一行里按题目要求输出</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>3<br>> 1<br>&lt; 2<br>> 2<br>4<br>= 2<br>> 3<br>> 0<br>> 1<br>3<br>> 0<br>> 2<br>&lt; 1</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>OK<br>CONFLICT<br>UNCERTAIN</p>
</blockquote>
<h2 id="题意">题意</h2><p>给定一些点对之间的关系（大于小于相等），判断是否发生冲突。</p>
<h2 id="分析">分析</h2><p>对于冲突判断，直观的想法就是拓扑排序。以大于号或者小于号方向作为拓扑序的方向，如果处理时出现违反拓扑序列的情况则可判断为冲突。</p>
<p>然后这道题还有另外一个问题就是相等情况的处理，如果直接按照拓扑排序对其进行分析，则可能发生错误。为了解决这个问题，可以用并查集进行预处理，将所有相等的点缩成1个点，然后进行后序的拓扑排序。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">10001</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_father</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) father[i]=i;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x]!=x) father[x]=getfather(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    father[getfather(x)]=getfather(y);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x[<span class="number">20001</span>],y[<span class="number">20001</span>],rd[<span class="number">10001</span>],num[<span class="number">10001</span>],start[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">char</span> z[<span class="number">20001</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">&#125; node;</span><br><span class="line">node a[<span class="number">20001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.a&lt;b.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        clean_father(n);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %c %d"</span>,&amp;x[i],&amp;z[i],&amp;y[i]);</span><br><span class="line">            <span class="keyword">if</span> (z[i]==<span class="string">'='</span>) link(x[i],y[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) rd[i]=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">        &#123;</span><br><span class="line">            rd[getfather(i)]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (rd[i]==<span class="number">0</span>) tot++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">switch</span>(z[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">                tail++;</span><br><span class="line">                a[tail].a=getfather(x[i]);</span><br><span class="line">                a[tail].b=getfather(y[i]);</span><br><span class="line">                rd[getfather(y[i])]++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                tail++;</span><br><span class="line">                a[tail].a=getfather(y[i]);</span><br><span class="line">                a[tail].b=getfather(x[i]);</span><br><span class="line">                rd[getfather(x[i])]++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(&amp;a[<span class="number">1</span>],&amp;a[tail+<span class="number">1</span>],op);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> o=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) num[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tail;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].a!=o)</span><br><span class="line">            &#123;</span><br><span class="line">                o=a[i].a;</span><br><span class="line">                start[o]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            num[o]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span> (rd[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            top++;</span><br><span class="line">            <span class="built_in">stack</span>[top]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (top==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"CONFLICT\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="keyword">false</span>,done=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (top&gt;<span class="number">0</span>&amp;&amp;(!done))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (top&gt;<span class="number">1</span>) flag=<span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> now=<span class="built_in">stack</span>[top];</span><br><span class="line">            top--;tot--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num[now];i++)</span><br><span class="line">            &#123;</span><br><span class="line">                rd[a[start[now]+i].b]--;</span><br><span class="line">                <span class="keyword">if</span> (rd[a[start[now]+i].b]==<span class="number">0</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    top++;</span><br><span class="line">                    <span class="built_in">stack</span>[top]=a[start[now]+i].b;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (rd[a[start[now]+i].b]&lt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    done=<span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num[now]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tot&gt;<span class="number">0</span>||done) <span class="built_in">printf</span>(<span class="string">"CONFLICT\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag) <span class="built_in">printf</span>(<span class="string">"UNCERTAIN\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Rank_of_Tetris">Rank of Tetris</h1><p>Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>自从Lele开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。</p>
<p>为了更好的符合那些爱好者的喜好，Lele又想了一个新点子：他将制作一个全球Tetris高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。</p>
<p>终于，Lele要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1,并且编号越大，RP就越高。 同时Lele从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有三种情况，分别是”A &gt; B”,”A = B”,”A &lt; B”，分别表示A的Rating高于B,等于B,小于B。</p>]]>
    
    </summary>
    
      <category term="并查集" scheme="http://jcf94.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="拓扑排序" scheme="http://jcf94.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 1589 Find The Most Comfortable Road 最小生成树+枚举]]></title>
    <link href="http://jcf94.github.io/2014/09/07/2014-09-07-HDU-1589-Find-The-Most-Comfortable-Road/"/>
    <id>http://jcf94.github.io/2014/09/07/2014-09-07-HDU-1589-Find-The-Most-Comfortable-Road/</id>
    <published>2014-09-07T08:00:57.000Z</published>
    <updated>2015-06-19T06:56:07.904Z</updated>
    <content type="html"><![CDATA[<h1 id="find_the_most_comfortable_road">find the most comfortable road</h1><p>Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>XX星有许多城市，城市之间通过一种奇怪的高速公路SARS(Super Air Roam Structure—-超级空中漫游结构）进行交流，每条SARS都对行驶在上面的Flycar限制了固定的Speed，同时XX星人对 Flycar的“舒适度”有特殊要求，即乘坐过程中最高速度与最低速度的差越小乘坐越舒服 ,(理解为SARS的限速要求，flycar必须瞬间提速/降速，痛苦呀 ), 但XX星人对时间却没那么多要求。要你找出一条城市间的最舒适的路径。(SARS是双向的）。</p>
<h2 id="Input">Input</h2><a id="more"></a>
<p>输入包括多个测试实例，每个实例包括： 第一行有2个正整数n (1&lt;n&lt;=200)和m (m&lt;=1000),表示有N个城市和M条SARS。 接下来的行是三个正整数StartCity,EndCity,speed,表示从表面上看StartCity到EndCity,限速为speedSARS。speed&lt;=1000000 然后是一个正整数Q（Q&lt;11),表示寻路的个数。接下来Q行每行有2个正整数Start,End,表示寻路的起终点。</p>
<h2 id="Output">Output</h2><p>每个寻路要求打印一行，仅输出一个非负整数表示最佳路线的舒适度最高速与最低速的差。如果起点和终点不能到达，那么输出-1。</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>4<br>2 2<br>3 4<br>4 1<br>4 2<br>1 3<br>2</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>1<br>0</p>
</blockquote>
<h2 id="题意">题意</h2><p>给定一张无向有权图和一些询问，每一个询问都是一对起/终点，对于每一个询问，要求找到一条路能从起点到达终点，并且得到该条路上所有边权值中最大边与最小边的差，使得这个差值达到最小。最终的输出结果是这个最小差值。</p>
<h2 id="分析">分析</h2><p>考虑Kruskal的贪心过程：将边从小到大排序，不断添边的过程中用并查集判断端点的归属情况。</p>
<p>假设在MST的寻找过程中，一对询问的其中一个点已经加入集合，当找到另外一个点加入集合的时刻寻找就可以结束，此时能够保证最后这条加入的边是已有的边中最大的，因为更大的边还在后面。</p>
<p>所以可以不断枚举最小边，以指定的最小边为基础进行Kruskal最小生成树操作，这里可能有两种情况：</p>
<p>1、最小边恰好在起/终点的路径上，则找到的最后一条边与最小边的差值即为这次查找的结果；</p>
<p>2、最小边不在起/终点的路径上，没有关系，因为后序枚举中仍然能够找出来。</p>
<p>因为使用了贪心性质，这里不能保证这个算法是最优解，但是可以保证结果的正确性。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">&#125; node;</span><br><span class="line">node a[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">op</span><span class="params">(node a,node b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_father</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) father[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x]!=x) father[x]=getfather(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    father[getfather(x)]=getfather(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a[i].a,&amp;a[i].b,&amp;a[i].c);</span><br><span class="line">        sort(&amp;a[<span class="number">1</span>],&amp;a[m+<span class="number">1</span>],op);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t1,t2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t1,&amp;t2);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> minn,maxn,ans=<span class="number">2147483647</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                minn=<span class="number">2147483647</span>;</span><br><span class="line">                maxn=<span class="number">0</span>;</span><br><span class="line">                clean_father(n);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=j;k&lt;=m;k++)</span><br><span class="line">                <span class="keyword">if</span> (getfather(a[k].a)!=getfather(a[k].b))</span><br><span class="line">                &#123;</span><br><span class="line">                    link(a[k].a,a[k].b);</span><br><span class="line">                    <span class="keyword">if</span> (minn&gt;a[k].c) minn=a[k].c;</span><br><span class="line">                    <span class="keyword">if</span> (maxn&lt;a[k].c) maxn=a[k].c;</span><br><span class="line">                    <span class="keyword">if</span> (maxn-minn&gt;ans) <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (getfather(t1)==getfather(t2))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ans&gt;maxn-minn)</span><br><span class="line">                        &#123;</span><br><span class="line">                            ans=maxn-minn;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (ans!=<span class="number">2147483647</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="find_the_most_comfortable_road">find the most comfortable road</h1><p>Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others) </p>
<h2 id="Problem_Description">Problem Description</h2><p>XX星有许多城市，城市之间通过一种奇怪的高速公路SARS(Super Air Roam Structure—-超级空中漫游结构）进行交流，每条SARS都对行驶在上面的Flycar限制了固定的Speed，同时XX星人对 Flycar的“舒适度”有特殊要求，即乘坐过程中最高速度与最低速度的差越小乘坐越舒服 ,(理解为SARS的限速要求，flycar必须瞬间提速/降速，痛苦呀 ), 但XX星人对时间却没那么多要求。要你找出一条城市间的最舒适的路径。(SARS是双向的）。</p>
<h2 id="Input">Input</h2>]]>
    
    </summary>
    
      <category term="最小生成树" scheme="http://jcf94.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[STL中优先队列的使用]]></title>
    <link href="http://jcf94.github.io/2014/09/06/2014-09-06-stl-queue/"/>
    <id>http://jcf94.github.io/2014/09/06/2014-09-06-stl-queue/</id>
    <published>2014-09-06T13:17:41.000Z</published>
    <updated>2015-06-19T06:49:15.867Z</updated>
    <content type="html"><![CDATA[<p>STL中有一个优先队列的容器可以使用。</p>
<ul>
<li>头文件</li>
</ul>
<p>queue 队列容器</p>
<p>vector 向量容器</p>
<ul>
<li>操作</li>
</ul>
<p>优先级队列支持的操作</p>
<table>
<thead>
<tr>
<th>调用</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>q.empty()</td>
<td>如果队列为空，则返回true，否则返回false</td>
</tr>
<tr>
<td>q.size()</td>
<td>返回队列中元素的个数</td>
</tr>
<tr>
<td>q.pop()</td>
<td>删除队首元素，但不返回其值</td>
</tr>
<tr>
<td>q.top()</td>
<td>返回具有最高优先级的元素值，但不删除该元素</td>
</tr>
<tr>
<td>q.push(item)</td>
<td>在基于优先级的适当位置插入新元素</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>对于Pascal留下来的手打堆习惯来说，其实对我用处不大，不过好像STL里面的复杂度更低，代码长度也能少点，以后尽量用STL好了。</p>
<p>测试如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> cmp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> nod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (nod a,nod b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.y&gt;b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt;simple;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp&gt;define;</span><br><span class="line">    priority_queue&lt;node&gt;heap;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">20</span>,<span class="number">50</span>,<span class="number">3202</span>,<span class="number">20</span>,<span class="number">503</span>,<span class="number">12</span>,<span class="number">56</span>,<span class="number">62</span>,<span class="number">50</span>,<span class="number">80</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Simple Test:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) simple.push(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp=simple.top();</span><br><span class="line">        simple.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Define Test:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) define.push(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp=define.top();</span><br><span class="line">        define.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Heap Test:\n"</span>);</span><br><span class="line">    node b[<span class="number">10</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">100</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">50</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>&#125;,&#123;<span class="number">10</span>,<span class="number">11</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) heap.push(b[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        node temp=heap.top();</span><br><span class="line">        heap.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,temp.x,temp.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">2</span>&lt;<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>STL中有一个优先队列的容器可以使用。</p>
<ul>
<li>头文件</li>
</ul>
<p>queue 队列容器</p>
<p>vector 向量容器</p>
<ul>
<li>操作</li>
</ul>
<p>优先级队列支持的操作</p>
<table>
<thead>
<tr>
<th>调用</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>q.empty()</td>
<td>如果队列为空，则返回true，否则返回false</td>
</tr>
<tr>
<td>q.size()</td>
<td>返回队列中元素的个数</td>
</tr>
<tr>
<td>q.pop()</td>
<td>删除队首元素，但不返回其值</td>
</tr>
<tr>
<td>q.top()</td>
<td>返回具有最高优先级的元素值，但不删除该元素</td>
</tr>
<tr>
<td>q.push(item)</td>
<td>在基于优先级的适当位置插入新元素</td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="优先队列" scheme="http://jcf94.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="ACM_算法学习" scheme="http://jcf94.github.io/categories/ACM-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU 2489 Minimal Ratio Tree 最小生成树+DFS]]></title>
    <link href="http://jcf94.github.io/2014/09/06/2014-09-06-HDU-2489-Minimal-Ratio-Tree/"/>
    <id>http://jcf94.github.io/2014/09/06/2014-09-06-HDU-2489-Minimal-Ratio-Tree/</id>
    <published>2014-09-06T12:57:00.000Z</published>
    <updated>2015-06-19T06:12:38.068Z</updated>
    <content type="html"><![CDATA[<h1 id="Minimal_Ratio_Tree">Minimal Ratio Tree</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>For a tree, which nodes and edges are all weighted, the ratio of it is calculated according to the following equation.</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2014-09-06-HDU-2489-Minimal-Ratio-Tree-1.jpg" alt="1"></p>
<p>Given a complete graph of n nodes with all nodes and edges weighted, your task is to find a tree, which is a sub-graph of the original graph, with m nodes and whose ratio is the smallest among all the trees of m nodes in the graph.</p>
<a id="more"></a>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2014-09-06-HDU-2489-Minimal-Ratio-Tree-2.jpg" alt="2"></p>
<h2 id="Input">Input</h2><p>Input contains multiple test cases. The first line of each test case contains two integers n (2&lt;=n&lt;=15) and m (2&lt;=m&lt;=n), which stands for the number of nodes in the graph and the number of nodes in the minimal ratio tree. Two zeros end the input. The next line contains n numbers which stand for the weight of each node. The following n lines contain a diagonally symmetrical n×n connectivity matrix with each element shows the weight of the edge connecting one node with another. Of course, the diagonal will be all 0, since there is no edge connecting a node with itself.</p>
<p>All the weights of both nodes and edges (except for the ones on the diagonal of the matrix) are integers and in the range of [1, 100].<br>The figure below illustrates the first test case in sample input. Node 1 and Node 3 form the minimal ratio tree.</p>
<h2 id="Output">Output</h2><p>For each test case output one line contains a sequence of the m nodes which constructs the minimal ratio tree. Nodes should be arranged in ascending order. If there are several such sequences, pick the one which has the smallest node number; if there’s a tie, look at the second smallest node number, etc. Please note that the nodes are numbered from 1 .</p>
<h2 id="Sample_Input">Sample Input</h2><blockquote>
<p>3 2<br>30 20 10<br>0 6 2<br>6 0 3<br>2 3 0<br>2 2<br>1 1<br>0 2<br>2 0<br>0 0</p>
</blockquote>
<h2 id="Sample_Output">Sample Output</h2><blockquote>
<p>1 3<br>1 2</p>
</blockquote>
<h2 id="题意">题意</h2><p>给出一张n个点的图，图中的每一个结点以及每一条边都有其权值，要求从中选出m个点，找到m-1条边将其连接，使得边权值与点权值的比值达到最小。</p>
<h2 id="分析">分析</h2><p>要使得比值最小，则点权值和尽可能地大同时边权值和尽可能地小。直接上考虑，边权值和尽可能小即对这m个点作最小生成树。</p>
<p>而题目给定的n不大，故可以用DFS搜出需要的m个点，然后对m个点进行最小生成树，中间注意判断和保存即可。</p>
<p>我用了一个dijkstra+优先队列的prim去找MST，这也是我第一次尝试使用STL的优先队列。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">16</span>],outp[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,node[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> ma[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">double</span> mi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> heaptyp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> num,key;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (heaptyp a,heaptyp b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.num&gt;b.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; heaptype;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> tot)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,now,ans;</span><br><span class="line">    <span class="keyword">bool</span> fla[<span class="number">16</span>];</span><br><span class="line">    priority_queue&lt;heaptype&gt;heap;</span><br><span class="line">    heaptype aaa;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(fla,<span class="number">0</span>,<span class="keyword">sizeof</span>(fla));</span><br><span class="line">    fla[s]=<span class="keyword">true</span>;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">    <span class="keyword">if</span> (flag[i]&amp;&amp;ma[s][i])</span><br><span class="line">    &#123;</span><br><span class="line">        heaptype temp;</span><br><span class="line">        temp.num=ma[s][i];</span><br><span class="line">        temp.key=i;</span><br><span class="line">        heap.push(temp);</span><br><span class="line">        aaa=heap.top();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        heaptype h=heap.top();</span><br><span class="line">        heap.pop();</span><br><span class="line">        aaa=heap.top();</span><br><span class="line">        <span class="keyword">while</span> (fla[h.key])</span><br><span class="line">        &#123;</span><br><span class="line">            h=heap.top();</span><br><span class="line">            heap.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        now=h.key;</span><br><span class="line">        fla[now]=<span class="keyword">true</span>;</span><br><span class="line">        ans+=h.num;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (flag[i]&amp;&amp;ma[now][i])</span><br><span class="line">        <span class="keyword">if</span> (!fla[i])</span><br><span class="line">        &#123;</span><br><span class="line">            heaptype temp;</span><br><span class="line">            temp.num=ma[now][i];</span><br><span class="line">            temp.key=i;</span><br><span class="line">            heap.push(temp);</span><br><span class="line">            aaa=heap.top();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> rat=(<span class="keyword">double</span>)ans/tot;</span><br><span class="line">    <span class="keyword">if</span> (mi-rat&gt;<span class="number">0.0000001</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mi=rat;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) outp[i]=fla[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last,<span class="keyword">int</span> tot)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (now==m)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">int</span> i;</span><br><span class="line">         <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">         <span class="keyword">if</span> (flag[i]) <span class="keyword">break</span>;</span><br><span class="line">         prim(i,tot);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> </span><br><span class="line">     &#123;</span><br><span class="line">         now++;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i=last+<span class="number">1</span>;i&lt;=n-m+now;i++)</span><br><span class="line">         &#123;</span><br><span class="line">             flag[i]=<span class="keyword">true</span>;</span><br><span class="line">             dfs(now,i,tot+node[i]);</span><br><span class="line">             flag[i]=<span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">while</span> (!(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;node[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ma[i][j]);</span><br><span class="line">        </span><br><span class="line">        mi=<span class="number">2147483647</span>;</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-m+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            flag[i]=<span class="keyword">true</span>;</span><br><span class="line">            dfs(<span class="number">1</span>,i,node[i]);</span><br><span class="line">            flag[i]=<span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        <span class="keyword">if</span> (outp[i]) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        <span class="keyword">if</span> (outp[j]) <span class="built_in">printf</span>(<span class="string">" %d"</span>,j);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Minimal_Ratio_Tree">Minimal Ratio Tree</h1><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)</p>
<h2 id="Problem_Description">Problem Description</h2><p>For a tree, which nodes and edges are all weighted, the ratio of it is calculated according to the following equation.</p>
<p><img src="http://7xjh3j.com1.z0.glb.clouddn.com/2014-09-06-HDU-2489-Minimal-Ratio-Tree-1.jpg" alt="1"></p>
<p>Given a complete graph of n nodes with all nodes and edges weighted, your task is to find a tree, which is a sub-graph of the original graph, with m nodes and whose ratio is the smallest among all the trees of m nodes in the graph.</p>]]>
    
    </summary>
    
      <category term="最小生成树" scheme="http://jcf94.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="ACM_训练" scheme="http://jcf94.github.io/categories/ACM-%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈我院学术氛围之我见]]></title>
    <link href="http://jcf94.github.io/2014/08/13/2014-08-13-xueshu/"/>
    <id>http://jcf94.github.io/2014/08/13/2014-08-13-xueshu/</id>
    <published>2014-08-13T04:02:47.000Z</published>
    <updated>2015-05-31T04:37:44.000Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>你的未来会是一张白纸，你想要变成什么样子呢？<br>写在 长安大学ACM协会 成立之日<br></blockquote>

<p>很高兴默默奋斗这么多年，我们学校自己的ACM组织终于成立了。</p>
<p>关于ACM学习的事情，其他几位ACM校队成员都给大家讲过不少了。我找了一下自己上学期写的一篇关于学校学术氛围的，算是在长大几年的心得体会吧，这个时候给刚进校的你们作为忠告好了，也是希望你们能在以后的学习生活中能够做得更好。有些事情对我们来说已经晚了，但是你们还能在问题出现之前提前警醒。</p>
<p>去年寒假的时候，有一位同学跟我闲聊，聊到我们学校缺少学术氛围的事，中间有不少比较尖锐的现实，然而我说我觉得他说的很对，别的学院我不知道，也不敢妄加品论，就光说我们自己的学院好了：</p>
<a id="more"></a>
<p>曾经，在来大学之前，我幻想的信息专业是这样的：学校里面有很多大神，各路大神都有自己擅长的方面，论坛上能有很多人讨论专业内容，几个学校的计算机系相互网络入侵对方……慢慢熟悉学校之后，我发现这一切确实都跟我原来幻想的<strong>很！不！一！样！</strong>。大概就是要什么没什么那种，然后最坑的是学信息的大一还要求<strong>不！准！带！电！脑！</strong>，这是让我们学什么呢？（虽然我默默地带了）</p>
<p>选择信息的，如果不是被调剂或者听别人介绍过来的，无论懂不懂电脑，至少都会对信息相关的内容很感兴趣。每个人都很想学新东西，然而我们学校目前的状况是高年级的大神不多，新进校的大一同学空有满腔热情，却苦于没有地方能够学习。久而久之，当初的兴趣也慢慢被磨蚀掉了。于是进入下一轮循环，等下一届新生到来之后，他们也没有办法再带什么，于是新老交替、最后状况却仍旧没有改变。</p>
<p>那位同学跟我聊到说，他曾经对一些能够自己在网上实现的小东西很感兴趣，关注过一些小比赛，例如微信开放平台等等。参赛者能看到<strong>西交、西电</strong>的，但是陕西省其他的学校几乎就没有人报过。其实在我们国家这样的教育体制下，每个学校所开的课程大致相似，在教学方面，每个学校所收的教师也都是硕博教授吧？可能名校师资力量确实要强很多，但从学习上来说，课堂教学又能相差多少呢？（课堂这块继续略过，里面水也很深。。。-_-///）</p>
<p>那么强校跟弱校的差距到底在哪？我想，或许<strong>学术氛围</strong>这四个字真的很重要。</p>
<h2 id="我所见的现状">我所见的现状</h2><p>环境不同，学生的思想也不同。因为没有他们那样的<strong>学术环境</strong>，所以我们把学习都<strong>局限在课堂上、课本上</strong>，大多数同学想要学东西，但是苦于没有人教，然后又<strong>没有自己学习的意识</strong>。但是恰恰是光靠课堂上学的那些，我们什么都做不了。人家大一大二就能自己做电赛、写手机软件、做微信平台，我们可能到大四毕业都做不了这些事。他们有活跃的社团，有专门研究软件开发的、有研究电竞的、有学做flash做游戏的、有研究网络攻防的、有研究无线加密的……只可惜很遗憾，在我们学校能看到的大部分社团都是<strong>人文类</strong>的。仅有的几个专业性社团最后也是因为人数太少，活动参与不积极，最终走向结束。我们学校计算机协会的前主席是我舍友，对于我所见到的现状，他也有过很多的思考，曾经也是想过希望能在他们协会内部多开点交流学习的版块，最后也是限于我们学校的各种因素而不了了之了。</p>
<p>大一刚入校的时候，对于学校组织的选择，我选择的是我们学院院科协的技术服务部。当初就是因为觉得只有在那里才算是能有个跟别人交流技术、学习技术的地方，才抛开了好多学长让我加学生会的建议。那一届科协的主席和部长的能力都很强，我大学三年过来所见到的科协也就是那时候才是巅峰。只可惜当时的主席、部长确实是有这方面的想法，最终也还是失败了。我们内部做过挺多次技术交流会，最终想要推广到全院、全校的时候，却还是遭遇了很大的困难。</p>
<p>这里再提到我们学院的几位辅导员，然而他们都并不是信息相关专业毕业出来的，对于如何管理学生，他们很有经验，但是对于我们信息学院学生真正需要的，他们却可能不是太了解。很遗憾我们学院每次在学校里面得的奖都是军训歌咏比赛、广播操比赛等等这类，而且辅导员看重、或者说他们有能力去促进的也只有这些，真正在信息相关的领域里却是做不出什么成就来。</p>
<h2 id="最后">最后</h2><p>我希望看到这里的同学都能够好好想想下面这个问题，既然我们现在跟大家上的都是<strong>一样的课</strong>，学的都是<strong>一样的东西</strong>，那么<strong>是什么能够让我们自己与众不同</strong>呢？</p>
<ul>
<li>没人带只能自己学咯？那还能怎么办？如果不想剩下时间都荒废掉，只有自己对自己想办法了。</li>
</ul>
<p>剩下的还是留给大家自己思考吧。。。</p>
<p>我们在学校推广ACM，其实也是希望能够有更多的同学能够参与到<strong>自己思考、自己学习</strong>的道路上来。</p>
<p>确实很高兴看到我们学校的ACM社团终于要成立了，我校在ACM方面起步较晚，前面几届也是由老师和几个队员坚持下来的，三无组织维持了这么多年，今天终于有个像样的实体了。之后相信一定会越办越好！！！！！！！！！</p>
<ul>
<li>我们现在想做的也就是开拓者。我不敢说我们到底最终能够改变什么。只是到你们这届，我想说事情会不一样了。然后再下一届，我还在的话会继续带，你们那时候也已经培养出来自己的能力了。新生所能够接触到的环境也一定会更好！</li>
</ul>
<p>希望日后有一天，我曾经幻想过百花齐放的场景能在我们学院出现。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center"><br>你的未来会是一张白纸，你想要变成什么样子呢？<br>写在 长安大学ACM协会 成立之日<br></blockquote>

<p>很高兴默默奋斗这么多年，我们学校自己的ACM组织终于成立了。</p>
<p>关于ACM学习的事情，其他几位ACM校队成员都给大家讲过不少了。我找了一下自己上学期写的一篇关于学校学术氛围的，算是在长大几年的心得体会吧，这个时候给刚进校的你们作为忠告好了，也是希望你们能在以后的学习生活中能够做得更好。有些事情对我们来说已经晚了，但是你们还能在问题出现之前提前警醒。</p>
<p>去年寒假的时候，有一位同学跟我闲聊，聊到我们学校缺少学术氛围的事，中间有不少比较尖锐的现实，然而我说我觉得他说的很对，别的学院我不知道，也不敢妄加品论，就光说我们自己的学院好了：</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://jcf94.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="我的大学" scheme="http://jcf94.github.io/categories/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
</feed>